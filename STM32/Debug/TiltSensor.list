
TiltSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800a6d8  0800a6d8  0001a6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa10  0800aa10  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa10  0800aa10  0001aa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa18  0800aa18  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800aa20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004db0  20000080  0800aaa0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e30  0800aaa0  00024e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aad5  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000329f  00000000  00000000  0003ab85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  0003de28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001418  00000000  00000000  0003f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002310c  00000000  00000000  000407c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c02  00000000  00000000  000638cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5593  00000000  00000000  000744ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149a61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc4  00000000  00000000  00149adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6c0 	.word	0x0800a6c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800a6c0 	.word	0x0800a6c0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <CalcullateTilts>:
float KGyro = 0.95, KAcc;
float AccXFl, AccYFl, AccZFl, AccXFlPrev, AccYFlPrev, AccZFlPrev;
float TiltX, TiltY, TiltXPrev, TiltYPrev;
_Bool Starting = 1;

void CalcullateTilts(void) {
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0

	float RotX = GyroXfl * TICK_PERIOD;
 8000e9e:	4bd8      	ldr	r3, [pc, #864]	; (8001200 <CalcullateTilts+0x368>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff faf8 	bl	8000498 <__aeabi_f2d>
 8000ea8:	a3d1      	add	r3, pc, #836	; (adr r3, 80011f0 <CalcullateTilts+0x358>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	f7ff fb4b 	bl	8000548 <__aeabi_dmul>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460c      	mov	r4, r1
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	4621      	mov	r1, r4
 8000eba:	f7ff fe1d 	bl	8000af8 <__aeabi_d2f>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
	float RotY = GyroYfl * TICK_PERIOD;
 8000ec2:	4bd0      	ldr	r3, [pc, #832]	; (8001204 <CalcullateTilts+0x36c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fae6 	bl	8000498 <__aeabi_f2d>
 8000ecc:	a3c8      	add	r3, pc, #800	; (adr r3, 80011f0 <CalcullateTilts+0x358>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb39 	bl	8000548 <__aeabi_dmul>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460c      	mov	r4, r1
 8000eda:	4618      	mov	r0, r3
 8000edc:	4621      	mov	r1, r4
 8000ede:	f7ff fe0b 	bl	8000af8 <__aeabi_d2f>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
	float RotZ = GyroZfl * TICK_PERIOD;
 8000ee6:	4bc8      	ldr	r3, [pc, #800]	; (8001208 <CalcullateTilts+0x370>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fad4 	bl	8000498 <__aeabi_f2d>
 8000ef0:	a3bf      	add	r3, pc, #764	; (adr r3, 80011f0 <CalcullateTilts+0x358>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	f7ff fb27 	bl	8000548 <__aeabi_dmul>
 8000efa:	4603      	mov	r3, r0
 8000efc:	460c      	mov	r4, r1
 8000efe:	4618      	mov	r0, r3
 8000f00:	4621      	mov	r1, r4
 8000f02:	f7ff fdf9 	bl	8000af8 <__aeabi_d2f>
 8000f06:	4603      	mov	r3, r0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c

	float Alf = RotX * 8.75 / 57296, Bt = RotY * 8.75 / 57296, Gm = RotZ * 8.75
 8000f0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f0c:	f7ff fac4 	bl	8000498 <__aeabi_f2d>
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	4bbd      	ldr	r3, [pc, #756]	; (800120c <CalcullateTilts+0x374>)
 8000f16:	f7ff fb17 	bl	8000548 <__aeabi_dmul>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460c      	mov	r4, r1
 8000f1e:	4618      	mov	r0, r3
 8000f20:	4621      	mov	r1, r4
 8000f22:	a3b5      	add	r3, pc, #724	; (adr r3, 80011f8 <CalcullateTilts+0x360>)
 8000f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f28:	f7ff fc38 	bl	800079c <__aeabi_ddiv>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	4618      	mov	r0, r3
 8000f32:	4621      	mov	r1, r4
 8000f34:	f7ff fde0 	bl	8000af8 <__aeabi_d2f>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f3e:	f7ff faab 	bl	8000498 <__aeabi_f2d>
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	4bb1      	ldr	r3, [pc, #708]	; (800120c <CalcullateTilts+0x374>)
 8000f48:	f7ff fafe 	bl	8000548 <__aeabi_dmul>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	4618      	mov	r0, r3
 8000f52:	4621      	mov	r1, r4
 8000f54:	a3a8      	add	r3, pc, #672	; (adr r3, 80011f8 <CalcullateTilts+0x360>)
 8000f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5a:	f7ff fc1f 	bl	800079c <__aeabi_ddiv>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460c      	mov	r4, r1
 8000f62:	4618      	mov	r0, r3
 8000f64:	4621      	mov	r1, r4
 8000f66:	f7ff fdc7 	bl	8000af8 <__aeabi_d2f>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f70:	f7ff fa92 	bl	8000498 <__aeabi_f2d>
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	4ba4      	ldr	r3, [pc, #656]	; (800120c <CalcullateTilts+0x374>)
 8000f7a:	f7ff fae5 	bl	8000548 <__aeabi_dmul>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460c      	mov	r4, r1
 8000f82:	4618      	mov	r0, r3
 8000f84:	4621      	mov	r1, r4
			/ 57296;
 8000f86:	a39c      	add	r3, pc, #624	; (adr r3, 80011f8 <CalcullateTilts+0x360>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fc06 	bl	800079c <__aeabi_ddiv>
 8000f90:	4603      	mov	r3, r0
 8000f92:	460c      	mov	r4, r1
	float Alf = RotX * 8.75 / 57296, Bt = RotY * 8.75 / 57296, Gm = RotZ * 8.75
 8000f94:	4618      	mov	r0, r3
 8000f96:	4621      	mov	r1, r4
 8000f98:	f7ff fdae 	bl	8000af8 <__aeabi_d2f>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	623b      	str	r3, [r7, #32]
	float SinBt = sin(Bt);
 8000fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fa2:	f7ff fa79 	bl	8000498 <__aeabi_f2d>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460c      	mov	r4, r1
 8000faa:	ec44 3b10 	vmov	d0, r3, r4
 8000fae:	f008 fa2f 	bl	8009410 <sin>
 8000fb2:	ec54 3b10 	vmov	r3, r4, d0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	4621      	mov	r1, r4
 8000fba:	f7ff fd9d 	bl	8000af8 <__aeabi_d2f>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	61fb      	str	r3, [r7, #28]
	float CosBt = cos(Bt);
 8000fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fc4:	f7ff fa68 	bl	8000498 <__aeabi_f2d>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	460c      	mov	r4, r1
 8000fcc:	ec44 3b10 	vmov	d0, r3, r4
 8000fd0:	f008 f9ce 	bl	8009370 <cos>
 8000fd4:	ec54 3b10 	vmov	r3, r4, d0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	4621      	mov	r1, r4
 8000fdc:	f7ff fd8c 	bl	8000af8 <__aeabi_d2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	61bb      	str	r3, [r7, #24]
	float SinAlf = sin(Alf);
 8000fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fe6:	f7ff fa57 	bl	8000498 <__aeabi_f2d>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	ec44 3b10 	vmov	d0, r3, r4
 8000ff2:	f008 fa0d 	bl	8009410 <sin>
 8000ff6:	ec54 3b10 	vmov	r3, r4, d0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	f7ff fd7b 	bl	8000af8 <__aeabi_d2f>
 8001002:	4603      	mov	r3, r0
 8001004:	617b      	str	r3, [r7, #20]
	float CosAlf = cos(Alf);
 8001006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001008:	f7ff fa46 	bl	8000498 <__aeabi_f2d>
 800100c:	4603      	mov	r3, r0
 800100e:	460c      	mov	r4, r1
 8001010:	ec44 3b10 	vmov	d0, r3, r4
 8001014:	f008 f9ac 	bl	8009370 <cos>
 8001018:	ec54 3b10 	vmov	r3, r4, d0
 800101c:	4618      	mov	r0, r3
 800101e:	4621      	mov	r1, r4
 8001020:	f7ff fd6a 	bl	8000af8 <__aeabi_d2f>
 8001024:	4603      	mov	r3, r0
 8001026:	613b      	str	r3, [r7, #16]
	float SinGm = sin(Gm);
 8001028:	6a38      	ldr	r0, [r7, #32]
 800102a:	f7ff fa35 	bl	8000498 <__aeabi_f2d>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	ec44 3b10 	vmov	d0, r3, r4
 8001036:	f008 f9eb 	bl	8009410 <sin>
 800103a:	ec54 3b10 	vmov	r3, r4, d0
 800103e:	4618      	mov	r0, r3
 8001040:	4621      	mov	r1, r4
 8001042:	f7ff fd59 	bl	8000af8 <__aeabi_d2f>
 8001046:	4603      	mov	r3, r0
 8001048:	60fb      	str	r3, [r7, #12]
	float CosGm = cos(Gm);
 800104a:	6a38      	ldr	r0, [r7, #32]
 800104c:	f7ff fa24 	bl	8000498 <__aeabi_f2d>
 8001050:	4603      	mov	r3, r0
 8001052:	460c      	mov	r4, r1
 8001054:	ec44 3b10 	vmov	d0, r3, r4
 8001058:	f008 f98a 	bl	8009370 <cos>
 800105c:	ec54 3b10 	vmov	r3, r4, d0
 8001060:	4618      	mov	r0, r3
 8001062:	4621      	mov	r1, r4
 8001064:	f7ff fd48 	bl	8000af8 <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
 800106a:	60bb      	str	r3, [r7, #8]

	KAcc = 1 - KGyro;
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <CalcullateTilts+0x378>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107a:	4b66      	ldr	r3, [pc, #408]	; (8001214 <CalcullateTilts+0x37c>)
 800107c:	edc3 7a00 	vstr	s15, [r3]

	if (!Starting) {
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <CalcullateTilts+0x380>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f083 0301 	eor.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 81da 	beq.w	8001444 <CalcullateTilts+0x5ac>

		XNew = (AccXFlPrev * CosBt * CosGm - AccYFlPrev * CosBt * SinGm
 8001090:	4b62      	ldr	r3, [pc, #392]	; (800121c <CalcullateTilts+0x384>)
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	edd7 7a06 	vldr	s15, [r7, #24]
 800109a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800109e:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	4b5e      	ldr	r3, [pc, #376]	; (8001220 <CalcullateTilts+0x388>)
 80010a8:	edd3 6a00 	vldr	s13, [r3]
 80010ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80010b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010bc:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ AccZFlPrev * SinBt) * KGyro + KAcc * AccXfl;
 80010c0:	4b58      	ldr	r3, [pc, #352]	; (8001224 <CalcullateTilts+0x38c>)
 80010c2:	edd3 6a00 	vldr	s13, [r3]
 80010c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80010ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d2:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <CalcullateTilts+0x378>)
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010dc:	4b4d      	ldr	r3, [pc, #308]	; (8001214 <CalcullateTilts+0x37c>)
 80010de:	edd3 6a00 	vldr	s13, [r3]
 80010e2:	4b51      	ldr	r3, [pc, #324]	; (8001228 <CalcullateTilts+0x390>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ec:	ee77 7a27 	vadd.f32	s15, s14, s15
		XNew = (AccXFlPrev * CosBt * CosGm - AccYFlPrev * CosBt * SinGm
 80010f0:	4b4e      	ldr	r3, [pc, #312]	; (800122c <CalcullateTilts+0x394>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]
		YNew = (AccXFlPrev * SinAlf * SinBt * CosGm
 80010f6:	4b49      	ldr	r3, [pc, #292]	; (800121c <CalcullateTilts+0x384>)
 80010f8:	ed93 7a00 	vldr	s14, [r3]
 80010fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001104:	edd7 7a07 	vldr	s15, [r7, #28]
 8001108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001110:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ AccXFlPrev * CosAlf * SinGm
 8001114:	4b41      	ldr	r3, [pc, #260]	; (800121c <CalcullateTilts+0x384>)
 8001116:	edd3 6a00 	vldr	s13, [r3]
 800111a:	edd7 7a04 	vldr	s15, [r7, #16]
 800111e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001122:	edd7 7a03 	vldr	s15, [r7, #12]
 8001126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ AccYFlPrev * SinAlf * SinBt * SinGm
 800112e:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <CalcullateTilts+0x388>)
 8001130:	edd3 6a00 	vldr	s13, [r3]
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800113c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001140:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001144:	edd7 7a03 	vldr	s15, [r7, #12]
 8001148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ AccYFlPrev * CosAlf * CosGm - AccZFlPrev * SinAlf * CosBt)
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <CalcullateTilts+0x388>)
 8001152:	edd3 6a00 	vldr	s13, [r3]
 8001156:	edd7 7a04 	vldr	s15, [r7, #16]
 800115a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800115e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <CalcullateTilts+0x38c>)
 800116c:	edd3 6a00 	vldr	s13, [r3]
 8001170:	edd7 7a05 	vldr	s15, [r7, #20]
 8001174:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001178:	edd7 7a06 	vldr	s15, [r7, #24]
 800117c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001180:	ee37 7a67 	vsub.f32	s14, s14, s15
				* KGyro + KAcc * AccYfl;
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <CalcullateTilts+0x378>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <CalcullateTilts+0x37c>)
 8001190:	edd3 6a00 	vldr	s13, [r3]
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <CalcullateTilts+0x398>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800119e:	ee77 7a27 	vadd.f32	s15, s14, s15
		YNew = (AccXFlPrev * SinAlf * SinBt * CosGm
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <CalcullateTilts+0x39c>)
 80011a4:	edc3 7a00 	vstr	s15, [r3]
		ZNew = (-AccXFlPrev * CosAlf * SinBt * CosGm
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <CalcullateTilts+0x384>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	eeb1 7a67 	vneg.f32	s14, s15
 80011b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011c6:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ AccXFlPrev * SinAlf * SinGm
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <CalcullateTilts+0x384>)
 80011cc:	edd3 6a00 	vldr	s13, [r3]
 80011d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ AccYFlPrev * CosAlf * SinBt * SinGm
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <CalcullateTilts+0x388>)
 80011e6:	edd3 6a00 	vldr	s13, [r3]
 80011ea:	e025      	b.n	8001238 <CalcullateTilts+0x3a0>
 80011ec:	f3af 8000 	nop.w
 80011f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011f4:	3f70624d 	.word	0x3f70624d
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40ebfa00 	.word	0x40ebfa00
 8001200:	20004bc8 	.word	0x20004bc8
 8001204:	20004d30 	.word	0x20004d30
 8001208:	20004d94 	.word	0x20004d94
 800120c:	40218000 	.word	0x40218000
 8001210:	20000000 	.word	0x20000000
 8001214:	200049d8 	.word	0x200049d8
 8001218:	20000004 	.word	0x20000004
 800121c:	200049ac 	.word	0x200049ac
 8001220:	200049d0 	.word	0x200049d0
 8001224:	200049c4 	.word	0x200049c4
 8001228:	200049f4 	.word	0x200049f4
 800122c:	200049a4 	.word	0x200049a4
 8001230:	200049e8 	.word	0x200049e8
 8001234:	200049cc 	.word	0x200049cc
 8001238:	edd7 7a04 	vldr	s15, [r7, #16]
 800123c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001240:	edd7 7a07 	vldr	s15, [r7, #28]
 8001244:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001248:	edd7 7a03 	vldr	s15, [r7, #12]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ AccYFlPrev * SinAlf * CosGm + AccZFlPrev * CosAlf * CosBt)
 8001254:	4b88      	ldr	r3, [pc, #544]	; (8001478 <CalcullateTilts+0x5e0>)
 8001256:	edd3 6a00 	vldr	s13, [r3]
 800125a:	edd7 7a05 	vldr	s15, [r7, #20]
 800125e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001262:	edd7 7a02 	vldr	s15, [r7, #8]
 8001266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126e:	4b83      	ldr	r3, [pc, #524]	; (800147c <CalcullateTilts+0x5e4>)
 8001270:	edd3 6a00 	vldr	s13, [r3]
 8001274:	edd7 7a04 	vldr	s15, [r7, #16]
 8001278:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800127c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001284:	ee37 7a27 	vadd.f32	s14, s14, s15
				* KGyro + KAcc * AccZfl;
 8001288:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <CalcullateTilts+0x5e8>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001292:	4b7c      	ldr	r3, [pc, #496]	; (8001484 <CalcullateTilts+0x5ec>)
 8001294:	edd3 6a00 	vldr	s13, [r3]
 8001298:	4b7b      	ldr	r3, [pc, #492]	; (8001488 <CalcullateTilts+0x5f0>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
		ZNew = (-AccXFlPrev * CosAlf * SinBt * CosGm
 80012a6:	4b79      	ldr	r3, [pc, #484]	; (800148c <CalcullateTilts+0x5f4>)
 80012a8:	edc3 7a00 	vstr	s15, [r3]

		if ((YNew == 0) && (ZNew == 0))
 80012ac:	4b78      	ldr	r3, [pc, #480]	; (8001490 <CalcullateTilts+0x5f8>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d10c      	bne.n	80012d6 <CalcullateTilts+0x43e>
 80012bc:	4b73      	ldr	r3, [pc, #460]	; (800148c <CalcullateTilts+0x5f4>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	d104      	bne.n	80012d6 <CalcullateTilts+0x43e>
			TiltX = TiltXPrev;
 80012cc:	4b71      	ldr	r3, [pc, #452]	; (8001494 <CalcullateTilts+0x5fc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a71      	ldr	r2, [pc, #452]	; (8001498 <CalcullateTilts+0x600>)
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e049      	b.n	800136a <CalcullateTilts+0x4d2>
		else
		{
			float tmp=XNew / (sqrt(YNew * YNew + ZNew * ZNew));
 80012d6:	4b71      	ldr	r3, [pc, #452]	; (800149c <CalcullateTilts+0x604>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8dc 	bl	8000498 <__aeabi_f2d>
 80012e0:	4604      	mov	r4, r0
 80012e2:	460d      	mov	r5, r1
 80012e4:	4b6a      	ldr	r3, [pc, #424]	; (8001490 <CalcullateTilts+0x5f8>)
 80012e6:	ed93 7a00 	vldr	s14, [r3]
 80012ea:	4b69      	ldr	r3, [pc, #420]	; (8001490 <CalcullateTilts+0x5f8>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f4:	4b65      	ldr	r3, [pc, #404]	; (800148c <CalcullateTilts+0x5f4>)
 80012f6:	edd3 6a00 	vldr	s13, [r3]
 80012fa:	4b64      	ldr	r3, [pc, #400]	; (800148c <CalcullateTilts+0x5f4>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	ee17 0a90 	vmov	r0, s15
 800130c:	f7ff f8c4 	bl	8000498 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	ec43 2b10 	vmov	d0, r2, r3
 8001318:	f008 f8c2 	bl	80094a0 <sqrt>
 800131c:	ec53 2b10 	vmov	r2, r3, d0
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7ff fa3a 	bl	800079c <__aeabi_ddiv>
 8001328:	4603      	mov	r3, r0
 800132a:	460c      	mov	r4, r1
 800132c:	4618      	mov	r0, r3
 800132e:	4621      	mov	r1, r4
 8001330:	f7ff fbe2 	bl	8000af8 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	607b      	str	r3, [r7, #4]
			TiltX = atan(tmp) * 57.296;
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff f8ad 	bl	8000498 <__aeabi_f2d>
 800133e:	4603      	mov	r3, r0
 8001340:	460c      	mov	r4, r1
 8001342:	ec44 3b10 	vmov	d0, r3, r4
 8001346:	f007 fe73 	bl	8009030 <atan>
 800134a:	ec51 0b10 	vmov	r0, r1, d0
 800134e:	a348      	add	r3, pc, #288	; (adr r3, 8001470 <CalcullateTilts+0x5d8>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f8f8 	bl	8000548 <__aeabi_dmul>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	4618      	mov	r0, r3
 800135e:	4621      	mov	r1, r4
 8001360:	f7ff fbca 	bl	8000af8 <__aeabi_d2f>
 8001364:	4602      	mov	r2, r0
 8001366:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <CalcullateTilts+0x600>)
 8001368:	601a      	str	r2, [r3, #0]
		}
		TiltXPrev = TiltX;
 800136a:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <CalcullateTilts+0x600>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a49      	ldr	r2, [pc, #292]	; (8001494 <CalcullateTilts+0x5fc>)
 8001370:	6013      	str	r3, [r2, #0]

		if ((XNew == 0) && (ZNew == 0))
 8001372:	4b4a      	ldr	r3, [pc, #296]	; (800149c <CalcullateTilts+0x604>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	eef5 7a40 	vcmp.f32	s15, #0.0
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	d10c      	bne.n	800139c <CalcullateTilts+0x504>
 8001382:	4b42      	ldr	r3, [pc, #264]	; (800148c <CalcullateTilts+0x5f4>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	eef5 7a40 	vcmp.f32	s15, #0.0
 800138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001390:	d104      	bne.n	800139c <CalcullateTilts+0x504>
			TiltY = TiltYPrev;
 8001392:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <CalcullateTilts+0x608>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a43      	ldr	r2, [pc, #268]	; (80014a4 <CalcullateTilts+0x60c>)
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e042      	b.n	8001422 <CalcullateTilts+0x58a>
		else
			TiltY = atan(YNew / (sqrt(XNew * XNew + ZNew * ZNew))) * 57.296;
 800139c:	4b3c      	ldr	r3, [pc, #240]	; (8001490 <CalcullateTilts+0x5f8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f879 	bl	8000498 <__aeabi_f2d>
 80013a6:	4604      	mov	r4, r0
 80013a8:	460d      	mov	r5, r1
 80013aa:	4b3c      	ldr	r3, [pc, #240]	; (800149c <CalcullateTilts+0x604>)
 80013ac:	ed93 7a00 	vldr	s14, [r3]
 80013b0:	4b3a      	ldr	r3, [pc, #232]	; (800149c <CalcullateTilts+0x604>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ba:	4b34      	ldr	r3, [pc, #208]	; (800148c <CalcullateTilts+0x5f4>)
 80013bc:	edd3 6a00 	vldr	s13, [r3]
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <CalcullateTilts+0x5f4>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	ee17 0a90 	vmov	r0, s15
 80013d2:	f7ff f861 	bl	8000498 <__aeabi_f2d>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	ec43 2b10 	vmov	d0, r2, r3
 80013de:	f008 f85f 	bl	80094a0 <sqrt>
 80013e2:	ec53 2b10 	vmov	r2, r3, d0
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7ff f9d7 	bl	800079c <__aeabi_ddiv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	ec44 3b17 	vmov	d7, r3, r4
 80013f6:	eeb0 0a47 	vmov.f32	s0, s14
 80013fa:	eef0 0a67 	vmov.f32	s1, s15
 80013fe:	f007 fe17 	bl	8009030 <atan>
 8001402:	ec51 0b10 	vmov	r0, r1, d0
 8001406:	a31a      	add	r3, pc, #104	; (adr r3, 8001470 <CalcullateTilts+0x5d8>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f89c 	bl	8000548 <__aeabi_dmul>
 8001410:	4603      	mov	r3, r0
 8001412:	460c      	mov	r4, r1
 8001414:	4618      	mov	r0, r3
 8001416:	4621      	mov	r1, r4
 8001418:	f7ff fb6e 	bl	8000af8 <__aeabi_d2f>
 800141c:	4602      	mov	r2, r0
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <CalcullateTilts+0x60c>)
 8001420:	601a      	str	r2, [r3, #0]
		TiltYPrev = TiltY;
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <CalcullateTilts+0x60c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <CalcullateTilts+0x608>)
 8001428:	6013      	str	r3, [r2, #0]

		AccXFlPrev = XNew;
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <CalcullateTilts+0x604>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <CalcullateTilts+0x610>)
 8001430:	6013      	str	r3, [r2, #0]
		AccYFlPrev = YNew;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <CalcullateTilts+0x5f8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <CalcullateTilts+0x5e0>)
 8001438:	6013      	str	r3, [r2, #0]
		AccZFlPrev = ZNew;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <CalcullateTilts+0x5f4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a0f      	ldr	r2, [pc, #60]	; (800147c <CalcullateTilts+0x5e4>)
 8001440:	6013      	str	r3, [r2, #0]
		AccYFlPrev = AccYfl;
		AccZFlPrev = AccZfl;
		Starting=0;
	}

}
 8001442:	e00e      	b.n	8001462 <CalcullateTilts+0x5ca>
		AccXFlPrev = AccXfl;
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <CalcullateTilts+0x614>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <CalcullateTilts+0x610>)
 800144a:	6013      	str	r3, [r2, #0]
		AccYFlPrev = AccYfl;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <CalcullateTilts+0x618>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a09      	ldr	r2, [pc, #36]	; (8001478 <CalcullateTilts+0x5e0>)
 8001452:	6013      	str	r3, [r2, #0]
		AccZFlPrev = AccZfl;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <CalcullateTilts+0x5f0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a08      	ldr	r2, [pc, #32]	; (800147c <CalcullateTilts+0x5e4>)
 800145a:	6013      	str	r3, [r2, #0]
		Starting=0;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <CalcullateTilts+0x61c>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	3738      	adds	r7, #56	; 0x38
 8001466:	46bd      	mov	sp, r7
 8001468:	bdb0      	pop	{r4, r5, r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	53f7ced9 	.word	0x53f7ced9
 8001474:	404ca5e3 	.word	0x404ca5e3
 8001478:	200049d0 	.word	0x200049d0
 800147c:	200049c4 	.word	0x200049c4
 8001480:	20000000 	.word	0x20000000
 8001484:	200049d8 	.word	0x200049d8
 8001488:	20004a08 	.word	0x20004a08
 800148c:	200049a8 	.word	0x200049a8
 8001490:	200049cc 	.word	0x200049cc
 8001494:	200049c0 	.word	0x200049c0
 8001498:	200049b8 	.word	0x200049b8
 800149c:	200049a4 	.word	0x200049a4
 80014a0:	200049bc 	.word	0x200049bc
 80014a4:	200049c8 	.word	0x200049c8
 80014a8:	200049ac 	.word	0x200049ac
 80014ac:	200049f4 	.word	0x200049f4
 80014b0:	200049e8 	.word	0x200049e8
 80014b4:	20000004 	.word	0x20000004

080014b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014bc:	f001 f95c 	bl	8002778 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014c0:	f000 f862 	bl	8001588 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014c4:	f000 f970 	bl	80017a8 <MX_GPIO_Init>
	MX_DMA_Init();
 80014c8:	f000 f930 	bl	800172c <MX_DMA_Init>
	MX_SPI1_Init();
 80014cc:	f000 f8c6 	bl	800165c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80014d0:	f000 f8fa 	bl	80016c8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LIS3DSH_CS, GPIO_PIN_SET); //CS=1 for onoard accelerometer
 80014d4:	2201      	movs	r2, #1
 80014d6:	2108      	movs	r1, #8
 80014d8:	481c      	ldr	r0, [pc, #112]	; (800154c <main+0x94>)
 80014da:	f001 ffbd 	bl	8003458 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_SET); //CS=1 for MPU6500
 80014de:	2201      	movs	r2, #1
 80014e0:	2140      	movs	r1, #64	; 0x40
 80014e2:	481a      	ldr	r0, [pc, #104]	; (800154c <main+0x94>)
 80014e4:	f001 ffb8 	bl	8003458 <HAL_GPIO_WritePin>

	InitMPU6500();
 80014e8:	f000 f9e2 	bl	80018b0 <InitMPU6500>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80014ec:	f004 fe34 	bl	8006158 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of QueueSPI1 */
	QueueSPI1Handle = osMessageQueueNew(16, sizeof(uint16_t),
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <main+0x98>)
 80014f2:	2102      	movs	r1, #2
 80014f4:	2010      	movs	r0, #16
 80014f6:	f004 ff6d 	bl	80063d4 <osMessageQueueNew>
 80014fa:	4602      	mov	r2, r0
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <main+0x9c>)
 80014fe:	601a      	str	r2, [r3, #0]
			&QueueSPI1_attributes);

	/* creation of QueueUART2 */
	QueueUART2Handle = osMessageQueueNew(16, sizeof(uint16_t),
 8001500:	4a15      	ldr	r2, [pc, #84]	; (8001558 <main+0xa0>)
 8001502:	2102      	movs	r1, #2
 8001504:	2010      	movs	r0, #16
 8001506:	f004 ff65 	bl	80063d4 <osMessageQueueNew>
 800150a:	4602      	mov	r2, r0
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <main+0xa4>)
 800150e:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8001510:	4a13      	ldr	r2, [pc, #76]	; (8001560 <main+0xa8>)
 8001512:	2100      	movs	r1, #0
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <main+0xac>)
 8001516:	f004 fe89 	bl	800622c <osThreadNew>
 800151a:	4602      	mov	r2, r0
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <main+0xb0>)
 800151e:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);

	/* creation of MPU6500Task */
	MPU6500TaskHandle = osThreadNew(MPU6500TaskEntry, NULL,
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <main+0xb4>)
 8001522:	2100      	movs	r1, #0
 8001524:	4812      	ldr	r0, [pc, #72]	; (8001570 <main+0xb8>)
 8001526:	f004 fe81 	bl	800622c <osThreadNew>
 800152a:	4602      	mov	r2, r0
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <main+0xbc>)
 800152e:	601a      	str	r2, [r3, #0]
			&MPU6500Task_attributes);

	/* creation of UART2ReceivedCm */
	UART2ReceivedCmHandle = osThreadNew(UART2ReceivedCmdEntry, NULL,
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <main+0xc0>)
 8001532:	2100      	movs	r1, #0
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <main+0xc4>)
 8001536:	f004 fe79 	bl	800622c <osThreadNew>
 800153a:	4602      	mov	r2, r0
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <main+0xc8>)
 800153e:	601a      	str	r2, [r3, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	CalibratingStateMachine = 0; //Старт калибровки
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <main+0xcc>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
	//Calibrate = 1;//Калибровка по включению
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001546:	f004 fe3b 	bl	80061c0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 800154a:	e7fe      	b.n	800154a <main+0x92>
 800154c:	40021000 	.word	0x40021000
 8001550:	0800a79c 	.word	0x0800a79c
 8001554:	20004c28 	.word	0x20004c28
 8001558:	0800a7b4 	.word	0x0800a7b4
 800155c:	20004a18 	.word	0x20004a18
 8001560:	0800a730 	.word	0x0800a730
 8001564:	08001fa1 	.word	0x08001fa1
 8001568:	200049dc 	.word	0x200049dc
 800156c:	0800a754 	.word	0x0800a754
 8001570:	08001fb1 	.word	0x08001fb1
 8001574:	20004b50 	.word	0x20004b50
 8001578:	0800a778 	.word	0x0800a778
 800157c:	08002019 	.word	0x08002019
 8001580:	200049f8 	.word	0x200049f8
 8001584:	20004b4a 	.word	0x20004b4a

08001588 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	; 0x50
 800158c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	2230      	movs	r2, #48	; 0x30
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f009 f889 	bl	800a6ae <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <SystemClock_Config+0xcc>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a27      	ldr	r2, [pc, #156]	; (8001654 <SystemClock_Config+0xcc>)
 80015b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <SystemClock_Config+0xcc>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <SystemClock_Config+0xd0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <SystemClock_Config+0xd0>)
 80015d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <SystemClock_Config+0xd0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ee:	2302      	movs	r3, #2
 80015f0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80015f8:	2304      	movs	r3, #4
 80015fa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80015fc:	23a8      	movs	r3, #168	; 0xa8
 80015fe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001600:	2302      	movs	r3, #2
 8001602:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001604:	2304      	movs	r3, #4
 8001606:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	4618      	mov	r0, r3
 800160e:	f001 ff3d 	bl	800348c <HAL_RCC_OscConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0x94>
		Error_Handler();
 8001618:	f000 fda0 	bl	800215c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800161c:	230f      	movs	r3, #15
 800161e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001620:	2302      	movs	r3, #2
 8001622:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800162c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2105      	movs	r1, #5
 800163a:	4618      	mov	r0, r3
 800163c:	f002 f996 	bl	800396c <HAL_RCC_ClockConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0xc2>
		Error_Handler();
 8001646:	f000 fd89 	bl	800215c <Error_Handler>
	}
}
 800164a:	bf00      	nop
 800164c:	3750      	adds	r7, #80	; 0x50
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000

0800165c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <MX_SPI1_Init+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800166c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_SPI1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001690:	2238      	movs	r2, #56	; 0x38
 8001692:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_SPI1_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_SPI1_Init+0x64>)
 80016a8:	220a      	movs	r2, #10
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_SPI1_Init+0x64>)
 80016ae:	f002 fb81 	bl	8003db4 <HAL_SPI_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_SPI1_Init+0x60>
		Error_Handler();
 80016b8:	f000 fd50 	bl	800215c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20004bd0 	.word	0x20004bd0
 80016c4:	40013000 	.word	0x40013000

080016c8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 80016ce:	4a16      	ldr	r2, [pc, #88]	; (8001728 <MX_USART2_UART_Init+0x60>)
 80016d0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 460800;
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 80016d4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80016d8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80016fe:	4809      	ldr	r0, [pc, #36]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 8001700:	f003 fe0c 	bl	800531c <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800170a:	f000 fd27 	bl	800215c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <MX_USART2_UART_Init+0x5c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0220 	orr.w	r2, r2, #32
 800171c:	60da      	str	r2, [r3, #12]

	/* USER CODE END USART2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20004c2c 	.word	0x20004c2c
 8001728:	40004400 	.word	0x40004400

0800172c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_DMA_Init+0x78>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a1a      	ldr	r2, [pc, #104]	; (80017a4 <MX_DMA_Init+0x78>)
 800173c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_DMA_Init+0x78>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_DMA_Init+0x78>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <MX_DMA_Init+0x78>)
 8001758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_DMA_Init+0x78>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2105      	movs	r1, #5
 800176e:	2011      	movs	r0, #17
 8001770:	f001 f91e 	bl	80029b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001774:	2011      	movs	r0, #17
 8001776:	f001 f937 	bl	80029e8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2105      	movs	r1, #5
 800177e:	2038      	movs	r0, #56	; 0x38
 8001780:	f001 f916 	bl	80029b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001784:	2038      	movs	r0, #56	; 0x38
 8001786:	f001 f92f 	bl	80029e8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2105      	movs	r1, #5
 800178e:	203b      	movs	r0, #59	; 0x3b
 8001790:	f001 f90e 	bl	80029b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001794:	203b      	movs	r0, #59	; 0x3b
 8001796:	f001 f927 	bl	80029e8 <HAL_NVIC_EnableIRQ>

}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <MX_GPIO_Init+0xf8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a36      	ldr	r2, [pc, #216]	; (80018a0 <MX_GPIO_Init+0xf8>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <MX_GPIO_Init+0xf8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <MX_GPIO_Init+0xf8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a2f      	ldr	r2, [pc, #188]	; (80018a0 <MX_GPIO_Init+0xf8>)
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <MX_GPIO_Init+0xf8>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <MX_GPIO_Init+0xf8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <MX_GPIO_Init+0xf8>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <MX_GPIO_Init+0xf8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_GPIO_Init+0xf8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <MX_GPIO_Init+0xf8>)
 800181c:	f043 0308 	orr.w	r3, r3, #8
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_GPIO_Init+0xf8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3 | GPIO_PIN_6, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2148      	movs	r1, #72	; 0x48
 8001832:	481c      	ldr	r0, [pc, #112]	; (80018a4 <MX_GPIO_Init+0xfc>)
 8001834:	f001 fe10 	bl	8003458 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800183e:	481a      	ldr	r0, [pc, #104]	; (80018a8 <MX_GPIO_Init+0x100>)
 8001840:	f001 fe0a 	bl	8003458 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PE3 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001844:	2348      	movs	r3, #72	; 0x48
 8001846:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4812      	ldr	r0, [pc, #72]	; (80018a4 <MX_GPIO_Init+0xfc>)
 800185c:	f001 fc62 	bl	8003124 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE4 PE0 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_0;
 8001860:	2311      	movs	r3, #17
 8001862:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_GPIO_Init+0x104>)
 8001866:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <MX_GPIO_Init+0xfc>)
 8001874:	f001 fc56 	bl	8003124 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800187c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_GPIO_Init+0x100>)
 8001892:	f001 fc47 	bl	8003124 <HAL_GPIO_Init>

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40020c00 	.word	0x40020c00
 80018ac:	10110000 	.word	0x10110000

080018b0 <InitMPU6500>:

/* USER CODE BEGIN 4 */
void InitMPU6500(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	uint8_t Ch;

	//WriteRegisterMPU6500(CTRL_REG3,0x1);//soft reset

	Ch = ReadRegisterMPU6500(117);
 80018b6:	2075      	movs	r0, #117	; 0x75
 80018b8:	f000 f870 	bl	800199c <ReadRegisterMPU6500>
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
	asm("Nop");
 80018c0:	bf00      	nop

	WriteRegisterMPU6500(PWR_MGMT_1, 0x80);
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	206b      	movs	r0, #107	; 0x6b
 80018c6:	f000 f843 	bl	8001950 <WriteRegisterMPU6500>
	HAL_Delay(110);
 80018ca:	206e      	movs	r0, #110	; 0x6e
 80018cc:	f000 ff96 	bl	80027fc <HAL_Delay>
	WriteRegisterMPU6500(SIGNAL_PATH_RESET, 0x07);
 80018d0:	2107      	movs	r1, #7
 80018d2:	2068      	movs	r0, #104	; 0x68
 80018d4:	f000 f83c 	bl	8001950 <WriteRegisterMPU6500>
	HAL_Delay(110);
 80018d8:	206e      	movs	r0, #110	; 0x6e
 80018da:	f000 ff8f 	bl	80027fc <HAL_Delay>
	WriteRegisterMPU6500(USER_CTRL, 0x10);
 80018de:	2110      	movs	r1, #16
 80018e0:	206a      	movs	r0, #106	; 0x6a
 80018e2:	f000 f835 	bl	8001950 <WriteRegisterMPU6500>
	HAL_Delay(110);
 80018e6:	206e      	movs	r0, #110	; 0x6e
 80018e8:	f000 ff88 	bl	80027fc <HAL_Delay>

	WriteRegisterMPU6500(ACCEL_CONFIG, 0x0);
 80018ec:	2100      	movs	r1, #0
 80018ee:	201c      	movs	r0, #28
 80018f0:	f000 f82e 	bl	8001950 <WriteRegisterMPU6500>
	WriteRegisterMPU6500(ACCEL_CONFIG_2, 0x0);
 80018f4:	2100      	movs	r1, #0
 80018f6:	201d      	movs	r0, #29
 80018f8:	f000 f82a 	bl	8001950 <WriteRegisterMPU6500>
	WriteRegisterMPU6500(GYRO_CONFIG, 0x0);
 80018fc:	2100      	movs	r1, #0
 80018fe:	201b      	movs	r0, #27
 8001900:	f000 f826 	bl	8001950 <WriteRegisterMPU6500>

	WriteRegisterMPU6500(PWR_MGMT_1, 0x0);
 8001904:	2100      	movs	r1, #0
 8001906:	206b      	movs	r0, #107	; 0x6b
 8001908:	f000 f822 	bl	8001950 <WriteRegisterMPU6500>
	WriteRegisterMPU6500(PWR_MGMT_2, 0x0);
 800190c:	2100      	movs	r1, #0
 800190e:	206c      	movs	r0, #108	; 0x6c
 8001910:	f000 f81e 	bl	8001950 <WriteRegisterMPU6500>
	//WriteRegisterMPU6500(LP_ACCEL_ODR, 10);

	WriteRegisterMPU6500(FIFO_EN, 0x0);
 8001914:	2100      	movs	r1, #0
 8001916:	2023      	movs	r0, #35	; 0x23
 8001918:	f000 f81a 	bl	8001950 <WriteRegisterMPU6500>
	WriteRegisterMPU6500(CONFIG, 0x0);
 800191c:	2100      	movs	r1, #0
 800191e:	201a      	movs	r0, #26
 8001920:	f000 f816 	bl	8001950 <WriteRegisterMPU6500>

	WriteRegisterMPU6500(INT_PIN_CFG, 0x30);
 8001924:	2130      	movs	r1, #48	; 0x30
 8001926:	2037      	movs	r0, #55	; 0x37
 8001928:	f000 f812 	bl	8001950 <WriteRegisterMPU6500>
	WriteRegisterMPU6500(INT_ENABLE, 0x1);
 800192c:	2101      	movs	r1, #1
 800192e:	2038      	movs	r0, #56	; 0x38
 8001930:	f000 f80e 	bl	8001950 <WriteRegisterMPU6500>

	WriteRegisterMPU6500(SMPLRT_DIV, 0x0);
 8001934:	2100      	movs	r1, #0
 8001936:	2019      	movs	r0, #25
 8001938:	f000 f80a 	bl	8001950 <WriteRegisterMPU6500>

	MPU6500Initialized = 1;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <InitMPU6500+0x9c>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20004b56 	.word	0x20004b56

08001950 <WriteRegisterMPU6500>:

void WriteRegisterMPU6500(uint8_t Addr, uint8_t Data) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	460a      	mov	r2, r1
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	4613      	mov	r3, r2
 800195e:	71bb      	strb	r3, [r7, #6]
	uint8_t TrmBytes[2];

	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2140      	movs	r1, #64	; 0x40
 8001964:	480b      	ldr	r0, [pc, #44]	; (8001994 <WriteRegisterMPU6500+0x44>)
 8001966:	f001 fd77 	bl	8003458 <HAL_GPIO_WritePin>
	TrmBytes[0] = Addr;
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	733b      	strb	r3, [r7, #12]
	TrmBytes[1] = Data;
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi1, TrmBytes, 2, 1000);
 8001972:	f107 010c 	add.w	r1, r7, #12
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	2202      	movs	r2, #2
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <WriteRegisterMPU6500+0x48>)
 800197e:	f002 fa7d 	bl	8003e7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2140      	movs	r1, #64	; 0x40
 8001986:	4803      	ldr	r0, [pc, #12]	; (8001994 <WriteRegisterMPU6500+0x44>)
 8001988:	f001 fd66 	bl	8003458 <HAL_GPIO_WritePin>
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	20004bd0 	.word	0x20004bd0

0800199c <ReadRegisterMPU6500>:

uint8_t ReadRegisterMPU6500(uint8_t Addr) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	uint8_t TrmByte, RecByte;

	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2140      	movs	r1, #64	; 0x40
 80019aa:	4812      	ldr	r0, [pc, #72]	; (80019f4 <ReadRegisterMPU6500+0x58>)
 80019ac:	f001 fd54 	bl	8003458 <HAL_GPIO_WritePin>
	TrmByte = Addr;
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	73fb      	strb	r3, [r7, #15]
	TrmByte |= 0x80;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &TrmByte, 1, 1000);
 80019be:	f107 010f 	add.w	r1, r7, #15
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	2201      	movs	r2, #1
 80019c8:	480b      	ldr	r0, [pc, #44]	; (80019f8 <ReadRegisterMPU6500+0x5c>)
 80019ca:	f002 fa57 	bl	8003e7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &RecByte, 1, 1000);
 80019ce:	f107 010e 	add.w	r1, r7, #14
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	2201      	movs	r2, #1
 80019d8:	4807      	ldr	r0, [pc, #28]	; (80019f8 <ReadRegisterMPU6500+0x5c>)
 80019da:	f002 fb83 	bl	80040e4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_SET);
 80019de:	2201      	movs	r2, #1
 80019e0:	2140      	movs	r1, #64	; 0x40
 80019e2:	4804      	ldr	r0, [pc, #16]	; (80019f4 <ReadRegisterMPU6500+0x58>)
 80019e4:	f001 fd38 	bl	8003458 <HAL_GPIO_WritePin>

	return RecByte;
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	20004bd0 	.word	0x20004bd0

080019fc <ProcessDataMPU6500>:

void ProcessDataMPU6500(void) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0

	AccX = (((int16_t) SPI1ReceiveArray[1]) << 8)
 8001a00:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b29a      	uxth	r2, r3
			+ (int16_t) SPI1ReceiveArray[2];
 8001a0a:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a0c:	789b      	ldrb	r3, [r3, #2]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	b21a      	sxth	r2, r3
	AccX = (((int16_t) SPI1ReceiveArray[1]) << 8)
 8001a16:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <ProcessDataMPU6500+0x17c>)
 8001a18:	801a      	strh	r2, [r3, #0]
	AccY = (((int16_t) SPI1ReceiveArray[3]) << 8)
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a1c:	78db      	ldrb	r3, [r3, #3]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	b29a      	uxth	r2, r3
			+ (int16_t) SPI1ReceiveArray[4];
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a26:	791b      	ldrb	r3, [r3, #4]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21a      	sxth	r2, r3
	AccY = (((int16_t) SPI1ReceiveArray[3]) << 8)
 8001a30:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <ProcessDataMPU6500+0x180>)
 8001a32:	801a      	strh	r2, [r3, #0]
	AccZ = (((int16_t) SPI1ReceiveArray[5]) << 8)
 8001a34:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a36:	795b      	ldrb	r3, [r3, #5]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	b29a      	uxth	r2, r3
			+ (int16_t) SPI1ReceiveArray[6];
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a40:	799b      	ldrb	r3, [r3, #6]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	b21a      	sxth	r2, r3
	AccZ = (((int16_t) SPI1ReceiveArray[5]) << 8)
 8001a4a:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <ProcessDataMPU6500+0x184>)
 8001a4c:	801a      	strh	r2, [r3, #0]

	Temperature = (((int16_t) SPI1ReceiveArray[7]) << 8)
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a50:	79db      	ldrb	r3, [r3, #7]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b29a      	uxth	r2, r3
			+ (int16_t) SPI1ReceiveArray[8];
 8001a58:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a5a:	7a1b      	ldrb	r3, [r3, #8]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	b21a      	sxth	r2, r3
	Temperature = (((int16_t) SPI1ReceiveArray[7]) << 8)
 8001a64:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <ProcessDataMPU6500+0x188>)
 8001a66:	801a      	strh	r2, [r3, #0]

	GyroX = (((int16_t) SPI1ReceiveArray[9]) << 8)
 8001a68:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a6a:	7a5b      	ldrb	r3, [r3, #9]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	b29a      	uxth	r2, r3
			+ (int16_t) SPI1ReceiveArray[10];
 8001a72:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a74:	7a9b      	ldrb	r3, [r3, #10]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	b21a      	sxth	r2, r3
	GyroX = (((int16_t) SPI1ReceiveArray[9]) << 8)
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <ProcessDataMPU6500+0x18c>)
 8001a80:	801a      	strh	r2, [r3, #0]
	GyroY = (((int16_t) SPI1ReceiveArray[11]) << 8)
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a84:	7adb      	ldrb	r3, [r3, #11]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	b29a      	uxth	r2, r3
			+ (int16_t) SPI1ReceiveArray[12];
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a8e:	7b1b      	ldrb	r3, [r3, #12]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	b21a      	sxth	r2, r3
	GyroY = (((int16_t) SPI1ReceiveArray[11]) << 8)
 8001a98:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <ProcessDataMPU6500+0x190>)
 8001a9a:	801a      	strh	r2, [r3, #0]
	GyroZ = (((int16_t) SPI1ReceiveArray[13]) << 8)
 8001a9c:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001a9e:	7b5b      	ldrb	r3, [r3, #13]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b29a      	uxth	r2, r3
			+ (int16_t) SPI1ReceiveArray[14];
 8001aa6:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <ProcessDataMPU6500+0x178>)
 8001aa8:	7b9b      	ldrb	r3, [r3, #14]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b21a      	sxth	r2, r3
	GyroZ = (((int16_t) SPI1ReceiveArray[13]) << 8)
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <ProcessDataMPU6500+0x194>)
 8001ab4:	801a      	strh	r2, [r3, #0]

	Calibrating();
 8001ab6:	f000 f885 	bl	8001bc4 <Calibrating>

	AccXfl = AccXZero - AccX;//меняем знак оси, чтобы он соответствовал матрице поворота
 8001aba:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <ProcessDataMPU6500+0x198>)
 8001abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <ProcessDataMPU6500+0x17c>)
 8001ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <ProcessDataMPU6500+0x19c>)
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
	AccYfl = AccYZero - AccY;//меняем знак оси, чтобы он соответствовал матрице поворота
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <ProcessDataMPU6500+0x1a0>)
 8001ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <ProcessDataMPU6500+0x180>)
 8001ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <ProcessDataMPU6500+0x1a4>)
 8001af2:	edc3 7a00 	vstr	s15, [r3]
	AccZfl = AccZ - AccZZero;
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <ProcessDataMPU6500+0x184>)
 8001af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <ProcessDataMPU6500+0x1a8>)
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <ProcessDataMPU6500+0x1ac>)
 8001b10:	edc3 7a00 	vstr	s15, [r3]
	GyroXfl = GyroX - GyroXZero;
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <ProcessDataMPU6500+0x18c>)
 8001b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b23      	ldr	r3, [pc, #140]	; (8001bac <ProcessDataMPU6500+0x1b0>)
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <ProcessDataMPU6500+0x1b4>)
 8001b2e:	edc3 7a00 	vstr	s15, [r3]
	GyroYfl = GyroY - GyroYZero;
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <ProcessDataMPU6500+0x190>)
 8001b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <ProcessDataMPU6500+0x1b8>)
 8001b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <ProcessDataMPU6500+0x1bc>)
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
	GyroZfl = GyroZ - GyroZZero;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <ProcessDataMPU6500+0x194>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <ProcessDataMPU6500+0x1c0>)
 8001b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <ProcessDataMPU6500+0x1c4>)
 8001b6a:	edc3 7a00 	vstr	s15, [r3]

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20004c6c 	.word	0x20004c6c
 8001b78:	20004b62 	.word	0x20004b62
 8001b7c:	200049ec 	.word	0x200049ec
 8001b80:	20004b48 	.word	0x20004b48
 8001b84:	200049ee 	.word	0x200049ee
 8001b88:	200049f0 	.word	0x200049f0
 8001b8c:	20004b5c 	.word	0x20004b5c
 8001b90:	20004d98 	.word	0x20004d98
 8001b94:	20004bcc 	.word	0x20004bcc
 8001b98:	200049f4 	.word	0x200049f4
 8001b9c:	200049fc 	.word	0x200049fc
 8001ba0:	200049e8 	.word	0x200049e8
 8001ba4:	20004b54 	.word	0x20004b54
 8001ba8:	20004a08 	.word	0x20004a08
 8001bac:	20004b60 	.word	0x20004b60
 8001bb0:	20004bc8 	.word	0x20004bc8
 8001bb4:	20004a14 	.word	0x20004a14
 8001bb8:	20004d30 	.word	0x20004d30
 8001bbc:	20004a12 	.word	0x20004a12
 8001bc0:	20004d94 	.word	0x20004d94

08001bc4 <Calibrating>:

void Calibrating(void) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
	if (!Calibrate)
 8001bc8:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <Calibrating+0x178>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80ac 	beq.w	8001d2a <Calibrating+0x166>
		return;

	switch (CalibratingStateMachine) {
 8001bd2:	4b5b      	ldr	r3, [pc, #364]	; (8001d40 <Calibrating+0x17c>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d01d      	beq.n	8001c16 <Calibrating+0x52>
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d02d      	beq.n	8001c3a <Calibrating+0x76>
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 809e 	bne.w	8001d20 <Calibrating+0x15c>
	case 0:
		CalibrateCnt = 250;
 8001be4:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <Calibrating+0x180>)
 8001be6:	22fa      	movs	r2, #250	; 0xfa
 8001be8:	801a      	strh	r2, [r3, #0]
		SummAccX = 0;
 8001bea:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <Calibrating+0x184>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
		SummAccY = 0;
 8001bf0:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <Calibrating+0x188>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
		SummAccZ = 0;
 8001bf6:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <Calibrating+0x18c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
		SummGyroX = 0;
 8001bfc:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <Calibrating+0x190>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
		SummGyroY = 0;
 8001c02:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <Calibrating+0x194>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
		SummGyroZ = 0;
 8001c08:	4b54      	ldr	r3, [pc, #336]	; (8001d5c <Calibrating+0x198>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
		CalibratingStateMachine = 1;
 8001c0e:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <Calibrating+0x17c>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
		break;
 8001c14:	e08e      	b.n	8001d34 <Calibrating+0x170>
	case 1:
		CalibrateCnt--;
 8001c16:	4b4b      	ldr	r3, [pc, #300]	; (8001d44 <Calibrating+0x180>)
 8001c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <Calibrating+0x180>)
 8001c26:	801a      	strh	r2, [r3, #0]
		if (!CalibrateCnt)
 8001c28:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <Calibrating+0x180>)
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d17d      	bne.n	8001d2e <Calibrating+0x16a>
			CalibratingStateMachine = 2;
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <Calibrating+0x17c>)
 8001c34:	2202      	movs	r2, #2
 8001c36:	701a      	strb	r2, [r3, #0]
		break;
 8001c38:	e079      	b.n	8001d2e <Calibrating+0x16a>
	case 2:
		SummAccX = SummAccX + AccX;
 8001c3a:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <Calibrating+0x19c>)
 8001c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <Calibrating+0x184>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a3f      	ldr	r2, [pc, #252]	; (8001d48 <Calibrating+0x184>)
 8001c4a:	6013      	str	r3, [r2, #0]
		SummAccY = SummAccY + AccY;
 8001c4c:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <Calibrating+0x1a0>)
 8001c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <Calibrating+0x188>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a3c      	ldr	r2, [pc, #240]	; (8001d4c <Calibrating+0x188>)
 8001c5c:	6013      	str	r3, [r2, #0]
		SummAccZ = SummAccZ + AccZ;
 8001c5e:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <Calibrating+0x1a4>)
 8001c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <Calibrating+0x18c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a38      	ldr	r2, [pc, #224]	; (8001d50 <Calibrating+0x18c>)
 8001c6e:	6013      	str	r3, [r2, #0]
		SummGyroX = SummGyroX + GyroX;
 8001c70:	4b3e      	ldr	r3, [pc, #248]	; (8001d6c <Calibrating+0x1a8>)
 8001c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <Calibrating+0x190>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a35      	ldr	r2, [pc, #212]	; (8001d54 <Calibrating+0x190>)
 8001c80:	6013      	str	r3, [r2, #0]
		SummGyroY = SummGyroY + GyroY;
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <Calibrating+0x1ac>)
 8001c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <Calibrating+0x194>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a31      	ldr	r2, [pc, #196]	; (8001d58 <Calibrating+0x194>)
 8001c92:	6013      	str	r3, [r2, #0]
		SummGyroZ = SummGyroZ + GyroZ;
 8001c94:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <Calibrating+0x1b0>)
 8001c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <Calibrating+0x198>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <Calibrating+0x198>)
 8001ca4:	6013      	str	r3, [r2, #0]

		CalibrateCnt++;
 8001ca6:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <Calibrating+0x180>)
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <Calibrating+0x180>)
 8001cb6:	801a      	strh	r2, [r3, #0]
		if (CalibrateCnt >= 64) {
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <Calibrating+0x180>)
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	2b3f      	cmp	r3, #63	; 0x3f
 8001cc0:	dd37      	ble.n	8001d32 <Calibrating+0x16e>
			AccXZero = (int16_t) (SummAccX >> 6);
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <Calibrating+0x184>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	119b      	asrs	r3, r3, #6
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <Calibrating+0x1b4>)
 8001ccc:	801a      	strh	r2, [r3, #0]
			AccYZero = (int16_t) (SummAccY >> 6);
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <Calibrating+0x188>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	119b      	asrs	r3, r3, #6
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <Calibrating+0x1b8>)
 8001cd8:	801a      	strh	r2, [r3, #0]
			AccZZero = 16384 + (int16_t) (SummAccZ >> 6);
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <Calibrating+0x18c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	119b      	asrs	r3, r3, #6
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <Calibrating+0x1bc>)
 8001cec:	801a      	strh	r2, [r3, #0]
			GyroXZero = (int16_t) (SummGyroX >> 6);
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <Calibrating+0x190>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	119b      	asrs	r3, r3, #6
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <Calibrating+0x1c0>)
 8001cf8:	801a      	strh	r2, [r3, #0]
			GyroYZero = (int16_t) (SummGyroY >> 6);
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <Calibrating+0x194>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	119b      	asrs	r3, r3, #6
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <Calibrating+0x1c4>)
 8001d04:	801a      	strh	r2, [r3, #0]
			GyroZZero = (int16_t) (SummGyroZ >> 6);
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <Calibrating+0x198>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	119b      	asrs	r3, r3, #6
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <Calibrating+0x1c8>)
 8001d10:	801a      	strh	r2, [r3, #0]
			CalibratingStateMachine = 0;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <Calibrating+0x17c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
			Calibrate = 0;
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <Calibrating+0x178>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001d1e:	e008      	b.n	8001d32 <Calibrating+0x16e>

	default:
		CalibratingStateMachine = 0;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <Calibrating+0x17c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
		break;
 8001d26:	bf00      	nop
 8001d28:	e004      	b.n	8001d34 <Calibrating+0x170>
		return;
 8001d2a:	bf00      	nop
 8001d2c:	e002      	b.n	8001d34 <Calibrating+0x170>
		break;
 8001d2e:	bf00      	nop
 8001d30:	e000      	b.n	8001d34 <Calibrating+0x170>
		break;
 8001d32:	bf00      	nop
	}
}
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	20004a10 	.word	0x20004a10
 8001d40:	20004b4a 	.word	0x20004b4a
 8001d44:	200049e4 	.word	0x200049e4
 8001d48:	20004a00 	.word	0x20004a00
 8001d4c:	20004a04 	.word	0x20004a04
 8001d50:	20004d9c 	.word	0x20004d9c
 8001d54:	20004a0c 	.word	0x20004a0c
 8001d58:	200049e0 	.word	0x200049e0
 8001d5c:	20004b58 	.word	0x20004b58
 8001d60:	20004b62 	.word	0x20004b62
 8001d64:	200049ec 	.word	0x200049ec
 8001d68:	20004b48 	.word	0x20004b48
 8001d6c:	200049f0 	.word	0x200049f0
 8001d70:	20004b5c 	.word	0x20004b5c
 8001d74:	20004d98 	.word	0x20004d98
 8001d78:	20004bcc 	.word	0x20004bcc
 8001d7c:	200049fc 	.word	0x200049fc
 8001d80:	20004b54 	.word	0x20004b54
 8001d84:	20004b60 	.word	0x20004b60
 8001d88:	20004a14 	.word	0x20004a14
 8001d8c:	20004a12 	.word	0x20004a12

08001d90 <TrmDataToUART>:

void TrmDataToUART(void) {
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
	int16_t BytesCounter = 4;
 8001d96:	2304      	movs	r3, #4
 8001d98:	81fb      	strh	r3, [r7, #14]
	int16_t *Ptr16;
	uint32_t *Ptr32;
	float *PtrFl;

	UART2TransmittArray[0] = HEADER1; //Заголовок пакета из 2-х байт
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <TrmDataToUART+0x198>)
 8001d9c:	2239      	movs	r2, #57	; 0x39
 8001d9e:	701a      	strb	r2, [r3, #0]
	UART2TransmittArray[1] = HEADER2;
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <TrmDataToUART+0x198>)
 8001da2:	22c3      	movs	r2, #195	; 0xc3
 8001da4:	705a      	strb	r2, [r3, #1]

	UART2TransmittArray[3] = TRM_DATA_PACKET; //Команда
 8001da6:	4b60      	ldr	r3, [pc, #384]	; (8001f28 <TrmDataToUART+0x198>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	70da      	strb	r2, [r3, #3]

	Ptr32 = (uint32_t*) &UART2TransmittArray[BytesCounter];
 8001dac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	; (8001f28 <TrmDataToUART+0x198>)
 8001db2:	4413      	add	r3, r2
 8001db4:	60bb      	str	r3, [r7, #8]
	*Ptr32 = Timestamp;
 8001db6:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <TrmDataToUART+0x19c>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	601a      	str	r2, [r3, #0]
	BytesCounter = BytesCounter + sizeof(uint32_t);
 8001dbe:	89fb      	ldrh	r3, [r7, #14]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	81fb      	strh	r3, [r7, #14]

	Ptr16 = (int16_t*) &UART2TransmittArray[BytesCounter];
 8001dc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dca:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <TrmDataToUART+0x198>)
 8001dcc:	4413      	add	r3, r2
 8001dce:	607b      	str	r3, [r7, #4]
	*Ptr16 = (int16_t) AccXfl;
 8001dd0:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <TrmDataToUART+0x1a0>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dda:	ee17 3a90 	vmov	r3, s15
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	801a      	strh	r2, [r3, #0]
	BytesCounter = BytesCounter + sizeof(int16_t);
 8001de4:	89fb      	ldrh	r3, [r7, #14]
 8001de6:	3302      	adds	r3, #2
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	81fb      	strh	r3, [r7, #14]

	Ptr16 = (int16_t*) &UART2TransmittArray[BytesCounter];
 8001dec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001df0:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <TrmDataToUART+0x198>)
 8001df2:	4413      	add	r3, r2
 8001df4:	607b      	str	r3, [r7, #4]
	*Ptr16 = (int16_t) AccYfl;
 8001df6:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <TrmDataToUART+0x1a4>)
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e00:	ee17 3a90 	vmov	r3, s15
 8001e04:	b21a      	sxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	801a      	strh	r2, [r3, #0]
	BytesCounter = BytesCounter + sizeof(int16_t);
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	81fb      	strh	r3, [r7, #14]

	Ptr16 = (int16_t*) &UART2TransmittArray[BytesCounter];
 8001e12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e16:	4a44      	ldr	r2, [pc, #272]	; (8001f28 <TrmDataToUART+0x198>)
 8001e18:	4413      	add	r3, r2
 8001e1a:	607b      	str	r3, [r7, #4]
	*Ptr16 = (int16_t) AccZfl;
 8001e1c:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <TrmDataToUART+0x1a8>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e26:	ee17 3a90 	vmov	r3, s15
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	801a      	strh	r2, [r3, #0]
	BytesCounter = BytesCounter + sizeof(int16_t);
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	3302      	adds	r3, #2
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	81fb      	strh	r3, [r7, #14]

	Ptr16 = (int16_t*) &UART2TransmittArray[BytesCounter];
 8001e38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e3c:	4a3a      	ldr	r2, [pc, #232]	; (8001f28 <TrmDataToUART+0x198>)
 8001e3e:	4413      	add	r3, r2
 8001e40:	607b      	str	r3, [r7, #4]
	*Ptr16 = (int16_t) GyroXfl;
 8001e42:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <TrmDataToUART+0x1ac>)
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4c:	ee17 3a90 	vmov	r3, s15
 8001e50:	b21a      	sxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	801a      	strh	r2, [r3, #0]
	BytesCounter = BytesCounter + sizeof(int16_t);
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	3302      	adds	r3, #2
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	81fb      	strh	r3, [r7, #14]

	Ptr16 = (int16_t*) &UART2TransmittArray[BytesCounter];
 8001e5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e62:	4a31      	ldr	r2, [pc, #196]	; (8001f28 <TrmDataToUART+0x198>)
 8001e64:	4413      	add	r3, r2
 8001e66:	607b      	str	r3, [r7, #4]
	*Ptr16 = (int16_t) GyroYfl;
 8001e68:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <TrmDataToUART+0x1b0>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e72:	ee17 3a90 	vmov	r3, s15
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	801a      	strh	r2, [r3, #0]
	BytesCounter = BytesCounter + sizeof(int16_t);
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	3302      	adds	r3, #2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	81fb      	strh	r3, [r7, #14]

	Ptr16 = (int16_t*) &UART2TransmittArray[BytesCounter];
 8001e84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e88:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <TrmDataToUART+0x198>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	607b      	str	r3, [r7, #4]
	*Ptr16 = (int16_t) GyroZfl;
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <TrmDataToUART+0x1b4>)
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e98:	ee17 3a90 	vmov	r3, s15
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	801a      	strh	r2, [r3, #0]
	BytesCounter = BytesCounter + sizeof(int16_t);
 8001ea2:	89fb      	ldrh	r3, [r7, #14]
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	81fb      	strh	r3, [r7, #14]

	PtrFl = (float*) &UART2TransmittArray[BytesCounter];
 8001eaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <TrmDataToUART+0x198>)
 8001eb0:	4413      	add	r3, r2
 8001eb2:	603b      	str	r3, [r7, #0]
	*PtrFl = (float) TiltX;
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <TrmDataToUART+0x1b8>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	601a      	str	r2, [r3, #0]
	BytesCounter = BytesCounter + sizeof(float);
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	81fb      	strh	r3, [r7, #14]

	PtrFl = (float*) &UART2TransmittArray[BytesCounter];
 8001ec4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ec8:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <TrmDataToUART+0x198>)
 8001eca:	4413      	add	r3, r2
 8001ecc:	603b      	str	r3, [r7, #0]
	*PtrFl = (float) TiltY;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <TrmDataToUART+0x1bc>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	601a      	str	r2, [r3, #0]
	BytesCounter = BytesCounter + sizeof(float);
 8001ed6:	89fb      	ldrh	r3, [r7, #14]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	81fb      	strh	r3, [r7, #14]

	UART2TransmittArray[2] = BytesCounter + 1; //Число передаваемых байт
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <TrmDataToUART+0x198>)
 8001ee8:	709a      	strb	r2, [r3, #2]

	UART2TransmittArray[BytesCounter++] = CalcCheckSumm(
			UART2TransmittArray[2] - 3, &UART2TransmittArray[2]);
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <TrmDataToUART+0x198>)
 8001eec:	789b      	ldrb	r3, [r3, #2]
 8001eee:	3b03      	subs	r3, #3
	UART2TransmittArray[BytesCounter++] = CalcCheckSumm(
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ef6:	b293      	uxth	r3, r2
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	81fb      	strh	r3, [r7, #14]
 8001efe:	4614      	mov	r4, r2
 8001f00:	4913      	ldr	r1, [pc, #76]	; (8001f50 <TrmDataToUART+0x1c0>)
 8001f02:	f000 f829 	bl	8001f58 <CalcCheckSumm>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <TrmDataToUART+0x198>)
 8001f0c:	551a      	strb	r2, [r3, r4]

	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) UART2TransmittArray,
			UART2TransmittArray[2]);
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <TrmDataToUART+0x198>)
 8001f10:	789b      	ldrb	r3, [r3, #2]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*) UART2TransmittArray,
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	4904      	ldr	r1, [pc, #16]	; (8001f28 <TrmDataToUART+0x198>)
 8001f18:	480e      	ldr	r0, [pc, #56]	; (8001f54 <TrmDataToUART+0x1c4>)
 8001f1a:	f003 fa4d 	bl	80053b8 <HAL_UART_Transmit_DMA>
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd90      	pop	{r4, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20004a1c 	.word	0x20004a1c
 8001f2c:	20004b4c 	.word	0x20004b4c
 8001f30:	200049f4 	.word	0x200049f4
 8001f34:	200049e8 	.word	0x200049e8
 8001f38:	20004a08 	.word	0x20004a08
 8001f3c:	20004bc8 	.word	0x20004bc8
 8001f40:	20004d30 	.word	0x20004d30
 8001f44:	20004d94 	.word	0x20004d94
 8001f48:	200049b8 	.word	0x200049b8
 8001f4c:	200049c8 	.word	0x200049c8
 8001f50:	20004a1e 	.word	0x20004a1e
 8001f54:	20004c2c 	.word	0x20004c2c

08001f58 <CalcCheckSumm>:

unsigned char CalcCheckSumm(unsigned int N, unsigned char *Array) {
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	unsigned int Summ = 0, j;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]

	for (j = 0; j < N; j++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	e00a      	b.n	8001f82 <CalcCheckSumm+0x2a>
		Summ = Summ + Array[j];
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	4413      	add	r3, r2
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
	for (j = 0; j < N; j++)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3f0      	bcc.n	8001f6c <CalcCheckSumm+0x14>

	Summ = ~Summ;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	60fb      	str	r3, [r7, #12]

	return (unsigned char) Summ;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	b2db      	uxtb	r3, r3

}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f004 f9e5 	bl	8006378 <osDelay>
 8001fae:	e7fb      	b.n	8001fa8 <StartDefaultTask+0x8>

08001fb0 <MPU6500TaskEntry>:
 * @brief Function implementing the MPU6500Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MPU6500TaskEntry */
void MPU6500TaskEntry(void *argument) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN MPU6500TaskEntry */
	short msg;

	/* Infinite loop */
	for (;;) {
		osStatus_t msg_Result = osMessageQueueGet(QueueSPI1Handle, &msg, 0, 0);
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <MPU6500TaskEntry+0x60>)
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	f107 010a 	add.w	r1, r7, #10
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f004 fb00 	bl	80065c8 <osMessageQueueGet>
 8001fc8:	60f8      	str	r0, [r7, #12]
		if (msg_Result == osOK) {
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d11a      	bne.n	8002006 <MPU6500TaskEntry+0x56>
			switch (msg) {
 8001fd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d000      	beq.n	8001fe0 <MPU6500TaskEntry+0x30>
				CalcullateTilts();
				TrmDataToUART();
				HAL_GPIO_WritePin (GPIOD, GPIO_PIN_15,GPIO_PIN_RESET ); //светодиод
				break;
			default:
				break;
 8001fde:	e013      	b.n	8002008 <MPU6500TaskEntry+0x58>
				HAL_GPIO_WritePin (GPIOD, GPIO_PIN_15,GPIO_PIN_SET ); //светодиод
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe6:	480b      	ldr	r0, [pc, #44]	; (8002014 <MPU6500TaskEntry+0x64>)
 8001fe8:	f001 fa36 	bl	8003458 <HAL_GPIO_WritePin>
				ProcessDataMPU6500();
 8001fec:	f7ff fd06 	bl	80019fc <ProcessDataMPU6500>
				CalcullateTilts();
 8001ff0:	f7fe ff52 	bl	8000e98 <CalcullateTilts>
				TrmDataToUART();
 8001ff4:	f7ff fecc 	bl	8001d90 <TrmDataToUART>
				HAL_GPIO_WritePin (GPIOD, GPIO_PIN_15,GPIO_PIN_RESET ); //светодиод
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MPU6500TaskEntry+0x64>)
 8002000:	f001 fa2a 	bl	8003458 <HAL_GPIO_WritePin>
				break;
 8002004:	e000      	b.n	8002008 <MPU6500TaskEntry+0x58>
			}
		}
 8002006:	bf00      	nop

		osDelay(1);
 8002008:	2001      	movs	r0, #1
 800200a:	f004 f9b5 	bl	8006378 <osDelay>
	for (;;) {
 800200e:	e7d3      	b.n	8001fb8 <MPU6500TaskEntry+0x8>
 8002010:	20004c28 	.word	0x20004c28
 8002014:	40020c00 	.word	0x40020c00

08002018 <UART2ReceivedCmdEntry>:
 * @brief Function implementing the UART2ReceivedCm thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART2ReceivedCmdEntry */
void UART2ReceivedCmdEntry(void *argument) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	int16_t Tmp;
	/* Infinite loop */
	for (;;) {
		short msg;

		osStatus_t msg_Result = osMessageQueueGet(QueueUART2Handle, &msg, 0, 0);
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <UART2ReceivedCmdEntry+0x98>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	f107 0108 	add.w	r1, r7, #8
 8002028:	2300      	movs	r3, #0
 800202a:	2200      	movs	r2, #0
 800202c:	f004 facc 	bl	80065c8 <osMessageQueueGet>
 8002030:	60f8      	str	r0, [r7, #12]
		if (msg_Result == osOK) {
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d136      	bne.n	80020a6 <UART2ReceivedCmdEntry+0x8e>
			switch (msg) {
 8002038:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800203c:	461a      	mov	r2, r3
 800203e:	f240 43d3 	movw	r3, #1235	; 0x4d3
 8002042:	429a      	cmp	r2, r3
 8002044:	d000      	beq.n	8002048 <UART2ReceivedCmdEntry+0x30>
				default:
					break;
				}
				break;
			default:
				break;
 8002046:	e02f      	b.n	80020a8 <UART2ReceivedCmdEntry+0x90>
				switch (PacketRec[1]) {
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <UART2ReceivedCmdEntry+0x9c>)
 800204a:	785b      	ldrb	r3, [r3, #1]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d002      	beq.n	8002056 <UART2ReceivedCmdEntry+0x3e>
 8002050:	2b03      	cmp	r3, #3
 8002052:	d023      	beq.n	800209c <UART2ReceivedCmdEntry+0x84>
					break;
 8002054:	e026      	b.n	80020a4 <UART2ReceivedCmdEntry+0x8c>
					Tmp = (int16_t) PacketRec[2]
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <UART2ReceivedCmdEntry+0x9c>)
 8002058:	789b      	ldrb	r3, [r3, #2]
 800205a:	b29a      	uxth	r2, r3
							+ (((int16_t) PacketRec[3]) << 8);
 800205c:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <UART2ReceivedCmdEntry+0x9c>)
 800205e:	78db      	ldrb	r3, [r3, #3]
 8002060:	b29b      	uxth	r3, r3
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	b29b      	uxth	r3, r3
 8002066:	4413      	add	r3, r2
 8002068:	b29b      	uxth	r3, r3
					Tmp = (int16_t) PacketRec[2]
 800206a:	817b      	strh	r3, [r7, #10]
					KGyro = (float) Tmp / 1000;
 800206c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002078:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80020b8 <UART2ReceivedCmdEntry+0xa0>
 800207c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <UART2ReceivedCmdEntry+0xa4>)
 8002082:	edc3 7a00 	vstr	s15, [r3]
					KAcc = 1 - KGyro;
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <UART2ReceivedCmdEntry+0xa4>)
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <UART2ReceivedCmdEntry+0xa8>)
 8002096:	edc3 7a00 	vstr	s15, [r3]
					break;
 800209a:	e003      	b.n	80020a4 <UART2ReceivedCmdEntry+0x8c>
					Calibrate = 1;//Калибровка
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <UART2ReceivedCmdEntry+0xac>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
					break;
 80020a2:	bf00      	nop
				break;
 80020a4:	e000      	b.n	80020a8 <UART2ReceivedCmdEntry+0x90>
			}
		} else
			asm("Nop");
 80020a6:	bf00      	nop
		osDelay(1);
 80020a8:	2001      	movs	r0, #1
 80020aa:	f004 f965 	bl	8006378 <osDelay>
	for (;;) {
 80020ae:	e7b7      	b.n	8002020 <UART2ReceivedCmdEntry+0x8>
 80020b0:	20004a18 	.word	0x20004a18
 80020b4:	20004b64 	.word	0x20004b64
 80020b8:	447a0000 	.word	0x447a0000
 80020bc:	20000000 	.word	0x20000000
 80020c0:	200049d8 	.word	0x200049d8
 80020c4:	20004a10 	.word	0x20004a10

080020c8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	uint8_t TrmByte;
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1a      	ldr	r2, [pc, #104]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80020da:	f000 fb6f 	bl	80027bc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */
	TimestampCounter++;
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3301      	adds	r3, #1
 80020e4:	4a17      	ldr	r2, [pc, #92]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80020e6:	6013      	str	r3, [r2, #0]

	if (CntSPI > 3) {
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	dd19      	ble.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x5e>
		CntSPI = 0;
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	801a      	strh	r2, [r3, #0]
		if (MPU6500Initialized) {
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d012      	beq.n	8002126 <HAL_TIM_PeriodElapsedCallback+0x5e>
			TrmByte = ACCEL_XOUT_H;		//Start MPU6500 data transfer   250Hz
 8002100:	233b      	movs	r3, #59	; 0x3b
 8002102:	73fb      	strb	r3, [r7, #15]
			TrmByte |= 0x80;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800210a:	b2db      	uxtb	r3, r3
 800210c:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	2140      	movs	r1, #64	; 0x40
 8002112:	480f      	ldr	r0, [pc, #60]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002114:	f001 f9a0 	bl	8003458 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive_DMA(&hspi1, &TrmByte, SPI1ReceiveArray, 16);
 8002118:	f107 010f 	add.w	r1, r7, #15
 800211c:	2310      	movs	r3, #16
 800211e:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002122:	f002 fa8b 	bl	800463c <HAL_SPI_TransmitReceive_DMA>
//			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //светодиод
		}
	}

	CntSPI++;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212c:	b29b      	uxth	r3, r3
 800212e:	3301      	adds	r3, #1
 8002130:	b29b      	uxth	r3, r3
 8002132:	b21a      	sxth	r2, r3
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002136:	801a      	strh	r2, [r3, #0]

	/* USER CODE END Callback 1 */
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40002000 	.word	0x40002000
 8002144:	20004b44 	.word	0x20004b44
 8002148:	20004b5e 	.word	0x20004b5e
 800214c:	20004b56 	.word	0x20004b56
 8002150:	40021000 	.word	0x40021000
 8002154:	20004c6c 	.word	0x20004c6c
 8002158:	20004bd0 	.word	0x20004bd0

0800215c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_MspInit+0x54>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <HAL_MspInit+0x54>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_MspInit+0x54>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_MspInit+0x54>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_MspInit+0x54>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_MspInit+0x54>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	210f      	movs	r1, #15
 80021ae:	f06f 0001 	mvn.w	r0, #1
 80021b2:	f000 fbfd 	bl	80029b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <HAL_SPI_MspInit+0x14c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	f040 8090 	bne.w	8002308 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	4b49      	ldr	r3, [pc, #292]	; (8002314 <HAL_SPI_MspInit+0x150>)
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_SPI_MspInit+0x150>)
 80021f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021f6:	6453      	str	r3, [r2, #68]	; 0x44
 80021f8:	4b46      	ldr	r3, [pc, #280]	; (8002314 <HAL_SPI_MspInit+0x150>)
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	4b42      	ldr	r3, [pc, #264]	; (8002314 <HAL_SPI_MspInit+0x150>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	4a41      	ldr	r2, [pc, #260]	; (8002314 <HAL_SPI_MspInit+0x150>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6313      	str	r3, [r2, #48]	; 0x30
 8002214:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <HAL_SPI_MspInit+0x150>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002220:	23e0      	movs	r3, #224	; 0xe0
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002230:	2305      	movs	r3, #5
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	4837      	ldr	r0, [pc, #220]	; (8002318 <HAL_SPI_MspInit+0x154>)
 800223c:	f000 ff72 	bl	8003124 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_SPI_MspInit+0x158>)
 8002242:	4a37      	ldr	r2, [pc, #220]	; (8002320 <HAL_SPI_MspInit+0x15c>)
 8002244:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002246:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_SPI_MspInit+0x158>)
 8002248:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800224c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800224e:	4b33      	ldr	r3, [pc, #204]	; (800231c <HAL_SPI_MspInit+0x158>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_SPI_MspInit+0x158>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800225a:	4b30      	ldr	r3, [pc, #192]	; (800231c <HAL_SPI_MspInit+0x158>)
 800225c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002260:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_SPI_MspInit+0x158>)
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002268:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_SPI_MspInit+0x158>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_SPI_MspInit+0x158>)
 8002270:	2200      	movs	r2, #0
 8002272:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_SPI_MspInit+0x158>)
 8002276:	2200      	movs	r2, #0
 8002278:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800227a:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_SPI_MspInit+0x158>)
 800227c:	2200      	movs	r2, #0
 800227e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002280:	4826      	ldr	r0, [pc, #152]	; (800231c <HAL_SPI_MspInit+0x158>)
 8002282:	f000 fbbf 	bl	8002a04 <HAL_DMA_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800228c:	f7ff ff66 	bl	800215c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a22      	ldr	r2, [pc, #136]	; (800231c <HAL_SPI_MspInit+0x158>)
 8002294:	64da      	str	r2, [r3, #76]	; 0x4c
 8002296:	4a21      	ldr	r2, [pc, #132]	; (800231c <HAL_SPI_MspInit+0x158>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_SPI_MspInit+0x160>)
 800229e:	4a22      	ldr	r2, [pc, #136]	; (8002328 <HAL_SPI_MspInit+0x164>)
 80022a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022a4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80022a8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022ac:	2240      	movs	r2, #64	; 0x40
 80022ae:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b0:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022bc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022d8:	2200      	movs	r2, #0
 80022da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80022dc:	4811      	ldr	r0, [pc, #68]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022de:	f000 fb91 	bl	8002a04 <HAL_DMA_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80022e8:	f7ff ff38 	bl	800215c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022f0:	649a      	str	r2, [r3, #72]	; 0x48
 80022f2:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <HAL_SPI_MspInit+0x160>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2105      	movs	r1, #5
 80022fc:	2023      	movs	r0, #35	; 0x23
 80022fe:	f000 fb57 	bl	80029b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002302:	2023      	movs	r0, #35	; 0x23
 8002304:	f000 fb70 	bl	80029e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40013000 	.word	0x40013000
 8002314:	40023800 	.word	0x40023800
 8002318:	40020000 	.word	0x40020000
 800231c:	20004cd0 	.word	0x20004cd0
 8002320:	40026410 	.word	0x40026410
 8002324:	20004d34 	.word	0x20004d34
 8002328:	40026458 	.word	0x40026458

0800232c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a34      	ldr	r2, [pc, #208]	; (800241c <HAL_UART_MspInit+0xf0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d161      	bne.n	8002412 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b33      	ldr	r3, [pc, #204]	; (8002420 <HAL_UART_MspInit+0xf4>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a32      	ldr	r2, [pc, #200]	; (8002420 <HAL_UART_MspInit+0xf4>)
 8002358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_UART_MspInit+0xf4>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_UART_MspInit+0xf4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a2b      	ldr	r2, [pc, #172]	; (8002420 <HAL_UART_MspInit+0xf4>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_UART_MspInit+0xf4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002386:	230c      	movs	r3, #12
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002396:	2307      	movs	r3, #7
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4820      	ldr	r0, [pc, #128]	; (8002424 <HAL_UART_MspInit+0xf8>)
 80023a2:	f000 febf 	bl	8003124 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023a8:	4a20      	ldr	r2, [pc, #128]	; (800242c <HAL_UART_MspInit+0x100>)
 80023aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023e6:	4810      	ldr	r0, [pc, #64]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023e8:	f000 fb0c 	bl	8002a04 <HAL_DMA_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80023f2:	f7ff feb3 	bl	800215c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_UART_MspInit+0xfc>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2105      	movs	r1, #5
 8002406:	2026      	movs	r0, #38	; 0x26
 8002408:	f000 fad2 	bl	80029b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800240c:	2026      	movs	r0, #38	; 0x26
 800240e:	f000 faeb 	bl	80029e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	; 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40004400 	.word	0x40004400
 8002420:	40023800 	.word	0x40023800
 8002424:	40020000 	.word	0x40020000
 8002428:	20004ae4 	.word	0x20004ae4
 800242c:	400260a0 	.word	0x400260a0

08002430 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08c      	sub	sp, #48	; 0x30
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002440:	2200      	movs	r2, #0
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	202d      	movs	r0, #45	; 0x2d
 8002446:	f000 fab3 	bl	80029b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800244a:	202d      	movs	r0, #45	; 0x2d
 800244c:	f000 facc 	bl	80029e8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <HAL_InitTick+0xa4>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <HAL_InitTick+0xa4>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6413      	str	r3, [r2, #64]	; 0x40
 8002460:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <HAL_InitTick+0xa4>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800246c:	f107 0210 	add.w	r2, r7, #16
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f001 fc6a 	bl	8003d50 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800247c:	f001 fc40 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8002480:	4603      	mov	r3, r0
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <HAL_InitTick+0xa8>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0c9b      	lsrs	r3, r3, #18
 8002490:	3b01      	subs	r3, #1
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_InitTick+0xac>)
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <HAL_InitTick+0xb0>)
 8002498:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_InitTick+0xac>)
 800249c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024a0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80024a2:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <HAL_InitTick+0xac>)
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_InitTick+0xac>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_InitTick+0xac>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80024b4:	4809      	ldr	r0, [pc, #36]	; (80024dc <HAL_InitTick+0xac>)
 80024b6:	f002 fcf3 	bl	8004ea0 <HAL_TIM_Base_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d104      	bne.n	80024ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80024c0:	4806      	ldr	r0, [pc, #24]	; (80024dc <HAL_InitTick+0xac>)
 80024c2:	f002 fd22 	bl	8004f0a <HAL_TIM_Base_Start_IT>
 80024c6:	4603      	mov	r3, r0
 80024c8:	e000      	b.n	80024cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3730      	adds	r7, #48	; 0x30
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	431bde83 	.word	0x431bde83
 80024dc:	20004da0 	.word	0x20004da0
 80024e0:	40002000 	.word	0x40002000

080024e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <HardFault_Handler+0x4>

080024f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <MemManage_Handler+0x4>

080024fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <BusFault_Handler+0x4>

08002504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <UsageFault_Handler+0x4>

0800250a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <DMA1_Stream6_IRQHandler+0x10>)
 800251e:	f000 fb99 	bl	8002c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20004ae4 	.word	0x20004ae4

0800252c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <SPI1_IRQHandler+0x10>)
 8002532:	f002 f985 	bl	8004840 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20004bd0 	.word	0x20004bd0

08002540 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	uint8_t Bt;

	  if (huart2.Instance->SR & USART_SR_ORE)
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <USART2_IRQHandler+0xfc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
	  {

	  }

	if (huart2.Instance->SR & USART_SR_RXNE) {
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <USART2_IRQHandler+0xfc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d068      	beq.n	800262c <USART2_IRQHandler+0xec>
		Bt = (uint8_t) huart2.Instance->DR;
 800255a:	4b38      	ldr	r3, [pc, #224]	; (800263c <USART2_IRQHandler+0xfc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	71fb      	strb	r3, [r7, #7]

		CntUART2RxTimeOut = 500;
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <USART2_IRQHandler+0x100>)
 8002564:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002568:	601a      	str	r2, [r3, #0]


        if (!GettingPacket)
 800256a:	4b36      	ldr	r3, [pc, #216]	; (8002644 <USART2_IRQHandler+0x104>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f083 0301 	eor.w	r3, r3, #1
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d014      	beq.n	80025a2 <USART2_IRQHandler+0x62>
         {
             if ((BtPrev == HEADER1) && (Bt == HEADER2))
 8002578:	4b33      	ldr	r3, [pc, #204]	; (8002648 <USART2_IRQHandler+0x108>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b39      	cmp	r3, #57	; 0x39
 800257e:	d10c      	bne.n	800259a <USART2_IRQHandler+0x5a>
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2bc3      	cmp	r3, #195	; 0xc3
 8002584:	d109      	bne.n	800259a <USART2_IRQHandler+0x5a>
             {
                 BtPrev = 0;
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <USART2_IRQHandler+0x108>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
                 GettingPacket = 1;
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <USART2_IRQHandler+0x104>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
                 CntRec = 0;
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <USART2_IRQHandler+0x10c>)
 8002594:	2200      	movs	r2, #0
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	e048      	b.n	800262c <USART2_IRQHandler+0xec>
             }
             else
             {
            	 BtPrev = Bt;
 800259a:	4a2b      	ldr	r2, [pc, #172]	; (8002648 <USART2_IRQHandler+0x108>)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	7013      	strb	r3, [r2, #0]
 80025a0:	e044      	b.n	800262c <USART2_IRQHandler+0xec>
             }
         }
         else
         {
             if (CntRec > SIZE_OF_REC_ARRAY)
 80025a2:	4b2a      	ldr	r3, [pc, #168]	; (800264c <USART2_IRQHandler+0x10c>)
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d903      	bls.n	80025b2 <USART2_IRQHandler+0x72>
            	 GettingPacket = 0;
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <USART2_IRQHandler+0x104>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	e03c      	b.n	800262c <USART2_IRQHandler+0xec>
             else
             {
                 PacketRec[CntRec] = Bt;
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <USART2_IRQHandler+0x10c>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4a25      	ldr	r2, [pc, #148]	; (8002650 <USART2_IRQHandler+0x110>)
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	5453      	strb	r3, [r2, r1]
                 if (PacketRec[0] > 100)
 80025be:	4b24      	ldr	r3, [pc, #144]	; (8002650 <USART2_IRQHandler+0x110>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d902      	bls.n	80025cc <USART2_IRQHandler+0x8c>
                 {
                	 GettingPacket = 0;
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <USART2_IRQHandler+0x104>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
                 }
                 CntRec++;
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <USART2_IRQHandler+0x10c>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <USART2_IRQHandler+0x10c>)
 80025d6:	801a      	strh	r2, [r3, #0]
                 if (CntRec > (PacketRec[0] + 1))
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <USART2_IRQHandler+0x10c>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <USART2_IRQHandler+0x110>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	429a      	cmp	r2, r3
 80025e6:	dd21      	ble.n	800262c <USART2_IRQHandler+0xec>
                 {
                	 GettingPacket = 0;
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <USART2_IRQHandler+0x104>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]

                	 Bt=CalcCheckSumm(PacketRec[0] + 1, (unsigned char *)PacketRec);
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <USART2_IRQHandler+0x110>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	4916      	ldr	r1, [pc, #88]	; (8002650 <USART2_IRQHandler+0x110>)
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fcae 	bl	8001f58 <CalcCheckSumm>
 80025fc:	4603      	mov	r3, r0
 80025fe:	71fb      	strb	r3, [r7, #7]

                     if ( Bt== PacketRec[PacketRec[0] + 1])
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <USART2_IRQHandler+0x110>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <USART2_IRQHandler+0x110>)
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	79fa      	ldrb	r2, [r7, #7]
 800260c:	429a      	cmp	r2, r3
 800260e:	d10a      	bne.n	8002626 <USART2_IRQHandler+0xe6>
                     {
                         //Есть пакет
                   		short msg = 1235;
 8002610:	f240 43d3 	movw	r3, #1235	; 0x4d3
 8002614:	80bb      	strh	r3, [r7, #4]
                   		osMessageQueuePut(QueueUART2Handle, (void*) &msg, 15, 0);
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <USART2_IRQHandler+0x114>)
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	1d39      	adds	r1, r7, #4
 800261c:	2300      	movs	r3, #0
 800261e:	220f      	movs	r2, #15
 8002620:	f003 ff5e 	bl	80064e0 <osMessageQueuePut>
 8002624:	e002      	b.n	800262c <USART2_IRQHandler+0xec>
                     }
                     else
                     {
                         CntRec = 0;
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <USART2_IRQHandler+0x10c>)
 8002628:	2200      	movs	r2, #0
 800262a:	801a      	strh	r2, [r3, #0]



	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800262c:	4803      	ldr	r0, [pc, #12]	; (800263c <USART2_IRQHandler+0xfc>)
 800262e:	f002 ff2f 	bl	8005490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20004c2c 	.word	0x20004c2c
 8002640:	20004de4 	.word	0x20004de4
 8002644:	20004de2 	.word	0x20004de2
 8002648:	20004de8 	.word	0x20004de8
 800264c:	20004de0 	.word	0x20004de0
 8002650:	20004b64 	.word	0x20004b64
 8002654:	20004a18 	.word	0x20004a18

08002658 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800265c:	480a      	ldr	r0, [pc, #40]	; (8002688 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 800265e:	f002 fc78 	bl	8004f52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

if (CntUART2RxTimeOut)
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <TIM8_TRG_COM_TIM14_IRQHandler+0x2a>
{
	CntUART2RxTimeOut--;
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3b01      	subs	r3, #1
 8002670:	4a06      	ldr	r2, [pc, #24]	; (800268c <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 8002672:	6013      	str	r3, [r2, #0]
	if (!CntUART2RxTimeOut)
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <TIM8_TRG_COM_TIM14_IRQHandler+0x2a>
	{
        GettingPacket = 0;
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <TIM8_TRG_COM_TIM14_IRQHandler+0x38>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
	}
}

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20004da0 	.word	0x20004da0
 800268c:	20004de4 	.word	0x20004de4
 8002690:	20004de2 	.word	0x20004de2

08002694 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <DMA2_Stream0_IRQHandler+0x10>)
 800269a:	f000 fadb 	bl	8002c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20004cd0 	.word	0x20004cd0

080026a8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */
	short msg = 1234;
 80026ae:	f240 43d2 	movw	r3, #1234	; 0x4d2
 80026b2:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80026b4:	480b      	ldr	r0, [pc, #44]	; (80026e4 <DMA2_Stream3_IRQHandler+0x3c>)
 80026b6:	f000 facd 	bl	8002c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */
	HAL_GPIO_WritePin(MPU6500_CS, GPIO_PIN_SET);/////////////////////////////////////////////////
 80026ba:	2201      	movs	r2, #1
 80026bc:	2140      	movs	r1, #64	; 0x40
 80026be:	480a      	ldr	r0, [pc, #40]	; (80026e8 <DMA2_Stream3_IRQHandler+0x40>)
 80026c0:	f000 feca 	bl	8003458 <HAL_GPIO_WritePin>

	Timestamp = TimestampCounter;
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <DMA2_Stream3_IRQHandler+0x44>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <DMA2_Stream3_IRQHandler+0x48>)
 80026ca:	6013      	str	r3, [r2, #0]

	osMessageQueuePut(QueueSPI1Handle, (void*) &msg, 15, 0);
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <DMA2_Stream3_IRQHandler+0x4c>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	1db9      	adds	r1, r7, #6
 80026d2:	2300      	movs	r3, #0
 80026d4:	220f      	movs	r2, #15
 80026d6:	f003 ff03 	bl	80064e0 <osMessageQueuePut>

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20004d34 	.word	0x20004d34
 80026e8:	40021000 	.word	0x40021000
 80026ec:	20004b44 	.word	0x20004b44
 80026f0:	20004b4c 	.word	0x20004b4c
 80026f4:	20004c28 	.word	0x20004c28

080026f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <SystemInit+0x28>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	4a07      	ldr	r2, [pc, #28]	; (8002720 <SystemInit+0x28>)
 8002704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <SystemInit+0x28>)
 800270e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002712:	609a      	str	r2, [r3, #8]
#endif
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800275c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002728:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800272a:	e003      	b.n	8002734 <LoopCopyDataInit>

0800272c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800272e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002730:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002732:	3104      	adds	r1, #4

08002734 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002734:	480b      	ldr	r0, [pc, #44]	; (8002764 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002738:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800273a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800273c:	d3f6      	bcc.n	800272c <CopyDataInit>
  ldr  r2, =_sbss
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002740:	e002      	b.n	8002748 <LoopFillZerobss>

08002742 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002742:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002744:	f842 3b04 	str.w	r3, [r2], #4

08002748 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800274a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800274c:	d3f9      	bcc.n	8002742 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800274e:	f7ff ffd3 	bl	80026f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002752:	f007 ff7d 	bl	800a650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7fe feaf 	bl	80014b8 <main>
  bx  lr    
 800275a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800275c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002760:	0800aa20 	.word	0x0800aa20
  ldr  r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002768:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 800276c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002770:	20004e30 	.word	0x20004e30

08002774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC_IRQHandler>
	...

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <HAL_Init+0x40>)
 8002782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_Init+0x40>)
 800278e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_Init+0x40>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_Init+0x40>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a0:	2003      	movs	r0, #3
 80027a2:	f000 f8fa 	bl	800299a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7ff fe42 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ac:	f7ff fcde 	bl	800216c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023c00 	.word	0x40023c00

080027bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x20>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x24>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_IncTick+0x24>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000010 	.word	0x20000010
 80027e0:	20004dec 	.word	0x20004dec

080027e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_GetTick+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20004dec 	.word	0x20004dec

080027fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff ffee 	bl	80027e4 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d005      	beq.n	8002822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_Delay+0x40>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002822:	bf00      	nop
 8002824:	f7ff ffde 	bl	80027e4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	429a      	cmp	r2, r3
 8002832:	d8f7      	bhi.n	8002824 <HAL_Delay+0x28>
  {
  }
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000010 	.word	0x20000010

08002840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800286c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <__NVIC_GetPriorityGrouping+0x18>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 0307 	and.w	r3, r3, #7
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	db0b      	blt.n	80028ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	f003 021f 	and.w	r2, r3, #31
 80028bc:	4907      	ldr	r1, [pc, #28]	; (80028dc <__NVIC_EnableIRQ+0x38>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2001      	movs	r0, #1
 80028c6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	db0a      	blt.n	800290a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	490c      	ldr	r1, [pc, #48]	; (800292c <__NVIC_SetPriority+0x4c>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	0112      	lsls	r2, r2, #4
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	440b      	add	r3, r1
 8002904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002908:	e00a      	b.n	8002920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4908      	ldr	r1, [pc, #32]	; (8002930 <__NVIC_SetPriority+0x50>)
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3b04      	subs	r3, #4
 8002918:	0112      	lsls	r2, r2, #4
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	440b      	add	r3, r1
 800291e:	761a      	strb	r2, [r3, #24]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000e100 	.word	0xe000e100
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f1c3 0307 	rsb	r3, r3, #7
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf28      	it	cs
 8002952:	2304      	movcs	r3, #4
 8002954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3304      	adds	r3, #4
 800295a:	2b06      	cmp	r3, #6
 800295c:	d902      	bls.n	8002964 <NVIC_EncodePriority+0x30>
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3b03      	subs	r3, #3
 8002962:	e000      	b.n	8002966 <NVIC_EncodePriority+0x32>
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	401a      	ands	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800297c:	f04f 31ff 	mov.w	r1, #4294967295
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43d9      	mvns	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	4313      	orrs	r3, r2
         );
}
 800298e:	4618      	mov	r0, r3
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff4c 	bl	8002840 <__NVIC_SetPriorityGrouping>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c2:	f7ff ff61 	bl	8002888 <__NVIC_GetPriorityGrouping>
 80029c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	6978      	ldr	r0, [r7, #20]
 80029ce:	f7ff ffb1 	bl	8002934 <NVIC_EncodePriority>
 80029d2:	4602      	mov	r2, r0
 80029d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff80 	bl	80028e0 <__NVIC_SetPriority>
}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff54 	bl	80028a4 <__NVIC_EnableIRQ>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff fee8 	bl	80027e4 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e099      	b.n	8002b54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a40:	e00f      	b.n	8002a62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a42:	f7ff fecf 	bl	80027e4 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	d908      	bls.n	8002a62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e078      	b.n	8002b54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e8      	bne.n	8002a42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <HAL_DMA_Init+0x158>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d107      	bne.n	8002acc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f023 0307 	bic.w	r3, r3, #7
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d117      	bne.n	8002b26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00e      	beq.n	8002b26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fa91 	bl	8003030 <DMA_CheckFifoParam>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b22:	2301      	movs	r3, #1
 8002b24:	e016      	b.n	8002b54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa48 	bl	8002fc4 <DMA_CalcBaseAndBitshift>
 8002b34:	4603      	mov	r3, r0
 8002b36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	223f      	movs	r2, #63	; 0x3f
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	f010803f 	.word	0xf010803f

08002b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_DMA_Start_IT+0x26>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e040      	b.n	8002c08 <HAL_DMA_Start_IT+0xa8>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d12f      	bne.n	8002bfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 f9da 	bl	8002f68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb8:	223f      	movs	r2, #63	; 0x3f
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0216 	orr.w	r2, r2, #22
 8002bce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d007      	beq.n	8002be8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0208 	orr.w	r2, r2, #8
 8002be6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	e005      	b.n	8002c06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
 8002c04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d004      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e00c      	b.n	8002c48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2205      	movs	r2, #5
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c60:	4b92      	ldr	r3, [pc, #584]	; (8002eac <HAL_DMA_IRQHandler+0x258>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a92      	ldr	r2, [pc, #584]	; (8002eb0 <HAL_DMA_IRQHandler+0x25c>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0a9b      	lsrs	r3, r3, #10
 8002c6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	2208      	movs	r2, #8
 8002c80:	409a      	lsls	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d01a      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0204 	bic.w	r2, r2, #4
 8002ca6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	2208      	movs	r2, #8
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d012      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f043 0202 	orr.w	r2, r3, #2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d012      	beq.n	8002d2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	2204      	movs	r2, #4
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	2210      	movs	r2, #16
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d043      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d03c      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	2210      	movs	r2, #16
 8002d50:	409a      	lsls	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d018      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d024      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
 8002d82:	e01f      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
 8002d94:	e016      	b.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0208 	bic.w	r2, r2, #8
 8002db2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	2220      	movs	r2, #32
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 808e 	beq.w	8002ef2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8086 	beq.w	8002ef2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	2220      	movs	r2, #32
 8002dec:	409a      	lsls	r2, r3
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d136      	bne.n	8002e6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0216 	bic.w	r2, r2, #22
 8002e0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <HAL_DMA_IRQHandler+0x1da>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0208 	bic.w	r2, r2, #8
 8002e3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	223f      	movs	r2, #63	; 0x3f
 8002e44:	409a      	lsls	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d07d      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
        }
        return;
 8002e6a:	e078      	b.n	8002f5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01c      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d108      	bne.n	8002e9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d030      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
 8002e98:	e02b      	b.n	8002ef2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d027      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	4798      	blx	r3
 8002eaa:	e022      	b.n	8002ef2 <HAL_DMA_IRQHandler+0x29e>
 8002eac:	20000008 	.word	0x20000008
 8002eb0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0210 	bic.w	r2, r2, #16
 8002ed0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d032      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d022      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2205      	movs	r2, #5
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3301      	adds	r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d307      	bcc.n	8002f3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f2      	bne.n	8002f1e <HAL_DMA_IRQHandler+0x2ca>
 8002f38:	e000      	b.n	8002f3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f3a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
 8002f5c:	e000      	b.n	8002f60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f5e:	bf00      	nop
    }
  }
}
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop

08002f68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b40      	cmp	r3, #64	; 0x40
 8002f94:	d108      	bne.n	8002fa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fa6:	e007      	b.n	8002fb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	60da      	str	r2, [r3, #12]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3b10      	subs	r3, #16
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <DMA_CalcBaseAndBitshift+0x64>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fde:	4a13      	ldr	r2, [pc, #76]	; (800302c <DMA_CalcBaseAndBitshift+0x68>)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d909      	bls.n	8003006 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	1d1a      	adds	r2, r3, #4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	659a      	str	r2, [r3, #88]	; 0x58
 8003004:	e007      	b.n	8003016 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	aaaaaaab 	.word	0xaaaaaaab
 800302c:	0800a7e4 	.word	0x0800a7e4

08003030 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11f      	bne.n	800308a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d855      	bhi.n	80030fc <DMA_CheckFifoParam+0xcc>
 8003050:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <DMA_CheckFifoParam+0x28>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	08003069 	.word	0x08003069
 800305c:	0800307b 	.word	0x0800307b
 8003060:	08003069 	.word	0x08003069
 8003064:	080030fd 	.word	0x080030fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d045      	beq.n	8003100 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003078:	e042      	b.n	8003100 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003082:	d13f      	bne.n	8003104 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003088:	e03c      	b.n	8003104 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003092:	d121      	bne.n	80030d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b03      	cmp	r3, #3
 8003098:	d836      	bhi.n	8003108 <DMA_CheckFifoParam+0xd8>
 800309a:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <DMA_CheckFifoParam+0x70>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030b7 	.word	0x080030b7
 80030a8:	080030b1 	.word	0x080030b1
 80030ac:	080030c9 	.word	0x080030c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
      break;
 80030b4:	e02f      	b.n	8003116 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d024      	beq.n	800310c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c6:	e021      	b.n	800310c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030d0:	d11e      	bne.n	8003110 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030d6:	e01b      	b.n	8003110 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d902      	bls.n	80030e4 <DMA_CheckFifoParam+0xb4>
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d003      	beq.n	80030ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030e2:	e018      	b.n	8003116 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      break;
 80030e8:	e015      	b.n	8003116 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00e      	beq.n	8003114 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
      break;
 80030fa:	e00b      	b.n	8003114 <DMA_CheckFifoParam+0xe4>
      break;
 80030fc:	bf00      	nop
 80030fe:	e00a      	b.n	8003116 <DMA_CheckFifoParam+0xe6>
      break;
 8003100:	bf00      	nop
 8003102:	e008      	b.n	8003116 <DMA_CheckFifoParam+0xe6>
      break;
 8003104:	bf00      	nop
 8003106:	e006      	b.n	8003116 <DMA_CheckFifoParam+0xe6>
      break;
 8003108:	bf00      	nop
 800310a:	e004      	b.n	8003116 <DMA_CheckFifoParam+0xe6>
      break;
 800310c:	bf00      	nop
 800310e:	e002      	b.n	8003116 <DMA_CheckFifoParam+0xe6>
      break;   
 8003110:	bf00      	nop
 8003112:	e000      	b.n	8003116 <DMA_CheckFifoParam+0xe6>
      break;
 8003114:	bf00      	nop
    }
  } 
  
  return status; 
 8003116:	7bfb      	ldrb	r3, [r7, #15]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	e16b      	b.n	8003418 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	429a      	cmp	r2, r3
 800315a:	f040 815a 	bne.w	8003412 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d00b      	beq.n	800317e <HAL_GPIO_Init+0x5a>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003172:	2b11      	cmp	r3, #17
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b12      	cmp	r3, #18
 800317c:	d130      	bne.n	80031e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	2203      	movs	r2, #3
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031b4:	2201      	movs	r2, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 0201 	and.w	r2, r3, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0xfc>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b12      	cmp	r3, #18
 800321e:	d123      	bne.n	8003268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	220f      	movs	r2, #15
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	08da      	lsrs	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3208      	adds	r2, #8
 8003262:	69b9      	ldr	r1, [r7, #24]
 8003264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0203 	and.w	r2, r3, #3
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80b4 	beq.w	8003412 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b5f      	ldr	r3, [pc, #380]	; (800342c <HAL_GPIO_Init+0x308>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	4a5e      	ldr	r2, [pc, #376]	; (800342c <HAL_GPIO_Init+0x308>)
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ba:	4b5c      	ldr	r3, [pc, #368]	; (800342c <HAL_GPIO_Init+0x308>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032c6:	4a5a      	ldr	r2, [pc, #360]	; (8003430 <HAL_GPIO_Init+0x30c>)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a51      	ldr	r2, [pc, #324]	; (8003434 <HAL_GPIO_Init+0x310>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d02b      	beq.n	800334a <HAL_GPIO_Init+0x226>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a50      	ldr	r2, [pc, #320]	; (8003438 <HAL_GPIO_Init+0x314>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d025      	beq.n	8003346 <HAL_GPIO_Init+0x222>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4f      	ldr	r2, [pc, #316]	; (800343c <HAL_GPIO_Init+0x318>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <HAL_GPIO_Init+0x21e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4e      	ldr	r2, [pc, #312]	; (8003440 <HAL_GPIO_Init+0x31c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d019      	beq.n	800333e <HAL_GPIO_Init+0x21a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4d      	ldr	r2, [pc, #308]	; (8003444 <HAL_GPIO_Init+0x320>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_GPIO_Init+0x216>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4c      	ldr	r2, [pc, #304]	; (8003448 <HAL_GPIO_Init+0x324>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00d      	beq.n	8003336 <HAL_GPIO_Init+0x212>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4b      	ldr	r2, [pc, #300]	; (800344c <HAL_GPIO_Init+0x328>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_Init+0x20e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4a      	ldr	r2, [pc, #296]	; (8003450 <HAL_GPIO_Init+0x32c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_GPIO_Init+0x20a>
 800332a:	2307      	movs	r3, #7
 800332c:	e00e      	b.n	800334c <HAL_GPIO_Init+0x228>
 800332e:	2308      	movs	r3, #8
 8003330:	e00c      	b.n	800334c <HAL_GPIO_Init+0x228>
 8003332:	2306      	movs	r3, #6
 8003334:	e00a      	b.n	800334c <HAL_GPIO_Init+0x228>
 8003336:	2305      	movs	r3, #5
 8003338:	e008      	b.n	800334c <HAL_GPIO_Init+0x228>
 800333a:	2304      	movs	r3, #4
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x228>
 800333e:	2303      	movs	r3, #3
 8003340:	e004      	b.n	800334c <HAL_GPIO_Init+0x228>
 8003342:	2302      	movs	r3, #2
 8003344:	e002      	b.n	800334c <HAL_GPIO_Init+0x228>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_GPIO_Init+0x228>
 800334a:	2300      	movs	r3, #0
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f002 0203 	and.w	r2, r2, #3
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	4093      	lsls	r3, r2
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800335c:	4934      	ldr	r1, [pc, #208]	; (8003430 <HAL_GPIO_Init+0x30c>)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	3302      	adds	r3, #2
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800336a:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <HAL_GPIO_Init+0x330>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800338e:	4a31      	ldr	r2, [pc, #196]	; (8003454 <HAL_GPIO_Init+0x330>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003394:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <HAL_GPIO_Init+0x330>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b8:	4a26      	ldr	r2, [pc, #152]	; (8003454 <HAL_GPIO_Init+0x330>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033be:	4b25      	ldr	r3, [pc, #148]	; (8003454 <HAL_GPIO_Init+0x330>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033e2:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_GPIO_Init+0x330>)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e8:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <HAL_GPIO_Init+0x330>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800340c:	4a11      	ldr	r2, [pc, #68]	; (8003454 <HAL_GPIO_Init+0x330>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	f67f ae90 	bls.w	8003140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003420:	bf00      	nop
 8003422:	3724      	adds	r7, #36	; 0x24
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40023800 	.word	0x40023800
 8003430:	40013800 	.word	0x40013800
 8003434:	40020000 	.word	0x40020000
 8003438:	40020400 	.word	0x40020400
 800343c:	40020800 	.word	0x40020800
 8003440:	40020c00 	.word	0x40020c00
 8003444:	40021000 	.word	0x40021000
 8003448:	40021400 	.word	0x40021400
 800344c:	40021800 	.word	0x40021800
 8003450:	40021c00 	.word	0x40021c00
 8003454:	40013c00 	.word	0x40013c00

08003458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	807b      	strh	r3, [r7, #2]
 8003464:	4613      	mov	r3, r2
 8003466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003468:	787b      	ldrb	r3, [r7, #1]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003474:	e003      	b.n	800347e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	041a      	lsls	r2, r3, #16
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	619a      	str	r2, [r3, #24]
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e25b      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d075      	beq.n	8003596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034aa:	4ba3      	ldr	r3, [pc, #652]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d00c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b6:	4ba0      	ldr	r3, [pc, #640]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d112      	bne.n	80034e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c2:	4b9d      	ldr	r3, [pc, #628]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ce:	d10b      	bne.n	80034e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	4b99      	ldr	r3, [pc, #612]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d05b      	beq.n	8003594 <HAL_RCC_OscConfig+0x108>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d157      	bne.n	8003594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e236      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f0:	d106      	bne.n	8003500 <HAL_RCC_OscConfig+0x74>
 80034f2:	4b91      	ldr	r3, [pc, #580]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a90      	ldr	r2, [pc, #576]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e01d      	b.n	800353c <HAL_RCC_OscConfig+0xb0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0x98>
 800350a:	4b8b      	ldr	r3, [pc, #556]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a8a      	ldr	r2, [pc, #552]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b88      	ldr	r3, [pc, #544]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a87      	ldr	r2, [pc, #540]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e00b      	b.n	800353c <HAL_RCC_OscConfig+0xb0>
 8003524:	4b84      	ldr	r3, [pc, #528]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a83      	ldr	r2, [pc, #524]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 800352a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b81      	ldr	r3, [pc, #516]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a80      	ldr	r2, [pc, #512]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d013      	beq.n	800356c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7ff f94e 	bl	80027e4 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800354c:	f7ff f94a 	bl	80027e4 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e1fb      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b76      	ldr	r3, [pc, #472]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0xc0>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7ff f93a 	bl	80027e4 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003574:	f7ff f936 	bl	80027e4 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e1e7      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	4b6c      	ldr	r3, [pc, #432]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0xe8>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d063      	beq.n	800366a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035a2:	4b65      	ldr	r3, [pc, #404]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ae:	4b62      	ldr	r3, [pc, #392]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d11c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ba:	4b5f      	ldr	r3, [pc, #380]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d116      	bne.n	80035f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	4b5c      	ldr	r3, [pc, #368]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_RCC_OscConfig+0x152>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e1bb      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035de:	4b56      	ldr	r3, [pc, #344]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4952      	ldr	r1, [pc, #328]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	e03a      	b.n	800366a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fc:	4b4f      	ldr	r3, [pc, #316]	; (800373c <HAL_RCC_OscConfig+0x2b0>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7ff f8ef 	bl	80027e4 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800360a:	f7ff f8eb 	bl	80027e4 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e19c      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361c:	4b46      	ldr	r3, [pc, #280]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003628:	4b43      	ldr	r3, [pc, #268]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4940      	ldr	r1, [pc, #256]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]
 800363c:	e015      	b.n	800366a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363e:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_RCC_OscConfig+0x2b0>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7ff f8ce 	bl	80027e4 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800364c:	f7ff f8ca 	bl	80027e4 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e17b      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365e:	4b36      	ldr	r3, [pc, #216]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d030      	beq.n	80036d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367e:	4b30      	ldr	r3, [pc, #192]	; (8003740 <HAL_RCC_OscConfig+0x2b4>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003684:	f7ff f8ae 	bl	80027e4 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800368c:	f7ff f8aa 	bl	80027e4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e15b      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x200>
 80036aa:	e015      	b.n	80036d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ac:	4b24      	ldr	r3, [pc, #144]	; (8003740 <HAL_RCC_OscConfig+0x2b4>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b2:	f7ff f897 	bl	80027e4 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ba:	f7ff f893 	bl	80027e4 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e144      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036cc:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f0      	bne.n	80036ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80a0 	beq.w	8003826 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4a0e      	ldr	r2, [pc, #56]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	6413      	str	r3, [r2, #64]	; 0x40
 8003706:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_OscConfig+0x2b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d121      	bne.n	8003766 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <HAL_RCC_OscConfig+0x2b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a07      	ldr	r2, [pc, #28]	; (8003744 <HAL_RCC_OscConfig+0x2b8>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7ff f859 	bl	80027e4 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	e011      	b.n	800375a <HAL_RCC_OscConfig+0x2ce>
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	42470000 	.word	0x42470000
 8003740:	42470e80 	.word	0x42470e80
 8003744:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003748:	f7ff f84c 	bl	80027e4 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0fd      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b81      	ldr	r3, [pc, #516]	; (8003960 <HAL_RCC_OscConfig+0x4d4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d106      	bne.n	800377c <HAL_RCC_OscConfig+0x2f0>
 800376e:	4b7d      	ldr	r3, [pc, #500]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	4a7c      	ldr	r2, [pc, #496]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6713      	str	r3, [r2, #112]	; 0x70
 800377a:	e01c      	b.n	80037b6 <HAL_RCC_OscConfig+0x32a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2b05      	cmp	r3, #5
 8003782:	d10c      	bne.n	800379e <HAL_RCC_OscConfig+0x312>
 8003784:	4b77      	ldr	r3, [pc, #476]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	4a76      	ldr	r2, [pc, #472]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 800378a:	f043 0304 	orr.w	r3, r3, #4
 800378e:	6713      	str	r3, [r2, #112]	; 0x70
 8003790:	4b74      	ldr	r3, [pc, #464]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	4a73      	ldr	r2, [pc, #460]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6713      	str	r3, [r2, #112]	; 0x70
 800379c:	e00b      	b.n	80037b6 <HAL_RCC_OscConfig+0x32a>
 800379e:	4b71      	ldr	r3, [pc, #452]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	4a70      	ldr	r2, [pc, #448]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	6713      	str	r3, [r2, #112]	; 0x70
 80037aa:	4b6e      	ldr	r3, [pc, #440]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4a6d      	ldr	r2, [pc, #436]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d015      	beq.n	80037ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7ff f811 	bl	80027e4 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c4:	e00a      	b.n	80037dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7ff f80d 	bl	80027e4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e0bc      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	4b61      	ldr	r3, [pc, #388]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ee      	beq.n	80037c6 <HAL_RCC_OscConfig+0x33a>
 80037e8:	e014      	b.n	8003814 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ea:	f7fe fffb 	bl	80027e4 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7fe fff7 	bl	80027e4 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0a6      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003808:	4b56      	ldr	r3, [pc, #344]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ee      	bne.n	80037f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381a:	4b52      	ldr	r3, [pc, #328]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	4a51      	ldr	r2, [pc, #324]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 8003820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003824:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8092 	beq.w	8003954 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003830:	4b4c      	ldr	r3, [pc, #304]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b08      	cmp	r3, #8
 800383a:	d05c      	beq.n	80038f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d141      	bne.n	80038c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003844:	4b48      	ldr	r3, [pc, #288]	; (8003968 <HAL_RCC_OscConfig+0x4dc>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384a:	f7fe ffcb 	bl	80027e4 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003852:	f7fe ffc7 	bl	80027e4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e078      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003864:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f0      	bne.n	8003852 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	019b      	lsls	r3, r3, #6
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	3b01      	subs	r3, #1
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	061b      	lsls	r3, r3, #24
 8003894:	4933      	ldr	r1, [pc, #204]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 8003896:	4313      	orrs	r3, r2
 8003898:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800389a:	4b33      	ldr	r3, [pc, #204]	; (8003968 <HAL_RCC_OscConfig+0x4dc>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fe ffa0 	bl	80027e4 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a8:	f7fe ff9c 	bl	80027e4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e04d      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x41c>
 80038c6:	e045      	b.n	8003954 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <HAL_RCC_OscConfig+0x4dc>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fe ff89 	bl	80027e4 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe ff85 	bl	80027e4 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e036      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e8:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x44a>
 80038f4:	e02e      	b.n	8003954 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e029      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003902:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_RCC_OscConfig+0x4d8>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	429a      	cmp	r2, r3
 8003914:	d11c      	bne.n	8003950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d115      	bne.n	8003950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003930:	4293      	cmp	r3, r2
 8003932:	d10d      	bne.n	8003950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d106      	bne.n	8003950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40007000 	.word	0x40007000
 8003964:	40023800 	.word	0x40023800
 8003968:	42470060 	.word	0x42470060

0800396c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0cc      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003980:	4b68      	ldr	r3, [pc, #416]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d90c      	bls.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b65      	ldr	r3, [pc, #404]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b63      	ldr	r3, [pc, #396]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0b8      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c0:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d8:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a52      	ldr	r2, [pc, #328]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e4:	4b50      	ldr	r3, [pc, #320]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	494d      	ldr	r1, [pc, #308]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d044      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d107      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d119      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e07f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d003      	beq.n	8003a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3a:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e067      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 0203 	bic.w	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4934      	ldr	r1, [pc, #208]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a5c:	f7fe fec2 	bl	80027e4 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a64:	f7fe febe 	bl	80027e4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e04f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 020c 	and.w	r2, r3, #12
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d1eb      	bne.n	8003a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d20c      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b22      	ldr	r3, [pc, #136]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e032      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4916      	ldr	r1, [pc, #88]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ade:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	490e      	ldr	r1, [pc, #56]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003af2:	f000 f821 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003af6:	4601      	mov	r1, r0
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	5cd3      	ldrb	r3, [r2, r3]
 8003b06:	fa21 f303 	lsr.w	r3, r1, r3
 8003b0a:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1c8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fc8c 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023c00 	.word	0x40023c00
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	0800a7cc 	.word	0x0800a7cc
 8003b30:	20000008 	.word	0x20000008
 8003b34:	2000000c 	.word	0x2000000c

08003b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	2300      	movs	r3, #0
 8003b48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4e:	4b63      	ldr	r3, [pc, #396]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d007      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0x32>
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d008      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x38>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f040 80b4 	bne.w	8003ccc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b5e      	ldr	r3, [pc, #376]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b66:	60bb      	str	r3, [r7, #8]
       break;
 8003b68:	e0b3      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b6a:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003b6c:	60bb      	str	r3, [r7, #8]
      break;
 8003b6e:	e0b0      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b70:	4b5a      	ldr	r3, [pc, #360]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b7a:	4b58      	ldr	r3, [pc, #352]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d04a      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b86:	4b55      	ldr	r3, [pc, #340]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	099b      	lsrs	r3, r3, #6
 8003b8c:	f04f 0400 	mov.w	r4, #0
 8003b90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	ea03 0501 	and.w	r5, r3, r1
 8003b9c:	ea04 0602 	and.w	r6, r4, r2
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	4632      	mov	r2, r6
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	f04f 0400 	mov.w	r4, #0
 8003bac:	0154      	lsls	r4, r2, #5
 8003bae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bb2:	014b      	lsls	r3, r1, #5
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	1b49      	subs	r1, r1, r5
 8003bba:	eb62 0206 	sbc.w	r2, r2, r6
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	f04f 0400 	mov.w	r4, #0
 8003bc6:	0194      	lsls	r4, r2, #6
 8003bc8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bcc:	018b      	lsls	r3, r1, #6
 8003bce:	1a5b      	subs	r3, r3, r1
 8003bd0:	eb64 0402 	sbc.w	r4, r4, r2
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	00e2      	lsls	r2, r4, #3
 8003bde:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003be2:	00d9      	lsls	r1, r3, #3
 8003be4:	460b      	mov	r3, r1
 8003be6:	4614      	mov	r4, r2
 8003be8:	195b      	adds	r3, r3, r5
 8003bea:	eb44 0406 	adc.w	r4, r4, r6
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	0262      	lsls	r2, r4, #9
 8003bf8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003bfc:	0259      	lsls	r1, r3, #9
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4614      	mov	r4, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	4621      	mov	r1, r4
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f04f 0400 	mov.w	r4, #0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4623      	mov	r3, r4
 8003c10:	f7fc ffc2 	bl	8000b98 <__aeabi_uldivmod>
 8003c14:	4603      	mov	r3, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e049      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1c:	4b2f      	ldr	r3, [pc, #188]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	099b      	lsrs	r3, r3, #6
 8003c22:	f04f 0400 	mov.w	r4, #0
 8003c26:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	ea03 0501 	and.w	r5, r3, r1
 8003c32:	ea04 0602 	and.w	r6, r4, r2
 8003c36:	4629      	mov	r1, r5
 8003c38:	4632      	mov	r2, r6
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	f04f 0400 	mov.w	r4, #0
 8003c42:	0154      	lsls	r4, r2, #5
 8003c44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c48:	014b      	lsls	r3, r1, #5
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	1b49      	subs	r1, r1, r5
 8003c50:	eb62 0206 	sbc.w	r2, r2, r6
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	f04f 0400 	mov.w	r4, #0
 8003c5c:	0194      	lsls	r4, r2, #6
 8003c5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c62:	018b      	lsls	r3, r1, #6
 8003c64:	1a5b      	subs	r3, r3, r1
 8003c66:	eb64 0402 	sbc.w	r4, r4, r2
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	00e2      	lsls	r2, r4, #3
 8003c74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c78:	00d9      	lsls	r1, r3, #3
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	195b      	adds	r3, r3, r5
 8003c80:	eb44 0406 	adc.w	r4, r4, r6
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	02a2      	lsls	r2, r4, #10
 8003c8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c92:	0299      	lsls	r1, r3, #10
 8003c94:	460b      	mov	r3, r1
 8003c96:	4614      	mov	r4, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f04f 0400 	mov.w	r4, #0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4623      	mov	r3, r4
 8003ca6:	f7fc ff77 	bl	8000b98 <__aeabi_uldivmod>
 8003caa:	4603      	mov	r3, r0
 8003cac:	460c      	mov	r4, r1
 8003cae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	60bb      	str	r3, [r7, #8]
      break;
 8003cca:	e002      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cce:	60bb      	str	r3, [r7, #8]
      break;
 8003cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	00f42400 	.word	0x00f42400
 8003ce4:	007a1200 	.word	0x007a1200

08003ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cec:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000008 	.word	0x20000008

08003d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d04:	f7ff fff0 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d08:	4601      	mov	r1, r0
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	0a9b      	lsrs	r3, r3, #10
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	4a03      	ldr	r2, [pc, #12]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d16:	5cd3      	ldrb	r3, [r2, r3]
 8003d18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40023800 	.word	0x40023800
 8003d24:	0800a7dc 	.word	0x0800a7dc

08003d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d2c:	f7ff ffdc 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d30:	4601      	mov	r1, r0
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	0b5b      	lsrs	r3, r3, #13
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	4a03      	ldr	r2, [pc, #12]	; (8003d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3e:	5cd3      	ldrb	r3, [r2, r3]
 8003d40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	0800a7dc 	.word	0x0800a7dc

08003d50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	220f      	movs	r2, #15
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0203 	and.w	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	08db      	lsrs	r3, r3, #3
 8003d8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d92:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <HAL_RCC_GetClockConfig+0x60>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	601a      	str	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40023c00 	.word	0x40023c00

08003db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e056      	b.n	8003e74 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fe f9ef 	bl	80021c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dfc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	ea42 0103 	orr.w	r1, r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	f003 0104 	and.w	r1, r3, #4
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_SPI_Transmit+0x22>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e11e      	b.n	80040dc <HAL_SPI_Transmit+0x260>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea6:	f7fe fc9d 	bl	80027e4 <HAL_GetTick>
 8003eaa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d002      	beq.n	8003ec2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ec0:	e103      	b.n	80040ca <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_Transmit+0x52>
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ed2:	e0fa      	b.n	80040ca <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	88fa      	ldrh	r2, [r7, #6]
 8003ef2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1a:	d107      	bne.n	8003f2c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d007      	beq.n	8003f4a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f52:	d14b      	bne.n	8003fec <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_SPI_Transmit+0xe6>
 8003f5c:	8afb      	ldrh	r3, [r7, #22]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d13e      	bne.n	8003fe0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	881a      	ldrh	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	1c9a      	adds	r2, r3, #2
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f86:	e02b      	b.n	8003fe0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d112      	bne.n	8003fbc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	881a      	ldrh	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	1c9a      	adds	r2, r3, #2
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fba:	e011      	b.n	8003fe0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fbc:	f7fe fc12 	bl	80027e4 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d803      	bhi.n	8003fd4 <HAL_SPI_Transmit+0x158>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d102      	bne.n	8003fda <HAL_SPI_Transmit+0x15e>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fde:	e074      	b.n	80040ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ce      	bne.n	8003f88 <HAL_SPI_Transmit+0x10c>
 8003fea:	e04c      	b.n	8004086 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_SPI_Transmit+0x17e>
 8003ff4:	8afb      	ldrh	r3, [r7, #22]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d140      	bne.n	800407c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004020:	e02c      	b.n	800407c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b02      	cmp	r3, #2
 800402e:	d113      	bne.n	8004058 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	330c      	adds	r3, #12
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	86da      	strh	r2, [r3, #54]	; 0x36
 8004056:	e011      	b.n	800407c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004058:	f7fe fbc4 	bl	80027e4 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d803      	bhi.n	8004070 <HAL_SPI_Transmit+0x1f4>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d102      	bne.n	8004076 <HAL_SPI_Transmit+0x1fa>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	77fb      	strb	r3, [r7, #31]
          goto error;
 800407a:	e026      	b.n	80040ca <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1cd      	bne.n	8004022 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	6839      	ldr	r1, [r7, #0]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fec6 	bl	8004e1c <SPI_EndRxTxTransaction>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	77fb      	strb	r3, [r7, #31]
 80040c6:	e000      	b.n	80040ca <HAL_SPI_Transmit+0x24e>
  }

error:
 80040c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040da:	7ffb      	ldrb	r3, [r7, #31]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004100:	d112      	bne.n	8004128 <HAL_SPI_Receive+0x44>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10e      	bne.n	8004128 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2204      	movs	r2, #4
 800410e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004112:	88fa      	ldrh	r2, [r7, #6]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f8e9 	bl	80042f6 <HAL_SPI_TransmitReceive>
 8004124:	4603      	mov	r3, r0
 8004126:	e0e2      	b.n	80042ee <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_SPI_Receive+0x52>
 8004132:	2302      	movs	r3, #2
 8004134:	e0db      	b.n	80042ee <HAL_SPI_Receive+0x20a>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800413e:	f7fe fb51 	bl	80027e4 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d002      	beq.n	8004156 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004150:	2302      	movs	r3, #2
 8004152:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004154:	e0c2      	b.n	80042dc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_SPI_Receive+0x7e>
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004166:	e0b9      	b.n	80042dc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2204      	movs	r2, #4
 800416c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	88fa      	ldrh	r2, [r7, #6]
 8004186:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ae:	d107      	bne.n	80041c0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d007      	beq.n	80041de <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d162      	bne.n	80042ac <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041e6:	e02e      	b.n	8004246 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d115      	bne.n	8004222 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f103 020c 	add.w	r2, r3, #12
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	7812      	ldrb	r2, [r2, #0]
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004220:	e011      	b.n	8004246 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004222:	f7fe fadf 	bl	80027e4 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d803      	bhi.n	800423a <HAL_SPI_Receive+0x156>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d102      	bne.n	8004240 <HAL_SPI_Receive+0x15c>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004244:	e04a      	b.n	80042dc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1cb      	bne.n	80041e8 <HAL_SPI_Receive+0x104>
 8004250:	e031      	b.n	80042b6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d113      	bne.n	8004288 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	b292      	uxth	r2, r2
 800426c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	1c9a      	adds	r2, r3, #2
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427c:	b29b      	uxth	r3, r3
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004286:	e011      	b.n	80042ac <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004288:	f7fe faac 	bl	80027e4 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d803      	bhi.n	80042a0 <HAL_SPI_Receive+0x1bc>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d102      	bne.n	80042a6 <HAL_SPI_Receive+0x1c2>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042aa:	e017      	b.n	80042dc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1cd      	bne.n	8004252 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fd48 	bl	8004d50 <SPI_EndRxTransaction>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75fb      	strb	r3, [r7, #23]
 80042d8:	e000      	b.n	80042dc <HAL_SPI_Receive+0x1f8>
  }

error :
 80042da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b08c      	sub	sp, #48	; 0x30
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004304:	2301      	movs	r3, #1
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_SPI_TransmitReceive+0x26>
 8004318:	2302      	movs	r3, #2
 800431a:	e18a      	b.n	8004632 <HAL_SPI_TransmitReceive+0x33c>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004324:	f7fe fa5e 	bl	80027e4 <HAL_GetTick>
 8004328:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800433a:	887b      	ldrh	r3, [r7, #2]
 800433c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800433e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004342:	2b01      	cmp	r3, #1
 8004344:	d00f      	beq.n	8004366 <HAL_SPI_TransmitReceive+0x70>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800434c:	d107      	bne.n	800435e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <HAL_SPI_TransmitReceive+0x68>
 8004356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800435a:	2b04      	cmp	r3, #4
 800435c:	d003      	beq.n	8004366 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800435e:	2302      	movs	r3, #2
 8004360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004364:	e15b      	b.n	800461e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_SPI_TransmitReceive+0x82>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_SPI_TransmitReceive+0x82>
 8004372:	887b      	ldrh	r3, [r7, #2]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d103      	bne.n	8004380 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800437e:	e14e      	b.n	800461e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b04      	cmp	r3, #4
 800438a:	d003      	beq.n	8004394 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2205      	movs	r2, #5
 8004390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	887a      	ldrh	r2, [r7, #2]
 80043aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	887a      	ldrh	r2, [r7, #2]
 80043b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	887a      	ldrh	r2, [r7, #2]
 80043bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d007      	beq.n	80043e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f0:	d178      	bne.n	80044e4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x10a>
 80043fa:	8b7b      	ldrh	r3, [r7, #26]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d166      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	881a      	ldrh	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	1c9a      	adds	r2, r3, #2
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004424:	e053      	b.n	80044ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b02      	cmp	r3, #2
 8004432:	d11b      	bne.n	800446c <HAL_SPI_TransmitReceive+0x176>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <HAL_SPI_TransmitReceive+0x176>
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d113      	bne.n	800446c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	881a      	ldrh	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	1c9a      	adds	r2, r3, #2
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d119      	bne.n	80044ae <HAL_SPI_TransmitReceive+0x1b8>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d014      	beq.n	80044ae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	b292      	uxth	r2, r2
 8004490:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	1c9a      	adds	r2, r3, #2
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044aa:	2301      	movs	r3, #1
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044ae:	f7fe f999 	bl	80027e4 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d807      	bhi.n	80044ce <HAL_SPI_TransmitReceive+0x1d8>
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d003      	beq.n	80044ce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044cc:	e0a7      	b.n	800461e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1a6      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x130>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1a1      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x130>
 80044e2:	e07c      	b.n	80045de <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x1fc>
 80044ec:	8b7b      	ldrh	r3, [r7, #26]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d16b      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004518:	e057      	b.n	80045ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b02      	cmp	r3, #2
 8004526:	d11c      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x26c>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d017      	beq.n	8004562 <HAL_SPI_TransmitReceive+0x26c>
 8004532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d114      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	330c      	adds	r3, #12
 8004542:	7812      	ldrb	r2, [r2, #0]
 8004544:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d119      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x2ae>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d014      	beq.n	80045a4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045a0:	2301      	movs	r3, #1
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045a4:	f7fe f91e 	bl	80027e4 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d803      	bhi.n	80045bc <HAL_SPI_TransmitReceive+0x2c6>
 80045b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d102      	bne.n	80045c2 <HAL_SPI_TransmitReceive+0x2cc>
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045c8:	e029      	b.n	800461e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1a2      	bne.n	800451a <HAL_SPI_TransmitReceive+0x224>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d19d      	bne.n	800451a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fc1a 	bl	8004e1c <SPI_EndRxTxTransaction>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d006      	beq.n	80045fc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045fa:	e010      	b.n	800461e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	e000      	b.n	800461e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800461c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800462e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004632:	4618      	mov	r0, r3
 8004634:	3730      	adds	r7, #48	; 0x30
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_SPI_TransmitReceive_DMA+0x20>
 8004658:	2302      	movs	r3, #2
 800465a:	e0e3      	b.n	8004824 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004672:	7dbb      	ldrb	r3, [r7, #22]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d00d      	beq.n	8004694 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800467e:	d106      	bne.n	800468e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d102      	bne.n	800468e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004688:	7dbb      	ldrb	r3, [r7, #22]
 800468a:	2b04      	cmp	r3, #4
 800468c:	d002      	beq.n	8004694 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800468e:	2302      	movs	r3, #2
 8004690:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004692:	e0c2      	b.n	800481a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80046a0:	887b      	ldrh	r3, [r7, #2]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d102      	bne.n	80046ac <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046aa:	e0b6      	b.n	800481a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d003      	beq.n	80046c0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2205      	movs	r2, #5
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	887a      	ldrh	r2, [r7, #2]
 80046d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	887a      	ldrh	r2, [r7, #2]
 80046d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	887a      	ldrh	r2, [r7, #2]
 80046e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d108      	bne.n	8004714 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004706:	4a49      	ldr	r2, [pc, #292]	; (800482c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	4a48      	ldr	r2, [pc, #288]	; (8004830 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004710:	63da      	str	r2, [r3, #60]	; 0x3c
 8004712:	e007      	b.n	8004724 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004718:	4a46      	ldr	r2, [pc, #280]	; (8004834 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800471a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004720:	4a45      	ldr	r2, [pc, #276]	; (8004838 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8004722:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004728:	4a44      	ldr	r2, [pc, #272]	; (800483c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800472a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004730:	2200      	movs	r2, #0
 8004732:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	4619      	mov	r1, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800474c:	f7fe fa08 	bl	8002b60 <HAL_DMA_Start_IT>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f043 0210 	orr.w	r2, r3, #16
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800476e:	e054      	b.n	800481a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004784:	2200      	movs	r2, #0
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478c:	2200      	movs	r2, #0
 800478e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004794:	2200      	movs	r2, #0
 8004796:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479c:	2200      	movs	r2, #0
 800479e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	4619      	mov	r1, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047b8:	f7fe f9d2 	bl	8002b60 <HAL_DMA_Start_IT>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	f043 0210 	orr.w	r2, r3, #16
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80047da:	e01e      	b.n	800481a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d007      	beq.n	80047fa <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0220 	orr.w	r2, r2, #32
 8004808:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0202 	orr.w	r2, r2, #2
 8004818:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	08004bdd 	.word	0x08004bdd
 8004830:	08004aa5 	.word	0x08004aa5
 8004834:	08004bf9 	.word	0x08004bf9
 8004838:	08004b4d 	.word	0x08004b4d
 800483c:	08004c15 	.word	0x08004c15

08004840 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	099b      	lsrs	r3, r3, #6
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10f      	bne.n	8004884 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d004      	beq.n	8004884 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
    return;
 8004882:	e0d8      	b.n	8004a36 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_SPI_IRQHandler+0x66>
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	09db      	lsrs	r3, r3, #7
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
    return;
 80048a4:	e0c7      	b.n	8004a36 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10c      	bne.n	80048cc <HAL_SPI_IRQHandler+0x8c>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	099b      	lsrs	r3, r3, #6
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	0a1b      	lsrs	r3, r3, #8
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 80b5 	beq.w	8004a36 <HAL_SPI_IRQHandler+0x1f6>
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 80ae 	beq.w	8004a36 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d023      	beq.n	800492e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d011      	beq.n	8004916 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	f043 0204 	orr.w	r2, r3, #4
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	e00b      	b.n	800492e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	693b      	ldr	r3, [r7, #16]
        return;
 800492c:	e083      	b.n	8004a36 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d014      	beq.n	8004964 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	0a1b      	lsrs	r3, r3, #8
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00c      	beq.n	800498a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004974:	f043 0208 	orr.w	r2, r3, #8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	2b00      	cmp	r3, #0
 8004990:	d050      	beq.n	8004a34 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049a0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d104      	bne.n	80049be <HAL_SPI_IRQHandler+0x17e>
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d034      	beq.n	8004a28 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0203 	bic.w	r2, r2, #3
 80049cc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d011      	beq.n	80049fa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049da:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <HAL_SPI_IRQHandler+0x1fc>)
 80049dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe f914 	bl	8002c10 <HAL_DMA_Abort_IT>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a06:	4a0d      	ldr	r2, [pc, #52]	; (8004a3c <HAL_SPI_IRQHandler+0x1fc>)
 8004a08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe f8fe 	bl	8002c10 <HAL_DMA_Abort_IT>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004a26:	e003      	b.n	8004a30 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f831 	bl	8004a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a2e:	e000      	b.n	8004a32 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004a30:	bf00      	nop
    return;
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
  }
}
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	08004c55 	.word	0x08004c55

08004a40 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab2:	f7fd fe97 	bl	80027e4 <HAL_GetTick>
 8004ab6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac6:	d03b      	beq.n	8004b40 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0220 	bic.w	r2, r2, #32
 8004ad6:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10d      	bne.n	8004afc <SPI_DMAReceiveCplt+0x58>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ae8:	d108      	bne.n	8004afc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0203 	bic.w	r2, r2, #3
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	e007      	b.n	8004b0c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	2164      	movs	r1, #100	; 0x64
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 f91d 	bl	8004d50 <SPI_EndRxTransaction>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7ff ffa9 	bl	8004a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b3e:	e002      	b.n	8004b46 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ff7d 	bl	8004a40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b5a:	f7fd fe43 	bl	80027e4 <HAL_GetTick>
 8004b5e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6e:	d02f      	beq.n	8004bd0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0220 	bic.w	r2, r2, #32
 8004b7e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	2164      	movs	r1, #100	; 0x64
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f949 	bl	8004e1c <SPI_EndRxTxTransaction>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	f043 0220 	orr.w	r2, r3, #32
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0203 	bic.w	r2, r2, #3
 8004baa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff ff61 	bl	8004a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004bce:	e002      	b.n	8004bd6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7ff ff3f 	bl	8004a54 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff ff3c 	bl	8004a68 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7ff ff38 	bl	8004a7c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0203 	bic.w	r2, r2, #3
 8004c30:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	f043 0210 	orr.w	r2, r3, #16
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ff22 	bl	8004a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff ff0e 	bl	8004a90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c8c:	e04c      	b.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d048      	beq.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c96:	f7fd fda5 	bl	80027e4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d902      	bls.n	8004cac <SPI_WaitFlagStateUntilTimeout+0x30>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d13d      	bne.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cc4:	d111      	bne.n	8004cea <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cce:	d004      	beq.n	8004cda <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd8:	d107      	bne.n	8004cea <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf2:	d10f      	bne.n	8004d14 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e00f      	b.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d1a3      	bne.n	8004c8e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d64:	d111      	bne.n	8004d8a <SPI_EndRxTransaction+0x3a>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6e:	d004      	beq.n	8004d7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d78:	d107      	bne.n	8004d8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d92:	d12a      	bne.n	8004dea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9c:	d012      	beq.n	8004dc4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2200      	movs	r2, #0
 8004da6:	2180      	movs	r1, #128	; 0x80
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff ff67 	bl	8004c7c <SPI_WaitFlagStateUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02d      	beq.n	8004e10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e026      	b.n	8004e12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2101      	movs	r1, #1
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff ff54 	bl	8004c7c <SPI_WaitFlagStateUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01a      	beq.n	8004e10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e013      	b.n	8004e12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2200      	movs	r2, #0
 8004df2:	2101      	movs	r1, #1
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7ff ff41 	bl	8004c7c <SPI_WaitFlagStateUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e000      	b.n	8004e12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e28:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <SPI_EndRxTxTransaction+0x7c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <SPI_EndRxTxTransaction+0x80>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	0d5b      	lsrs	r3, r3, #21
 8004e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e38:	fb02 f303 	mul.w	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e46:	d112      	bne.n	8004e6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2180      	movs	r1, #128	; 0x80
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7ff ff12 	bl	8004c7c <SPI_WaitFlagStateUntilTimeout>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d016      	beq.n	8004e8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e00f      	b.n	8004e8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e84:	2b80      	cmp	r3, #128	; 0x80
 8004e86:	d0f2      	beq.n	8004e6e <SPI_EndRxTxTransaction+0x52>
 8004e88:	e000      	b.n	8004e8c <SPI_EndRxTxTransaction+0x70>
        break;
 8004e8a:	bf00      	nop
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000008 	.word	0x20000008
 8004e9c:	165e9f81 	.word	0x165e9f81

08004ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e01d      	b.n	8004eee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f815 	bl	8004ef6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f000 f968 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b06      	cmp	r3, #6
 8004f32:	d007      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d122      	bne.n	8004fae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d11b      	bne.n	8004fae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f06f 0202 	mvn.w	r2, #2
 8004f7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f8ee 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004f9a:	e005      	b.n	8004fa8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f8e0 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f8f1 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d122      	bne.n	8005002 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d11b      	bne.n	8005002 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f06f 0204 	mvn.w	r2, #4
 8004fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8c4 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004fee:	e005      	b.n	8004ffc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f8b6 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8c7 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d122      	bne.n	8005056 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b08      	cmp	r3, #8
 800501c:	d11b      	bne.n	8005056 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f06f 0208 	mvn.w	r2, #8
 8005026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2204      	movs	r2, #4
 800502c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f89a 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8005042:	e005      	b.n	8005050 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f88c 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f89d 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b10      	cmp	r3, #16
 8005062:	d122      	bne.n	80050aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b10      	cmp	r3, #16
 8005070:	d11b      	bne.n	80050aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f06f 0210 	mvn.w	r2, #16
 800507a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2208      	movs	r2, #8
 8005080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f870 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8005096:	e005      	b.n	80050a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f862 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f873 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d10e      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d107      	bne.n	80050d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f06f 0201 	mvn.w	r2, #1
 80050ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fc fff9 	bl	80020c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e0:	2b80      	cmp	r3, #128	; 0x80
 80050e2:	d10e      	bne.n	8005102 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d107      	bne.n	8005102 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f903 	bl	8005308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b40      	cmp	r3, #64	; 0x40
 800510e:	d10e      	bne.n	800512e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d107      	bne.n	800512e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f838 	bl	800519e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b20      	cmp	r3, #32
 800513a:	d10e      	bne.n	800515a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b20      	cmp	r3, #32
 8005148:	d107      	bne.n	800515a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f06f 0220 	mvn.w	r2, #32
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f8cd 	bl	80052f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a40      	ldr	r2, [pc, #256]	; (80052c8 <TIM_Base_SetConfig+0x114>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d00f      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3d      	ldr	r2, [pc, #244]	; (80052cc <TIM_Base_SetConfig+0x118>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3c      	ldr	r2, [pc, #240]	; (80052d0 <TIM_Base_SetConfig+0x11c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3b      	ldr	r2, [pc, #236]	; (80052d4 <TIM_Base_SetConfig+0x120>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3a      	ldr	r2, [pc, #232]	; (80052d8 <TIM_Base_SetConfig+0x124>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2f      	ldr	r2, [pc, #188]	; (80052c8 <TIM_Base_SetConfig+0x114>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005214:	d027      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2c      	ldr	r2, [pc, #176]	; (80052cc <TIM_Base_SetConfig+0x118>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d023      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2b      	ldr	r2, [pc, #172]	; (80052d0 <TIM_Base_SetConfig+0x11c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <TIM_Base_SetConfig+0x120>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <TIM_Base_SetConfig+0x124>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d017      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a28      	ldr	r2, [pc, #160]	; (80052dc <TIM_Base_SetConfig+0x128>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a27      	ldr	r2, [pc, #156]	; (80052e0 <TIM_Base_SetConfig+0x12c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <TIM_Base_SetConfig+0x130>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <TIM_Base_SetConfig+0x134>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a24      	ldr	r2, [pc, #144]	; (80052ec <TIM_Base_SetConfig+0x138>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <TIM_Base_SetConfig+0x13c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <TIM_Base_SetConfig+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_Base_SetConfig+0xf8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <TIM_Base_SetConfig+0x124>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d103      	bne.n	80052b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	615a      	str	r2, [r3, #20]
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40010400 	.word	0x40010400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800
 80052e8:	40001800 	.word	0x40001800
 80052ec:	40001c00 	.word	0x40001c00
 80052f0:	40002000 	.word	0x40002000

080052f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e03f      	b.n	80053ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc fff2 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2224      	movs	r2, #36	; 0x24
 800534c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800535e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fb75 	bl	8005a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d153      	bne.n	800547a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <HAL_UART_Transmit_DMA+0x26>
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e04c      	b.n	800547c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_UART_Transmit_DMA+0x38>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e045      	b.n	800547c <HAL_UART_Transmit_DMA+0xc4>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	88fa      	ldrh	r2, [r7, #6]
 8005408:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2221      	movs	r2, #33	; 0x21
 8005414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	4a19      	ldr	r2, [pc, #100]	; (8005484 <HAL_UART_Transmit_DMA+0xcc>)
 800541e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	4a18      	ldr	r2, [pc, #96]	; (8005488 <HAL_UART_Transmit_DMA+0xd0>)
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	4a17      	ldr	r2, [pc, #92]	; (800548c <HAL_UART_Transmit_DMA+0xd4>)
 800542e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	2200      	movs	r2, #0
 8005436:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005438:	f107 0308 	add.w	r3, r7, #8
 800543c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	6819      	ldr	r1, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3304      	adds	r3, #4
 800544c:	461a      	mov	r2, r3
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	f7fd fb86 	bl	8002b60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800545c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005474:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e000      	b.n	800547c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	080056e1 	.word	0x080056e1
 8005488:	08005733 	.word	0x08005733
 800548c:	0800574f 	.word	0x0800574f

08005490 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10d      	bne.n	80054e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_UART_IRQHandler+0x52>
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fa37 	bl	800594e <UART_Receive_IT>
      return;
 80054e0:	e0d1      	b.n	8005686 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80b0 	beq.w	800564a <HAL_UART_IRQHandler+0x1ba>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <HAL_UART_IRQHandler+0x70>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80a5 	beq.w	800564a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_UART_IRQHandler+0x90>
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005518:	f043 0201 	orr.w	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_UART_IRQHandler+0xb0>
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005538:	f043 0202 	orr.w	r2, r3, #2
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_UART_IRQHandler+0xd0>
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005558:	f043 0204 	orr.w	r2, r3, #4
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00f      	beq.n	800558a <HAL_UART_IRQHandler+0xfa>
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <HAL_UART_IRQHandler+0xee>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	f043 0208 	orr.w	r2, r3, #8
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d078      	beq.n	8005684 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	f003 0320 	and.w	r3, r3, #32
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <HAL_UART_IRQHandler+0x11c>
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f9d1 	bl	800594e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	2b40      	cmp	r3, #64	; 0x40
 80055b8:	bf0c      	ite	eq
 80055ba:	2301      	moveq	r3, #1
 80055bc:	2300      	movne	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_UART_IRQHandler+0x144>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d031      	beq.n	8005638 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f91a 	bl	800580e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	d123      	bne.n	8005630 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695a      	ldr	r2, [r3, #20]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d013      	beq.n	8005628 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	4a21      	ldr	r2, [pc, #132]	; (800568c <HAL_UART_IRQHandler+0x1fc>)
 8005606:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560c:	4618      	mov	r0, r3
 800560e:	f7fd faff 	bl	8002c10 <HAL_DMA_Abort_IT>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d016      	beq.n	8005646 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005622:	4610      	mov	r0, r2
 8005624:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005626:	e00e      	b.n	8005646 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f84f 	bl	80056cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800562e:	e00a      	b.n	8005646 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f84b 	bl	80056cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005636:	e006      	b.n	8005646 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f847 	bl	80056cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005644:	e01e      	b.n	8005684 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005646:	bf00      	nop
    return;
 8005648:	e01c      	b.n	8005684 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_UART_IRQHandler+0x1d6>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f907 	bl	8005872 <UART_Transmit_IT>
    return;
 8005664:	e00f      	b.n	8005686 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_UART_IRQHandler+0x1f6>
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f94f 	bl	800591e <UART_EndTransmit_IT>
    return;
 8005680:	bf00      	nop
 8005682:	e000      	b.n	8005686 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005684:	bf00      	nop
  }
}
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	0800584b 	.word	0x0800584b

08005690 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d113      	bne.n	8005724 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005710:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68da      	ldr	r2, [r3, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005720:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005722:	e002      	b.n	800572a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff ffb3 	bl	8005690 <HAL_UART_TxCpltCallback>
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff ffaf 	bl	80056a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	bf0c      	ite	eq
 800576e:	2301      	moveq	r3, #1
 8005770:	2300      	movne	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b21      	cmp	r3, #33	; 0x21
 8005780:	d108      	bne.n	8005794 <UART_DMAError+0x46>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800578e:	68b8      	ldr	r0, [r7, #8]
 8005790:	f000 f827 	bl	80057e2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	bf0c      	ite	eq
 80057a2:	2301      	moveq	r3, #1
 80057a4:	2300      	movne	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b22      	cmp	r3, #34	; 0x22
 80057b4:	d108      	bne.n	80057c8 <UART_DMAError+0x7a>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2200      	movs	r2, #0
 80057c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80057c2:	68b8      	ldr	r0, [r7, #8]
 80057c4:	f000 f823 	bl	800580e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	f043 0210 	orr.w	r2, r3, #16
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057d4:	68b8      	ldr	r0, [r7, #8]
 80057d6:	f7ff ff79 	bl	80056cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80057f8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005824:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695a      	ldr	r2, [r3, #20]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff ff31 	bl	80056cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800586a:	bf00      	nop
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b21      	cmp	r3, #33	; 0x21
 8005884:	d144      	bne.n	8005910 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	d11a      	bne.n	80058c6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	1c9a      	adds	r2, r3, #2
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	621a      	str	r2, [r3, #32]
 80058b8:	e00e      	b.n	80058d8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	621a      	str	r2, [r3, #32]
 80058c4:	e008      	b.n	80058d8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	1c59      	adds	r1, r3, #1
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6211      	str	r1, [r2, #32]
 80058d0:	781a      	ldrb	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	4619      	mov	r1, r3
 80058e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10f      	bne.n	800590c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800590a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	e000      	b.n	8005912 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005910:	2302      	movs	r3, #2
  }
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005934:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fea6 	bl	8005690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b22      	cmp	r3, #34	; 0x22
 8005960:	d171      	bne.n	8005a46 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596a:	d123      	bne.n	80059b4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10e      	bne.n	8005998 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	1c9a      	adds	r2, r3, #2
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	629a      	str	r2, [r3, #40]	; 0x28
 8005996:	e029      	b.n	80059ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
 80059b2:	e01b      	b.n	80059ec <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6858      	ldr	r0, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	1c59      	adds	r1, r3, #1
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6291      	str	r1, [r2, #40]	; 0x28
 80059cc:	b2c2      	uxtb	r2, r0
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e00c      	b.n	80059ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	1c58      	adds	r0, r3, #1
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	6288      	str	r0, [r1, #40]	; 0x28
 80059e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	4619      	mov	r1, r3
 80059fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d120      	bne.n	8005a42 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0220 	bic.w	r2, r2, #32
 8005a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695a      	ldr	r2, [r3, #20]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fe3d 	bl	80056b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e002      	b.n	8005a48 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a92:	f023 030c 	bic.w	r3, r3, #12
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	68f9      	ldr	r1, [r7, #12]
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005abe:	f040 818b 	bne.w	8005dd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4ac1      	ldr	r2, [pc, #772]	; (8005dcc <UART_SetConfig+0x37c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d005      	beq.n	8005ad8 <UART_SetConfig+0x88>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4abf      	ldr	r2, [pc, #764]	; (8005dd0 <UART_SetConfig+0x380>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	f040 80bd 	bne.w	8005c52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ad8:	f7fe f926 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 8005adc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	461d      	mov	r5, r3
 8005ae2:	f04f 0600 	mov.w	r6, #0
 8005ae6:	46a8      	mov	r8, r5
 8005ae8:	46b1      	mov	r9, r6
 8005aea:	eb18 0308 	adds.w	r3, r8, r8
 8005aee:	eb49 0409 	adc.w	r4, r9, r9
 8005af2:	4698      	mov	r8, r3
 8005af4:	46a1      	mov	r9, r4
 8005af6:	eb18 0805 	adds.w	r8, r8, r5
 8005afa:	eb49 0906 	adc.w	r9, r9, r6
 8005afe:	f04f 0100 	mov.w	r1, #0
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b12:	4688      	mov	r8, r1
 8005b14:	4691      	mov	r9, r2
 8005b16:	eb18 0005 	adds.w	r0, r8, r5
 8005b1a:	eb49 0106 	adc.w	r1, r9, r6
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	461d      	mov	r5, r3
 8005b24:	f04f 0600 	mov.w	r6, #0
 8005b28:	196b      	adds	r3, r5, r5
 8005b2a:	eb46 0406 	adc.w	r4, r6, r6
 8005b2e:	461a      	mov	r2, r3
 8005b30:	4623      	mov	r3, r4
 8005b32:	f7fb f831 	bl	8000b98 <__aeabi_uldivmod>
 8005b36:	4603      	mov	r3, r0
 8005b38:	460c      	mov	r4, r1
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	4ba5      	ldr	r3, [pc, #660]	; (8005dd4 <UART_SetConfig+0x384>)
 8005b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	461d      	mov	r5, r3
 8005b4c:	f04f 0600 	mov.w	r6, #0
 8005b50:	46a9      	mov	r9, r5
 8005b52:	46b2      	mov	sl, r6
 8005b54:	eb19 0309 	adds.w	r3, r9, r9
 8005b58:	eb4a 040a 	adc.w	r4, sl, sl
 8005b5c:	4699      	mov	r9, r3
 8005b5e:	46a2      	mov	sl, r4
 8005b60:	eb19 0905 	adds.w	r9, r9, r5
 8005b64:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b68:	f04f 0100 	mov.w	r1, #0
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b7c:	4689      	mov	r9, r1
 8005b7e:	4692      	mov	sl, r2
 8005b80:	eb19 0005 	adds.w	r0, r9, r5
 8005b84:	eb4a 0106 	adc.w	r1, sl, r6
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	461d      	mov	r5, r3
 8005b8e:	f04f 0600 	mov.w	r6, #0
 8005b92:	196b      	adds	r3, r5, r5
 8005b94:	eb46 0406 	adc.w	r4, r6, r6
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4623      	mov	r3, r4
 8005b9c:	f7fa fffc 	bl	8000b98 <__aeabi_uldivmod>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4b8b      	ldr	r3, [pc, #556]	; (8005dd4 <UART_SetConfig+0x384>)
 8005ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	2164      	movs	r1, #100	; 0x64
 8005bb0:	fb01 f303 	mul.w	r3, r1, r3
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	3332      	adds	r3, #50	; 0x32
 8005bba:	4a86      	ldr	r2, [pc, #536]	; (8005dd4 <UART_SetConfig+0x384>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bc8:	4498      	add	r8, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	461d      	mov	r5, r3
 8005bce:	f04f 0600 	mov.w	r6, #0
 8005bd2:	46a9      	mov	r9, r5
 8005bd4:	46b2      	mov	sl, r6
 8005bd6:	eb19 0309 	adds.w	r3, r9, r9
 8005bda:	eb4a 040a 	adc.w	r4, sl, sl
 8005bde:	4699      	mov	r9, r3
 8005be0:	46a2      	mov	sl, r4
 8005be2:	eb19 0905 	adds.w	r9, r9, r5
 8005be6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bea:	f04f 0100 	mov.w	r1, #0
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bfe:	4689      	mov	r9, r1
 8005c00:	4692      	mov	sl, r2
 8005c02:	eb19 0005 	adds.w	r0, r9, r5
 8005c06:	eb4a 0106 	adc.w	r1, sl, r6
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	461d      	mov	r5, r3
 8005c10:	f04f 0600 	mov.w	r6, #0
 8005c14:	196b      	adds	r3, r5, r5
 8005c16:	eb46 0406 	adc.w	r4, r6, r6
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4623      	mov	r3, r4
 8005c1e:	f7fa ffbb 	bl	8000b98 <__aeabi_uldivmod>
 8005c22:	4603      	mov	r3, r0
 8005c24:	460c      	mov	r4, r1
 8005c26:	461a      	mov	r2, r3
 8005c28:	4b6a      	ldr	r3, [pc, #424]	; (8005dd4 <UART_SetConfig+0x384>)
 8005c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	2164      	movs	r1, #100	; 0x64
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	3332      	adds	r3, #50	; 0x32
 8005c3c:	4a65      	ldr	r2, [pc, #404]	; (8005dd4 <UART_SetConfig+0x384>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	f003 0207 	and.w	r2, r3, #7
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4442      	add	r2, r8
 8005c4e:	609a      	str	r2, [r3, #8]
 8005c50:	e26f      	b.n	8006132 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c52:	f7fe f855 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8005c56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	f04f 0600 	mov.w	r6, #0
 8005c60:	46a8      	mov	r8, r5
 8005c62:	46b1      	mov	r9, r6
 8005c64:	eb18 0308 	adds.w	r3, r8, r8
 8005c68:	eb49 0409 	adc.w	r4, r9, r9
 8005c6c:	4698      	mov	r8, r3
 8005c6e:	46a1      	mov	r9, r4
 8005c70:	eb18 0805 	adds.w	r8, r8, r5
 8005c74:	eb49 0906 	adc.w	r9, r9, r6
 8005c78:	f04f 0100 	mov.w	r1, #0
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c8c:	4688      	mov	r8, r1
 8005c8e:	4691      	mov	r9, r2
 8005c90:	eb18 0005 	adds.w	r0, r8, r5
 8005c94:	eb49 0106 	adc.w	r1, r9, r6
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	461d      	mov	r5, r3
 8005c9e:	f04f 0600 	mov.w	r6, #0
 8005ca2:	196b      	adds	r3, r5, r5
 8005ca4:	eb46 0406 	adc.w	r4, r6, r6
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4623      	mov	r3, r4
 8005cac:	f7fa ff74 	bl	8000b98 <__aeabi_uldivmod>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	4b47      	ldr	r3, [pc, #284]	; (8005dd4 <UART_SetConfig+0x384>)
 8005cb8:	fba3 2302 	umull	r2, r3, r3, r2
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	461d      	mov	r5, r3
 8005cc6:	f04f 0600 	mov.w	r6, #0
 8005cca:	46a9      	mov	r9, r5
 8005ccc:	46b2      	mov	sl, r6
 8005cce:	eb19 0309 	adds.w	r3, r9, r9
 8005cd2:	eb4a 040a 	adc.w	r4, sl, sl
 8005cd6:	4699      	mov	r9, r3
 8005cd8:	46a2      	mov	sl, r4
 8005cda:	eb19 0905 	adds.w	r9, r9, r5
 8005cde:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ce2:	f04f 0100 	mov.w	r1, #0
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cf6:	4689      	mov	r9, r1
 8005cf8:	4692      	mov	sl, r2
 8005cfa:	eb19 0005 	adds.w	r0, r9, r5
 8005cfe:	eb4a 0106 	adc.w	r1, sl, r6
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	461d      	mov	r5, r3
 8005d08:	f04f 0600 	mov.w	r6, #0
 8005d0c:	196b      	adds	r3, r5, r5
 8005d0e:	eb46 0406 	adc.w	r4, r6, r6
 8005d12:	461a      	mov	r2, r3
 8005d14:	4623      	mov	r3, r4
 8005d16:	f7fa ff3f 	bl	8000b98 <__aeabi_uldivmod>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	461a      	mov	r2, r3
 8005d20:	4b2c      	ldr	r3, [pc, #176]	; (8005dd4 <UART_SetConfig+0x384>)
 8005d22:	fba3 1302 	umull	r1, r3, r3, r2
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2164      	movs	r1, #100	; 0x64
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	3332      	adds	r3, #50	; 0x32
 8005d34:	4a27      	ldr	r2, [pc, #156]	; (8005dd4 <UART_SetConfig+0x384>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d42:	4498      	add	r8, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	461d      	mov	r5, r3
 8005d48:	f04f 0600 	mov.w	r6, #0
 8005d4c:	46a9      	mov	r9, r5
 8005d4e:	46b2      	mov	sl, r6
 8005d50:	eb19 0309 	adds.w	r3, r9, r9
 8005d54:	eb4a 040a 	adc.w	r4, sl, sl
 8005d58:	4699      	mov	r9, r3
 8005d5a:	46a2      	mov	sl, r4
 8005d5c:	eb19 0905 	adds.w	r9, r9, r5
 8005d60:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d64:	f04f 0100 	mov.w	r1, #0
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d78:	4689      	mov	r9, r1
 8005d7a:	4692      	mov	sl, r2
 8005d7c:	eb19 0005 	adds.w	r0, r9, r5
 8005d80:	eb4a 0106 	adc.w	r1, sl, r6
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	461d      	mov	r5, r3
 8005d8a:	f04f 0600 	mov.w	r6, #0
 8005d8e:	196b      	adds	r3, r5, r5
 8005d90:	eb46 0406 	adc.w	r4, r6, r6
 8005d94:	461a      	mov	r2, r3
 8005d96:	4623      	mov	r3, r4
 8005d98:	f7fa fefe 	bl	8000b98 <__aeabi_uldivmod>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	461a      	mov	r2, r3
 8005da2:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <UART_SetConfig+0x384>)
 8005da4:	fba3 1302 	umull	r1, r3, r3, r2
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	2164      	movs	r1, #100	; 0x64
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	3332      	adds	r3, #50	; 0x32
 8005db6:	4a07      	ldr	r2, [pc, #28]	; (8005dd4 <UART_SetConfig+0x384>)
 8005db8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	f003 0207 	and.w	r2, r3, #7
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4442      	add	r2, r8
 8005dc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005dca:	e1b2      	b.n	8006132 <UART_SetConfig+0x6e2>
 8005dcc:	40011000 	.word	0x40011000
 8005dd0:	40011400 	.word	0x40011400
 8005dd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4ad7      	ldr	r2, [pc, #860]	; (800613c <UART_SetConfig+0x6ec>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d005      	beq.n	8005dee <UART_SetConfig+0x39e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4ad6      	ldr	r2, [pc, #856]	; (8006140 <UART_SetConfig+0x6f0>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	f040 80d1 	bne.w	8005f90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dee:	f7fd ff9b 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 8005df2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	469a      	mov	sl, r3
 8005df8:	f04f 0b00 	mov.w	fp, #0
 8005dfc:	46d0      	mov	r8, sl
 8005dfe:	46d9      	mov	r9, fp
 8005e00:	eb18 0308 	adds.w	r3, r8, r8
 8005e04:	eb49 0409 	adc.w	r4, r9, r9
 8005e08:	4698      	mov	r8, r3
 8005e0a:	46a1      	mov	r9, r4
 8005e0c:	eb18 080a 	adds.w	r8, r8, sl
 8005e10:	eb49 090b 	adc.w	r9, r9, fp
 8005e14:	f04f 0100 	mov.w	r1, #0
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e28:	4688      	mov	r8, r1
 8005e2a:	4691      	mov	r9, r2
 8005e2c:	eb1a 0508 	adds.w	r5, sl, r8
 8005e30:	eb4b 0609 	adc.w	r6, fp, r9
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	f04f 0400 	mov.w	r4, #0
 8005e46:	0094      	lsls	r4, r2, #2
 8005e48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e4c:	008b      	lsls	r3, r1, #2
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4623      	mov	r3, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	4631      	mov	r1, r6
 8005e56:	f7fa fe9f 	bl	8000b98 <__aeabi_uldivmod>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4bb8      	ldr	r3, [pc, #736]	; (8006144 <UART_SetConfig+0x6f4>)
 8005e62:	fba3 2302 	umull	r2, r3, r3, r2
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	469b      	mov	fp, r3
 8005e70:	f04f 0c00 	mov.w	ip, #0
 8005e74:	46d9      	mov	r9, fp
 8005e76:	46e2      	mov	sl, ip
 8005e78:	eb19 0309 	adds.w	r3, r9, r9
 8005e7c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e80:	4699      	mov	r9, r3
 8005e82:	46a2      	mov	sl, r4
 8005e84:	eb19 090b 	adds.w	r9, r9, fp
 8005e88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e8c:	f04f 0100 	mov.w	r1, #0
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ea0:	4689      	mov	r9, r1
 8005ea2:	4692      	mov	sl, r2
 8005ea4:	eb1b 0509 	adds.w	r5, fp, r9
 8005ea8:	eb4c 060a 	adc.w	r6, ip, sl
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	f04f 0300 	mov.w	r3, #0
 8005eba:	f04f 0400 	mov.w	r4, #0
 8005ebe:	0094      	lsls	r4, r2, #2
 8005ec0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ec4:	008b      	lsls	r3, r1, #2
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4623      	mov	r3, r4
 8005eca:	4628      	mov	r0, r5
 8005ecc:	4631      	mov	r1, r6
 8005ece:	f7fa fe63 	bl	8000b98 <__aeabi_uldivmod>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	4b9a      	ldr	r3, [pc, #616]	; (8006144 <UART_SetConfig+0x6f4>)
 8005eda:	fba3 1302 	umull	r1, r3, r3, r2
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	2164      	movs	r1, #100	; 0x64
 8005ee2:	fb01 f303 	mul.w	r3, r1, r3
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	3332      	adds	r3, #50	; 0x32
 8005eec:	4a95      	ldr	r2, [pc, #596]	; (8006144 <UART_SetConfig+0x6f4>)
 8005eee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ef8:	4498      	add	r8, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	469b      	mov	fp, r3
 8005efe:	f04f 0c00 	mov.w	ip, #0
 8005f02:	46d9      	mov	r9, fp
 8005f04:	46e2      	mov	sl, ip
 8005f06:	eb19 0309 	adds.w	r3, r9, r9
 8005f0a:	eb4a 040a 	adc.w	r4, sl, sl
 8005f0e:	4699      	mov	r9, r3
 8005f10:	46a2      	mov	sl, r4
 8005f12:	eb19 090b 	adds.w	r9, r9, fp
 8005f16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f1a:	f04f 0100 	mov.w	r1, #0
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f2e:	4689      	mov	r9, r1
 8005f30:	4692      	mov	sl, r2
 8005f32:	eb1b 0509 	adds.w	r5, fp, r9
 8005f36:	eb4c 060a 	adc.w	r6, ip, sl
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	f04f 0400 	mov.w	r4, #0
 8005f4c:	0094      	lsls	r4, r2, #2
 8005f4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f52:	008b      	lsls	r3, r1, #2
 8005f54:	461a      	mov	r2, r3
 8005f56:	4623      	mov	r3, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	f7fa fe1c 	bl	8000b98 <__aeabi_uldivmod>
 8005f60:	4603      	mov	r3, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	461a      	mov	r2, r3
 8005f66:	4b77      	ldr	r3, [pc, #476]	; (8006144 <UART_SetConfig+0x6f4>)
 8005f68:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	2164      	movs	r1, #100	; 0x64
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	3332      	adds	r3, #50	; 0x32
 8005f7a:	4a72      	ldr	r2, [pc, #456]	; (8006144 <UART_SetConfig+0x6f4>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	f003 020f 	and.w	r2, r3, #15
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4442      	add	r2, r8
 8005f8c:	609a      	str	r2, [r3, #8]
 8005f8e:	e0d0      	b.n	8006132 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f90:	f7fd feb6 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8005f94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	469a      	mov	sl, r3
 8005f9a:	f04f 0b00 	mov.w	fp, #0
 8005f9e:	46d0      	mov	r8, sl
 8005fa0:	46d9      	mov	r9, fp
 8005fa2:	eb18 0308 	adds.w	r3, r8, r8
 8005fa6:	eb49 0409 	adc.w	r4, r9, r9
 8005faa:	4698      	mov	r8, r3
 8005fac:	46a1      	mov	r9, r4
 8005fae:	eb18 080a 	adds.w	r8, r8, sl
 8005fb2:	eb49 090b 	adc.w	r9, r9, fp
 8005fb6:	f04f 0100 	mov.w	r1, #0
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fca:	4688      	mov	r8, r1
 8005fcc:	4691      	mov	r9, r2
 8005fce:	eb1a 0508 	adds.w	r5, sl, r8
 8005fd2:	eb4b 0609 	adc.w	r6, fp, r9
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	f04f 0400 	mov.w	r4, #0
 8005fe8:	0094      	lsls	r4, r2, #2
 8005fea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fee:	008b      	lsls	r3, r1, #2
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	f7fa fdce 	bl	8000b98 <__aeabi_uldivmod>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	460c      	mov	r4, r1
 8006000:	461a      	mov	r2, r3
 8006002:	4b50      	ldr	r3, [pc, #320]	; (8006144 <UART_SetConfig+0x6f4>)
 8006004:	fba3 2302 	umull	r2, r3, r3, r2
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	469b      	mov	fp, r3
 8006012:	f04f 0c00 	mov.w	ip, #0
 8006016:	46d9      	mov	r9, fp
 8006018:	46e2      	mov	sl, ip
 800601a:	eb19 0309 	adds.w	r3, r9, r9
 800601e:	eb4a 040a 	adc.w	r4, sl, sl
 8006022:	4699      	mov	r9, r3
 8006024:	46a2      	mov	sl, r4
 8006026:	eb19 090b 	adds.w	r9, r9, fp
 800602a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800602e:	f04f 0100 	mov.w	r1, #0
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800603a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800603e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006042:	4689      	mov	r9, r1
 8006044:	4692      	mov	sl, r2
 8006046:	eb1b 0509 	adds.w	r5, fp, r9
 800604a:	eb4c 060a 	adc.w	r6, ip, sl
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4619      	mov	r1, r3
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	f04f 0400 	mov.w	r4, #0
 8006060:	0094      	lsls	r4, r2, #2
 8006062:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006066:	008b      	lsls	r3, r1, #2
 8006068:	461a      	mov	r2, r3
 800606a:	4623      	mov	r3, r4
 800606c:	4628      	mov	r0, r5
 800606e:	4631      	mov	r1, r6
 8006070:	f7fa fd92 	bl	8000b98 <__aeabi_uldivmod>
 8006074:	4603      	mov	r3, r0
 8006076:	460c      	mov	r4, r1
 8006078:	461a      	mov	r2, r3
 800607a:	4b32      	ldr	r3, [pc, #200]	; (8006144 <UART_SetConfig+0x6f4>)
 800607c:	fba3 1302 	umull	r1, r3, r3, r2
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	2164      	movs	r1, #100	; 0x64
 8006084:	fb01 f303 	mul.w	r3, r1, r3
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	3332      	adds	r3, #50	; 0x32
 800608e:	4a2d      	ldr	r2, [pc, #180]	; (8006144 <UART_SetConfig+0x6f4>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800609a:	4498      	add	r8, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	469b      	mov	fp, r3
 80060a0:	f04f 0c00 	mov.w	ip, #0
 80060a4:	46d9      	mov	r9, fp
 80060a6:	46e2      	mov	sl, ip
 80060a8:	eb19 0309 	adds.w	r3, r9, r9
 80060ac:	eb4a 040a 	adc.w	r4, sl, sl
 80060b0:	4699      	mov	r9, r3
 80060b2:	46a2      	mov	sl, r4
 80060b4:	eb19 090b 	adds.w	r9, r9, fp
 80060b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060bc:	f04f 0100 	mov.w	r1, #0
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060d0:	4689      	mov	r9, r1
 80060d2:	4692      	mov	sl, r2
 80060d4:	eb1b 0509 	adds.w	r5, fp, r9
 80060d8:	eb4c 060a 	adc.w	r6, ip, sl
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4619      	mov	r1, r3
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	f04f 0400 	mov.w	r4, #0
 80060ee:	0094      	lsls	r4, r2, #2
 80060f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060f4:	008b      	lsls	r3, r1, #2
 80060f6:	461a      	mov	r2, r3
 80060f8:	4623      	mov	r3, r4
 80060fa:	4628      	mov	r0, r5
 80060fc:	4631      	mov	r1, r6
 80060fe:	f7fa fd4b 	bl	8000b98 <__aeabi_uldivmod>
 8006102:	4603      	mov	r3, r0
 8006104:	460c      	mov	r4, r1
 8006106:	461a      	mov	r2, r3
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <UART_SetConfig+0x6f4>)
 800610a:	fba3 1302 	umull	r1, r3, r3, r2
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	2164      	movs	r1, #100	; 0x64
 8006112:	fb01 f303 	mul.w	r3, r1, r3
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	3332      	adds	r3, #50	; 0x32
 800611c:	4a09      	ldr	r2, [pc, #36]	; (8006144 <UART_SetConfig+0x6f4>)
 800611e:	fba2 2303 	umull	r2, r3, r2, r3
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	f003 020f 	and.w	r2, r3, #15
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4442      	add	r2, r8
 800612e:	609a      	str	r2, [r3, #8]
}
 8006130:	e7ff      	b.n	8006132 <UART_SetConfig+0x6e2>
 8006132:	bf00      	nop
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613c:	40011000 	.word	0x40011000
 8006140:	40011400 	.word	0x40011400
 8006144:	51eb851f 	.word	0x51eb851f

08006148 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800614c:	bf00      	nop
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
	...

08006158 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800615e:	f3ef 8305 	mrs	r3, IPSR
 8006162:	60bb      	str	r3, [r7, #8]
  return(result);
 8006164:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800616a:	f3ef 8310 	mrs	r3, PRIMASK
 800616e:	607b      	str	r3, [r7, #4]
  return(result);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d105      	bne.n	8006182 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006176:	f3ef 8311 	mrs	r3, BASEPRI
 800617a:	603b      	str	r3, [r7, #0]
  return(result);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <osKernelInitialize+0x3a>
 8006182:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <osKernelInitialize+0x64>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d103      	bne.n	8006192 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800618a:	f06f 0305 	mvn.w	r3, #5
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	e00c      	b.n	80061ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006192:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <osKernelInitialize+0x64>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d105      	bne.n	80061a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800619a:	4b08      	ldr	r3, [pc, #32]	; (80061bc <osKernelInitialize+0x64>)
 800619c:	2201      	movs	r2, #1
 800619e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e002      	b.n	80061ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295
 80061aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	2000009c 	.word	0x2000009c

080061c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c6:	f3ef 8305 	mrs	r3, IPSR
 80061ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80061cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10f      	bne.n	80061f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d2:	f3ef 8310 	mrs	r3, PRIMASK
 80061d6:	607b      	str	r3, [r7, #4]
  return(result);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d105      	bne.n	80061ea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061de:	f3ef 8311 	mrs	r3, BASEPRI
 80061e2:	603b      	str	r3, [r7, #0]
  return(result);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <osKernelStart+0x3a>
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <osKernelStart+0x68>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d103      	bne.n	80061fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80061f2:	f06f 0305 	mvn.w	r3, #5
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	e010      	b.n	800621c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061fa:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <osKernelStart+0x68>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d109      	bne.n	8006216 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006202:	f7ff ffa1 	bl	8006148 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <osKernelStart+0x68>)
 8006208:	2202      	movs	r2, #2
 800620a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800620c:	f001 fa9a 	bl	8007744 <vTaskStartScheduler>
      stat = osOK;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e002      	b.n	800621c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006216:	f04f 33ff 	mov.w	r3, #4294967295
 800621a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800621c:	68fb      	ldr	r3, [r7, #12]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	2000009c 	.word	0x2000009c

0800622c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b090      	sub	sp, #64	; 0x40
 8006230:	af04      	add	r7, sp, #16
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800623c:	f3ef 8305 	mrs	r3, IPSR
 8006240:	61fb      	str	r3, [r7, #28]
  return(result);
 8006242:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006244:	2b00      	cmp	r3, #0
 8006246:	f040 808f 	bne.w	8006368 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800624a:	f3ef 8310 	mrs	r3, PRIMASK
 800624e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d105      	bne.n	8006262 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006256:	f3ef 8311 	mrs	r3, BASEPRI
 800625a:	617b      	str	r3, [r7, #20]
  return(result);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <osThreadNew+0x3e>
 8006262:	4b44      	ldr	r3, [pc, #272]	; (8006374 <osThreadNew+0x148>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b02      	cmp	r3, #2
 8006268:	d07e      	beq.n	8006368 <osThreadNew+0x13c>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d07b      	beq.n	8006368 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006270:	2380      	movs	r3, #128	; 0x80
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006274:	2318      	movs	r3, #24
 8006276:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800627c:	f04f 33ff 	mov.w	r3, #4294967295
 8006280:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d045      	beq.n	8006314 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <osThreadNew+0x6a>
        name = attr->name;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <osThreadNew+0x90>
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	2b38      	cmp	r3, #56	; 0x38
 80062ae:	d805      	bhi.n	80062bc <osThreadNew+0x90>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <osThreadNew+0x94>
        return (NULL);
 80062bc:	2300      	movs	r3, #0
 80062be:	e054      	b.n	800636a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	089b      	lsrs	r3, r3, #2
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00e      	beq.n	80062f6 <osThreadNew+0xca>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b5b      	cmp	r3, #91	; 0x5b
 80062de:	d90a      	bls.n	80062f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d006      	beq.n	80062f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <osThreadNew+0xca>
        mem = 1;
 80062f0:	2301      	movs	r3, #1
 80062f2:	623b      	str	r3, [r7, #32]
 80062f4:	e010      	b.n	8006318 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10c      	bne.n	8006318 <osThreadNew+0xec>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <osThreadNew+0xec>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d104      	bne.n	8006318 <osThreadNew+0xec>
          mem = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	e001      	b.n	8006318 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d110      	bne.n	8006340 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006326:	9202      	str	r2, [sp, #8]
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f001 f833 	bl	80073a0 <xTaskCreateStatic>
 800633a:	4603      	mov	r3, r0
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	e013      	b.n	8006368 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d110      	bne.n	8006368 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	b29a      	uxth	r2, r3
 800634a:	f107 0310 	add.w	r3, r7, #16
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f001 f87b 	bl	8007454 <xTaskCreate>
 800635e:	4603      	mov	r3, r0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d001      	beq.n	8006368 <osThreadNew+0x13c>
          hTask = NULL;
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006368:	693b      	ldr	r3, [r7, #16]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3730      	adds	r7, #48	; 0x30
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	2000009c 	.word	0x2000009c

08006378 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006380:	f3ef 8305 	mrs	r3, IPSR
 8006384:	613b      	str	r3, [r7, #16]
  return(result);
 8006386:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10f      	bne.n	80063ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800638c:	f3ef 8310 	mrs	r3, PRIMASK
 8006390:	60fb      	str	r3, [r7, #12]
  return(result);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d105      	bne.n	80063a4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006398:	f3ef 8311 	mrs	r3, BASEPRI
 800639c:	60bb      	str	r3, [r7, #8]
  return(result);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <osDelay+0x3c>
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <osDelay+0x58>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d103      	bne.n	80063b4 <osDelay+0x3c>
    stat = osErrorISR;
 80063ac:	f06f 0305 	mvn.w	r3, #5
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	e007      	b.n	80063c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 f98c 	bl	80076dc <vTaskDelay>
    }
  }

  return (stat);
 80063c4:	697b      	ldr	r3, [r7, #20]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	2000009c 	.word	0x2000009c

080063d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	; 0x30
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e4:	f3ef 8305 	mrs	r3, IPSR
 80063e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80063ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d170      	bne.n	80064d2 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f0:	f3ef 8310 	mrs	r3, PRIMASK
 80063f4:	617b      	str	r3, [r7, #20]
  return(result);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d105      	bne.n	8006408 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006400:	613b      	str	r3, [r7, #16]
  return(result);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <osMessageQueueNew+0x3c>
 8006408:	4b34      	ldr	r3, [pc, #208]	; (80064dc <osMessageQueueNew+0x108>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d060      	beq.n	80064d2 <osMessageQueueNew+0xfe>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d05d      	beq.n	80064d2 <osMessageQueueNew+0xfe>
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d05a      	beq.n	80064d2 <osMessageQueueNew+0xfe>
    mem = -1;
 800641c:	f04f 33ff 	mov.w	r3, #4294967295
 8006420:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d029      	beq.n	800647c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d012      	beq.n	8006456 <osMessageQueueNew+0x82>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b4f      	cmp	r3, #79	; 0x4f
 8006436:	d90e      	bls.n	8006456 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695a      	ldr	r2, [r3, #20]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	fb01 f303 	mul.w	r3, r1, r3
 800644c:	429a      	cmp	r2, r3
 800644e:	d302      	bcc.n	8006456 <osMessageQueueNew+0x82>
        mem = 1;
 8006450:	2301      	movs	r3, #1
 8006452:	623b      	str	r3, [r7, #32]
 8006454:	e014      	b.n	8006480 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d110      	bne.n	8006480 <osMessageQueueNew+0xac>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10c      	bne.n	8006480 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800646a:	2b00      	cmp	r3, #0
 800646c:	d108      	bne.n	8006480 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <osMessageQueueNew+0xac>
          mem = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	e001      	b.n	8006480 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d10c      	bne.n	80064a0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6899      	ldr	r1, [r3, #8]
 800648e:	2300      	movs	r3, #0
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	460b      	mov	r3, r1
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 fa58 	bl	800694c <xQueueGenericCreateStatic>
 800649c:	6278      	str	r0, [r7, #36]	; 0x24
 800649e:	e008      	b.n	80064b2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d105      	bne.n	80064b2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80064a6:	2200      	movs	r2, #0
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 fac1 	bl	8006a32 <xQueueGenericCreate>
 80064b0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00c      	beq.n	80064d2 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <osMessageQueueNew+0xf2>
        name = attr->name;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	61fb      	str	r3, [r7, #28]
 80064c4:	e001      	b.n	80064ca <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80064ca:	69f9      	ldr	r1, [r7, #28]
 80064cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064ce:	f000 ff0b 	bl	80072e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3728      	adds	r7, #40	; 0x28
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	2000009c 	.word	0x2000009c

080064e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	4613      	mov	r3, r2
 80064ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064f8:	f3ef 8305 	mrs	r3, IPSR
 80064fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80064fe:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10f      	bne.n	8006524 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006504:	f3ef 8310 	mrs	r3, PRIMASK
 8006508:	61bb      	str	r3, [r7, #24]
  return(result);
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d105      	bne.n	800651c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006510:	f3ef 8311 	mrs	r3, BASEPRI
 8006514:	617b      	str	r3, [r7, #20]
  return(result);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d02c      	beq.n	8006576 <osMessageQueuePut+0x96>
 800651c:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <osMessageQueuePut+0xe0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b02      	cmp	r3, #2
 8006522:	d128      	bne.n	8006576 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <osMessageQueuePut+0x56>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <osMessageQueuePut+0x56>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006536:	f06f 0303 	mvn.w	r3, #3
 800653a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800653c:	e039      	b.n	80065b2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800653e:	2300      	movs	r3, #0
 8006540:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006542:	f107 0210 	add.w	r2, r7, #16
 8006546:	2300      	movs	r3, #0
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	6a38      	ldr	r0, [r7, #32]
 800654c:	f000 fbce 	bl	8006cec <xQueueGenericSendFromISR>
 8006550:	4603      	mov	r3, r0
 8006552:	2b01      	cmp	r3, #1
 8006554:	d003      	beq.n	800655e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006556:	f06f 0302 	mvn.w	r3, #2
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800655c:	e029      	b.n	80065b2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d026      	beq.n	80065b2 <osMessageQueuePut+0xd2>
 8006564:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <osMessageQueuePut+0xe4>)
 8006566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006574:	e01d      	b.n	80065b2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <osMessageQueuePut+0xa2>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d103      	bne.n	800658a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006582:	f06f 0303 	mvn.w	r3, #3
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
 8006588:	e014      	b.n	80065b4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800658a:	2300      	movs	r3, #0
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	6a38      	ldr	r0, [r7, #32]
 8006592:	f000 fab1 	bl	8006af8 <xQueueGenericSend>
 8006596:	4603      	mov	r3, r0
 8006598:	2b01      	cmp	r3, #1
 800659a:	d00b      	beq.n	80065b4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80065a2:	f06f 0301 	mvn.w	r3, #1
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
 80065a8:	e004      	b.n	80065b4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80065aa:	f06f 0302 	mvn.w	r3, #2
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
 80065b0:	e000      	b.n	80065b4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065b2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3728      	adds	r7, #40	; 0x28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	2000009c 	.word	0x2000009c
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80065da:	2300      	movs	r3, #0
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065de:	f3ef 8305 	mrs	r3, IPSR
 80065e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80065e4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ea:	f3ef 8310 	mrs	r3, PRIMASK
 80065ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d105      	bne.n	8006602 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065f6:	f3ef 8311 	mrs	r3, BASEPRI
 80065fa:	617b      	str	r3, [r7, #20]
  return(result);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d02c      	beq.n	800665c <osMessageQueueGet+0x94>
 8006602:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <osMessageQueueGet+0xdc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b02      	cmp	r3, #2
 8006608:	d128      	bne.n	800665c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <osMessageQueueGet+0x54>
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <osMessageQueueGet+0x54>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800661c:	f06f 0303 	mvn.w	r3, #3
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006622:	e038      	b.n	8006696 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006628:	f107 0310 	add.w	r3, r7, #16
 800662c:	461a      	mov	r2, r3
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	6a38      	ldr	r0, [r7, #32]
 8006632:	f000 fccb 	bl	8006fcc <xQueueReceiveFromISR>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d003      	beq.n	8006644 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800663c:	f06f 0302 	mvn.w	r3, #2
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006642:	e028      	b.n	8006696 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d025      	beq.n	8006696 <osMessageQueueGet+0xce>
 800664a:	4b17      	ldr	r3, [pc, #92]	; (80066a8 <osMessageQueueGet+0xe0>)
 800664c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800665a:	e01c      	b.n	8006696 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <osMessageQueueGet+0xa0>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006668:	f06f 0303 	mvn.w	r3, #3
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
 800666e:	e013      	b.n	8006698 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	6a38      	ldr	r0, [r7, #32]
 8006676:	f000 fbcd 	bl	8006e14 <xQueueReceive>
 800667a:	4603      	mov	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d00b      	beq.n	8006698 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006686:	f06f 0301 	mvn.w	r3, #1
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
 800668c:	e004      	b.n	8006698 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800668e:	f06f 0302 	mvn.w	r3, #2
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
 8006694:	e000      	b.n	8006698 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006696:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800669a:	4618      	mov	r0, r3
 800669c:	3728      	adds	r7, #40	; 0x28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	2000009c 	.word	0x2000009c
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a07      	ldr	r2, [pc, #28]	; (80066d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80066bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4a06      	ldr	r2, [pc, #24]	; (80066dc <vApplicationGetIdleTaskMemory+0x30>)
 80066c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2280      	movs	r2, #128	; 0x80
 80066c8:	601a      	str	r2, [r3, #0]
}
 80066ca:	bf00      	nop
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	200000a0 	.word	0x200000a0
 80066dc:	200000fc 	.word	0x200000fc

080066e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4a07      	ldr	r2, [pc, #28]	; (800670c <vApplicationGetTimerTaskMemory+0x2c>)
 80066f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	4a06      	ldr	r2, [pc, #24]	; (8006710 <vApplicationGetTimerTaskMemory+0x30>)
 80066f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066fe:	601a      	str	r2, [r3, #0]
}
 8006700:	bf00      	nop
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	200002fc 	.word	0x200002fc
 8006710:	20000358 	.word	0x20000358

08006714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f103 0208 	add.w	r2, r3, #8
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f04f 32ff 	mov.w	r2, #4294967295
 800672c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f103 0208 	add.w	r2, r3, #8
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f103 0208 	add.w	r2, r3, #8
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067cc:	d103      	bne.n	80067d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	e00c      	b.n	80067f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3308      	adds	r3, #8
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e002      	b.n	80067e4 <vListInsert+0x2e>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d2f6      	bcs.n	80067de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	601a      	str	r2, [r3, #0]
}
 800681c:	bf00      	nop
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6892      	ldr	r2, [r2, #8]
 800683e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6852      	ldr	r2, [r2, #4]
 8006848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d103      	bne.n	800685c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	1e5a      	subs	r2, r3, #1
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	e7fe      	b.n	80068a2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80068a4:	f002 f8d2 	bl	8008a4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	441a      	add	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d4:	3b01      	subs	r3, #1
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	441a      	add	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	22ff      	movs	r2, #255	; 0xff
 80068e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	22ff      	movs	r2, #255	; 0xff
 80068f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d114      	bne.n	8006924 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d01a      	beq.n	8006938 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3310      	adds	r3, #16
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f99c 	bl	8007c44 <xTaskRemoveFromEventList>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d012      	beq.n	8006938 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006912:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <xQueueGenericReset+0xcc>)
 8006914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	e009      	b.n	8006938 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3310      	adds	r3, #16
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fef3 	bl	8006714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3324      	adds	r3, #36	; 0x24
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff feee 	bl	8006714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006938:	f002 f8b6 	bl	8008aa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800693c:	2301      	movs	r3, #1
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08e      	sub	sp, #56	; 0x38
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d109      	bne.n	8006974 <xQueueGenericCreateStatic+0x28>
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
 8006972:	e7fe      	b.n	8006972 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <xQueueGenericCreateStatic+0x42>
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
 800698c:	e7fe      	b.n	800698c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <xQueueGenericCreateStatic+0x4e>
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <xQueueGenericCreateStatic+0x52>
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <xQueueGenericCreateStatic+0x54>
 800699e:	2300      	movs	r3, #0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <xQueueGenericCreateStatic+0x6c>
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	e7fe      	b.n	80069b6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <xQueueGenericCreateStatic+0x78>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <xQueueGenericCreateStatic+0x7c>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <xQueueGenericCreateStatic+0x7e>
 80069c8:	2300      	movs	r3, #0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <xQueueGenericCreateStatic+0x96>
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	e7fe      	b.n	80069e0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069e2:	2350      	movs	r3, #80	; 0x50
 80069e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b50      	cmp	r3, #80	; 0x50
 80069ea:	d009      	beq.n	8006a00 <xQueueGenericCreateStatic+0xb4>
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	e7fe      	b.n	80069fe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00d      	beq.n	8006a28 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f844 	bl	8006ab0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3730      	adds	r7, #48	; 0x30
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08a      	sub	sp, #40	; 0x28
 8006a36:	af02      	add	r7, sp, #8
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <xQueueGenericCreate+0x28>
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	e7fe      	b.n	8006a58 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e004      	b.n	8006a70 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	fb02 f303 	mul.w	r3, r2, r3
 8006a6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	3350      	adds	r3, #80	; 0x50
 8006a74:	4618      	mov	r0, r3
 8006a76:	f002 f903 	bl	8008c80 <pvPortMalloc>
 8006a7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d011      	beq.n	8006aa6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	3350      	adds	r3, #80	; 0x50
 8006a8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a94:	79fa      	ldrb	r2, [r7, #7]
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f805 	bl	8006ab0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006aa6:	69bb      	ldr	r3, [r7, #24]
	}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d103      	bne.n	8006acc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e002      	b.n	8006ad2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ade:	2101      	movs	r1, #1
 8006ae0:	69b8      	ldr	r0, [r7, #24]
 8006ae2:	f7ff fecb 	bl	800687c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006aee:	bf00      	nop
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	; 0x38
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b06:	2300      	movs	r3, #0
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <xQueueGenericSend+0x30>
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b26:	e7fe      	b.n	8006b26 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <xQueueGenericSend+0x3e>
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <xQueueGenericSend+0x42>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <xQueueGenericSend+0x44>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d109      	bne.n	8006b54 <xQueueGenericSend+0x5c>
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
 8006b52:	e7fe      	b.n	8006b52 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d103      	bne.n	8006b62 <xQueueGenericSend+0x6a>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <xQueueGenericSend+0x6e>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <xQueueGenericSend+0x70>
 8006b66:	2300      	movs	r3, #0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d109      	bne.n	8006b80 <xQueueGenericSend+0x88>
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	623b      	str	r3, [r7, #32]
 8006b7e:	e7fe      	b.n	8006b7e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b80:	f001 fa16 	bl	8007fb0 <xTaskGetSchedulerState>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <xQueueGenericSend+0x98>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <xQueueGenericSend+0x9c>
 8006b90:	2301      	movs	r3, #1
 8006b92:	e000      	b.n	8006b96 <xQueueGenericSend+0x9e>
 8006b94:	2300      	movs	r3, #0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <xQueueGenericSend+0xb6>
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	61fb      	str	r3, [r7, #28]
 8006bac:	e7fe      	b.n	8006bac <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bae:	f001 ff4d 	bl	8008a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d302      	bcc.n	8006bc4 <xQueueGenericSend+0xcc>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d129      	bne.n	8006c18 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bca:	f000 fa7c 	bl	80070c6 <prvCopyDataToQueue>
 8006bce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d010      	beq.n	8006bfa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	3324      	adds	r3, #36	; 0x24
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 f831 	bl	8007c44 <xTaskRemoveFromEventList>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d013      	beq.n	8006c10 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006be8:	4b3f      	ldr	r3, [pc, #252]	; (8006ce8 <xQueueGenericSend+0x1f0>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	e00a      	b.n	8006c10 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d007      	beq.n	8006c10 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c00:	4b39      	ldr	r3, [pc, #228]	; (8006ce8 <xQueueGenericSend+0x1f0>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c10:	f001 ff4a 	bl	8008aa8 <vPortExitCritical>
				return pdPASS;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e063      	b.n	8006ce0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d103      	bne.n	8006c26 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c1e:	f001 ff43 	bl	8008aa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e05c      	b.n	8006ce0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d106      	bne.n	8006c3a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c2c:	f107 0314 	add.w	r3, r7, #20
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 f869 	bl	8007d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c36:	2301      	movs	r3, #1
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c3a:	f001 ff35 	bl	8008aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c3e:	f000 fde5 	bl	800780c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c42:	f001 ff03 	bl	8008a4c <vPortEnterCritical>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c4c:	b25b      	sxtb	r3, r3
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d103      	bne.n	8006c5c <xQueueGenericSend+0x164>
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c62:	b25b      	sxtb	r3, r3
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c68:	d103      	bne.n	8006c72 <xQueueGenericSend+0x17a>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c72:	f001 ff19 	bl	8008aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c76:	1d3a      	adds	r2, r7, #4
 8006c78:	f107 0314 	add.w	r3, r7, #20
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f001 f858 	bl	8007d34 <xTaskCheckForTimeOut>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d124      	bne.n	8006cd4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c8c:	f000 fb13 	bl	80072b6 <prvIsQueueFull>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d018      	beq.n	8006cc8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	3310      	adds	r3, #16
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 ff82 	bl	8007ba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ca6:	f000 fa9e 	bl	80071e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006caa:	f000 fdbd 	bl	8007828 <xTaskResumeAll>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f47f af7c 	bne.w	8006bae <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <xQueueGenericSend+0x1f0>)
 8006cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	e772      	b.n	8006bae <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cca:	f000 fa8c 	bl	80071e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cce:	f000 fdab 	bl	8007828 <xTaskResumeAll>
 8006cd2:	e76c      	b.n	8006bae <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cd6:	f000 fa86 	bl	80071e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cda:	f000 fda5 	bl	8007828 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3738      	adds	r7, #56	; 0x38
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08e      	sub	sp, #56	; 0x38
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d109      	bne.n	8006d18 <xQueueGenericSendFromISR+0x2c>
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
 8006d16:	e7fe      	b.n	8006d16 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d103      	bne.n	8006d26 <xQueueGenericSendFromISR+0x3a>
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <xQueueGenericSendFromISR+0x3e>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e000      	b.n	8006d2c <xQueueGenericSendFromISR+0x40>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d109      	bne.n	8006d44 <xQueueGenericSendFromISR+0x58>
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	623b      	str	r3, [r7, #32]
 8006d42:	e7fe      	b.n	8006d42 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d103      	bne.n	8006d52 <xQueueGenericSendFromISR+0x66>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <xQueueGenericSendFromISR+0x6a>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <xQueueGenericSendFromISR+0x6c>
 8006d56:	2300      	movs	r3, #0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d109      	bne.n	8006d70 <xQueueGenericSendFromISR+0x84>
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	61fb      	str	r3, [r7, #28]
 8006d6e:	e7fe      	b.n	8006d6e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d70:	f001 ff48 	bl	8008c04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d74:	f3ef 8211 	mrs	r2, BASEPRI
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	61ba      	str	r2, [r7, #24]
 8006d8a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d302      	bcc.n	8006da2 <xQueueGenericSendFromISR+0xb6>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d12c      	bne.n	8006dfc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006db2:	f000 f988 	bl	80070c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006db6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbe:	d112      	bne.n	8006de6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d016      	beq.n	8006df6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	3324      	adds	r3, #36	; 0x24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 ff39 	bl	8007c44 <xTaskRemoveFromEventList>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00e      	beq.n	8006df6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00b      	beq.n	8006df6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	e007      	b.n	8006df6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006de6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dea:	3301      	adds	r3, #1
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	b25a      	sxtb	r2, r3
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006df6:	2301      	movs	r3, #1
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006dfa:	e001      	b.n	8006e00 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3738      	adds	r7, #56	; 0x38
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08c      	sub	sp, #48	; 0x30
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d109      	bne.n	8006e42 <xQueueReceive+0x2e>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	623b      	str	r3, [r7, #32]
 8006e40:	e7fe      	b.n	8006e40 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d103      	bne.n	8006e50 <xQueueReceive+0x3c>
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <xQueueReceive+0x40>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <xQueueReceive+0x42>
 8006e54:	2300      	movs	r3, #0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <xQueueReceive+0x5a>
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	e7fe      	b.n	8006e6c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e6e:	f001 f89f 	bl	8007fb0 <xTaskGetSchedulerState>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d102      	bne.n	8006e7e <xQueueReceive+0x6a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <xQueueReceive+0x6e>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <xQueueReceive+0x70>
 8006e82:	2300      	movs	r3, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <xQueueReceive+0x88>
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	e7fe      	b.n	8006e9a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e9c:	f001 fdd6 	bl	8008a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01f      	beq.n	8006eec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb0:	f000 f973 	bl	800719a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	1e5a      	subs	r2, r3, #1
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00f      	beq.n	8006ee4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	3310      	adds	r3, #16
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 febb 	bl	8007c44 <xTaskRemoveFromEventList>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ed4:	4b3c      	ldr	r3, [pc, #240]	; (8006fc8 <xQueueReceive+0x1b4>)
 8006ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ee4:	f001 fde0 	bl	8008aa8 <vPortExitCritical>
				return pdPASS;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e069      	b.n	8006fc0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ef2:	f001 fdd9 	bl	8008aa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e062      	b.n	8006fc0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d106      	bne.n	8006f0e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f00:	f107 0310 	add.w	r3, r7, #16
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 feff 	bl	8007d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f0e:	f001 fdcb 	bl	8008aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f12:	f000 fc7b 	bl	800780c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f16:	f001 fd99 	bl	8008a4c <vPortEnterCritical>
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f20:	b25b      	sxtb	r3, r3
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d103      	bne.n	8006f30 <xQueueReceive+0x11c>
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f36:	b25b      	sxtb	r3, r3
 8006f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3c:	d103      	bne.n	8006f46 <xQueueReceive+0x132>
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f46:	f001 fdaf 	bl	8008aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f4a:	1d3a      	adds	r2, r7, #4
 8006f4c:	f107 0310 	add.w	r3, r7, #16
 8006f50:	4611      	mov	r1, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 feee 	bl	8007d34 <xTaskCheckForTimeOut>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d123      	bne.n	8006fa6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f60:	f000 f993 	bl	800728a <prvIsQueueEmpty>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d017      	beq.n	8006f9a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	3324      	adds	r3, #36	; 0x24
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	4611      	mov	r1, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fe18 	bl	8007ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f7a:	f000 f934 	bl	80071e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f7e:	f000 fc53 	bl	8007828 <xTaskResumeAll>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d189      	bne.n	8006e9c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006f88:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <xQueueReceive+0x1b4>)
 8006f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	e780      	b.n	8006e9c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9c:	f000 f923 	bl	80071e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fa0:	f000 fc42 	bl	8007828 <xTaskResumeAll>
 8006fa4:	e77a      	b.n	8006e9c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa8:	f000 f91d 	bl	80071e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fac:	f000 fc3c 	bl	8007828 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb2:	f000 f96a 	bl	800728a <prvIsQueueEmpty>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f43f af6f 	beq.w	8006e9c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3730      	adds	r7, #48	; 0x30
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08e      	sub	sp, #56	; 0x38
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d109      	bne.n	8006ff6 <xQueueReceiveFromISR+0x2a>
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	623b      	str	r3, [r7, #32]
 8006ff4:	e7fe      	b.n	8006ff4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d103      	bne.n	8007004 <xQueueReceiveFromISR+0x38>
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <xQueueReceiveFromISR+0x3c>
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <xQueueReceiveFromISR+0x3e>
 8007008:	2300      	movs	r3, #0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <xQueueReceiveFromISR+0x56>
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	e7fe      	b.n	8007020 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007022:	f001 fdef 	bl	8008c04 <vPortValidateInterruptPriority>
	__asm volatile
 8007026:	f3ef 8211 	mrs	r2, BASEPRI
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	61ba      	str	r2, [r7, #24]
 800703c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800703e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	2b00      	cmp	r3, #0
 800704c:	d02f      	beq.n	80070ae <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800705c:	f000 f89d 	bl	800719a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	1e5a      	subs	r2, r3, #1
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007068:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d112      	bne.n	8007098 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d016      	beq.n	80070a8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	3310      	adds	r3, #16
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fde0 	bl	8007c44 <xTaskRemoveFromEventList>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00e      	beq.n	80070a8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e007      	b.n	80070a8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800709c:	3301      	adds	r3, #1
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	b25a      	sxtb	r2, r3
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80070a8:	2301      	movs	r3, #1
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
 80070ac:	e001      	b.n	80070b2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3738      	adds	r7, #56	; 0x38
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b086      	sub	sp, #24
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	60f8      	str	r0, [r7, #12]
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10d      	bne.n	8007100 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d14d      	bne.n	8007188 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 ff7b 	bl	8007fec <xTaskPriorityDisinherit>
 80070f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	609a      	str	r2, [r3, #8]
 80070fe:	e043      	b.n	8007188 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d119      	bne.n	800713a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6858      	ldr	r0, [r3, #4]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	461a      	mov	r2, r3
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	f003 fac1 	bl	800a698 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	441a      	add	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	429a      	cmp	r2, r3
 800712e:	d32b      	bcc.n	8007188 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	605a      	str	r2, [r3, #4]
 8007138:	e026      	b.n	8007188 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	68d8      	ldr	r0, [r3, #12]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	461a      	mov	r2, r3
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	f003 faa7 	bl	800a698 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	425b      	negs	r3, r3
 8007154:	441a      	add	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d207      	bcs.n	8007176 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689a      	ldr	r2, [r3, #8]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	425b      	negs	r3, r3
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b02      	cmp	r3, #2
 800717a:	d105      	bne.n	8007188 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3b01      	subs	r3, #1
 8007186:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007190:	697b      	ldr	r3, [r7, #20]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d018      	beq.n	80071de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	441a      	add	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d303      	bcc.n	80071ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68d9      	ldr	r1, [r3, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	461a      	mov	r2, r3
 80071d8:	6838      	ldr	r0, [r7, #0]
 80071da:	f003 fa5d 	bl	800a698 <memcpy>
	}
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071ee:	f001 fc2d 	bl	8008a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071fa:	e011      	b.n	8007220 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	d012      	beq.n	800722a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3324      	adds	r3, #36	; 0x24
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fd1b 	bl	8007c44 <xTaskRemoveFromEventList>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007214:	f000 fdee 	bl	8007df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	3b01      	subs	r3, #1
 800721c:	b2db      	uxtb	r3, r3
 800721e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dce9      	bgt.n	80071fc <prvUnlockQueue+0x16>
 8007228:	e000      	b.n	800722c <prvUnlockQueue+0x46>
					break;
 800722a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	22ff      	movs	r2, #255	; 0xff
 8007230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007234:	f001 fc38 	bl	8008aa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007238:	f001 fc08 	bl	8008a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007242:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007244:	e011      	b.n	800726a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d012      	beq.n	8007274 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3310      	adds	r3, #16
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fcf6 	bl	8007c44 <xTaskRemoveFromEventList>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800725e:	f000 fdc9 	bl	8007df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	3b01      	subs	r3, #1
 8007266:	b2db      	uxtb	r3, r3
 8007268:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800726a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800726e:	2b00      	cmp	r3, #0
 8007270:	dce9      	bgt.n	8007246 <prvUnlockQueue+0x60>
 8007272:	e000      	b.n	8007276 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007274:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	22ff      	movs	r2, #255	; 0xff
 800727a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800727e:	f001 fc13 	bl	8008aa8 <vPortExitCritical>
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007292:	f001 fbdb 	bl	8008a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	2b00      	cmp	r3, #0
 800729c:	d102      	bne.n	80072a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800729e:	2301      	movs	r3, #1
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	e001      	b.n	80072a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072a8:	f001 fbfe 	bl	8008aa8 <vPortExitCritical>

	return xReturn;
 80072ac:	68fb      	ldr	r3, [r7, #12]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072be:	f001 fbc5 	bl	8008a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d102      	bne.n	80072d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072ce:	2301      	movs	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	e001      	b.n	80072d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072d8:	f001 fbe6 	bl	8008aa8 <vPortExitCritical>

	return xReturn;
 80072dc:	68fb      	ldr	r3, [r7, #12]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	e014      	b.n	8007322 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072f8:	4a0e      	ldr	r2, [pc, #56]	; (8007334 <vQueueAddToRegistry+0x4c>)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10b      	bne.n	800731c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007304:	490b      	ldr	r1, [pc, #44]	; (8007334 <vQueueAddToRegistry+0x4c>)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800730e:	4a09      	ldr	r2, [pc, #36]	; (8007334 <vQueueAddToRegistry+0x4c>)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	4413      	add	r3, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800731a:	e005      	b.n	8007328 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3301      	adds	r3, #1
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b07      	cmp	r3, #7
 8007326:	d9e7      	bls.n	80072f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007328:	bf00      	nop
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	20004df0 	.word	0x20004df0

08007338 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007348:	f001 fb80 	bl	8008a4c <vPortEnterCritical>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007352:	b25b      	sxtb	r3, r3
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007358:	d103      	bne.n	8007362 <vQueueWaitForMessageRestricted+0x2a>
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007368:	b25b      	sxtb	r3, r3
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d103      	bne.n	8007378 <vQueueWaitForMessageRestricted+0x40>
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007378:	f001 fb96 	bl	8008aa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	3324      	adds	r3, #36	; 0x24
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fc2f 	bl	8007bf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007392:	6978      	ldr	r0, [r7, #20]
 8007394:	f7ff ff27 	bl	80071e6 <prvUnlockQueue>
	}
 8007398:	bf00      	nop
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08e      	sub	sp, #56	; 0x38
 80073a4:	af04      	add	r7, sp, #16
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d109      	bne.n	80073c8 <xTaskCreateStatic+0x28>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	623b      	str	r3, [r7, #32]
 80073c6:	e7fe      	b.n	80073c6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d109      	bne.n	80073e2 <xTaskCreateStatic+0x42>
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	e7fe      	b.n	80073e0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073e2:	235c      	movs	r3, #92	; 0x5c
 80073e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b5c      	cmp	r3, #92	; 0x5c
 80073ea:	d009      	beq.n	8007400 <xTaskCreateStatic+0x60>
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	e7fe      	b.n	80073fe <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007400:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01e      	beq.n	8007446 <xTaskCreateStatic+0xa6>
 8007408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01b      	beq.n	8007446 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007416:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	2202      	movs	r2, #2
 800741c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007420:	2300      	movs	r3, #0
 8007422:	9303      	str	r3, [sp, #12]
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	9302      	str	r3, [sp, #8]
 8007428:	f107 0314 	add.w	r3, r7, #20
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f850 	bl	80074de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800743e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007440:	f000 f8dc 	bl	80075fc <prvAddNewTaskToReadyList>
 8007444:	e001      	b.n	800744a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800744a:	697b      	ldr	r3, [r7, #20]
	}
 800744c:	4618      	mov	r0, r3
 800744e:	3728      	adds	r7, #40	; 0x28
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08c      	sub	sp, #48	; 0x30
 8007458:	af04      	add	r7, sp, #16
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007464:	88fb      	ldrh	r3, [r7, #6]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4618      	mov	r0, r3
 800746a:	f001 fc09 	bl	8008c80 <pvPortMalloc>
 800746e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00e      	beq.n	8007494 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007476:	205c      	movs	r0, #92	; 0x5c
 8007478:	f001 fc02 	bl	8008c80 <pvPortMalloc>
 800747c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	631a      	str	r2, [r3, #48]	; 0x30
 800748a:	e005      	b.n	8007498 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800748c:	6978      	ldr	r0, [r7, #20]
 800748e:	f001 fcb9 	bl	8008e04 <vPortFree>
 8007492:	e001      	b.n	8007498 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007494:	2300      	movs	r3, #0
 8007496:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d017      	beq.n	80074ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074a6:	88fa      	ldrh	r2, [r7, #6]
 80074a8:	2300      	movs	r3, #0
 80074aa:	9303      	str	r3, [sp, #12]
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	9302      	str	r3, [sp, #8]
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	68b9      	ldr	r1, [r7, #8]
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f80e 	bl	80074de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074c2:	69f8      	ldr	r0, [r7, #28]
 80074c4:	f000 f89a 	bl	80075fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074c8:	2301      	movs	r3, #1
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	e002      	b.n	80074d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074ce:	f04f 33ff 	mov.w	r3, #4294967295
 80074d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074d4:	69bb      	ldr	r3, [r7, #24]
	}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3720      	adds	r7, #32
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b088      	sub	sp, #32
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	461a      	mov	r2, r3
 80074f6:	21a5      	movs	r1, #165	; 0xa5
 80074f8:	f003 f8d9 	bl	800a6ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007506:	3b01      	subs	r3, #1
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	f023 0307 	bic.w	r3, r3, #7
 8007514:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <prvInitialiseNewTask+0x56>
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	617b      	str	r3, [r7, #20]
 8007532:	e7fe      	b.n	8007532 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d01f      	beq.n	800757a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800753a:	2300      	movs	r3, #0
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	e012      	b.n	8007566 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	7819      	ldrb	r1, [r3, #0]
 8007548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	3334      	adds	r3, #52	; 0x34
 8007550:	460a      	mov	r2, r1
 8007552:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	4413      	add	r3, r2
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d006      	beq.n	800756e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	3301      	adds	r3, #1
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	2b0f      	cmp	r3, #15
 800756a:	d9e9      	bls.n	8007540 <prvInitialiseNewTask+0x62>
 800756c:	e000      	b.n	8007570 <prvInitialiseNewTask+0x92>
			{
				break;
 800756e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007578:	e003      	b.n	8007582 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	2b37      	cmp	r3, #55	; 0x37
 8007586:	d901      	bls.n	800758c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007588:	2337      	movs	r3, #55	; 0x37
 800758a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007590:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007596:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2200      	movs	r2, #0
 800759c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	3304      	adds	r3, #4
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff f8d6 	bl	8006754 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	3318      	adds	r3, #24
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff f8d1 	bl	8006754 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	2200      	movs	r2, #0
 80075cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	68f9      	ldr	r1, [r7, #12]
 80075da:	69b8      	ldr	r0, [r7, #24]
 80075dc:	f001 f90c 	bl	80087f8 <pxPortInitialiseStack>
 80075e0:	4602      	mov	r2, r0
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f2:	bf00      	nop
 80075f4:	3720      	adds	r7, #32
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007604:	f001 fa22 	bl	8008a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007608:	4b2d      	ldr	r3, [pc, #180]	; (80076c0 <prvAddNewTaskToReadyList+0xc4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3301      	adds	r3, #1
 800760e:	4a2c      	ldr	r2, [pc, #176]	; (80076c0 <prvAddNewTaskToReadyList+0xc4>)
 8007610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007612:	4b2c      	ldr	r3, [pc, #176]	; (80076c4 <prvAddNewTaskToReadyList+0xc8>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800761a:	4a2a      	ldr	r2, [pc, #168]	; (80076c4 <prvAddNewTaskToReadyList+0xc8>)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007620:	4b27      	ldr	r3, [pc, #156]	; (80076c0 <prvAddNewTaskToReadyList+0xc4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d110      	bne.n	800764a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007628:	f000 fc08 	bl	8007e3c <prvInitialiseTaskLists>
 800762c:	e00d      	b.n	800764a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800762e:	4b26      	ldr	r3, [pc, #152]	; (80076c8 <prvAddNewTaskToReadyList+0xcc>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007636:	4b23      	ldr	r3, [pc, #140]	; (80076c4 <prvAddNewTaskToReadyList+0xc8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	429a      	cmp	r2, r3
 8007642:	d802      	bhi.n	800764a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007644:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <prvAddNewTaskToReadyList+0xc8>)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800764a:	4b20      	ldr	r3, [pc, #128]	; (80076cc <prvAddNewTaskToReadyList+0xd0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3301      	adds	r3, #1
 8007650:	4a1e      	ldr	r2, [pc, #120]	; (80076cc <prvAddNewTaskToReadyList+0xd0>)
 8007652:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007654:	4b1d      	ldr	r3, [pc, #116]	; (80076cc <prvAddNewTaskToReadyList+0xd0>)
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <prvAddNewTaskToReadyList+0xd4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	429a      	cmp	r2, r3
 8007666:	d903      	bls.n	8007670 <prvAddNewTaskToReadyList+0x74>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4a18      	ldr	r2, [pc, #96]	; (80076d0 <prvAddNewTaskToReadyList+0xd4>)
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4a15      	ldr	r2, [pc, #84]	; (80076d4 <prvAddNewTaskToReadyList+0xd8>)
 800767e:	441a      	add	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3304      	adds	r3, #4
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f7ff f871 	bl	800676e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800768c:	f001 fa0c 	bl	8008aa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007690:	4b0d      	ldr	r3, [pc, #52]	; (80076c8 <prvAddNewTaskToReadyList+0xcc>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00e      	beq.n	80076b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <prvAddNewTaskToReadyList+0xc8>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d207      	bcs.n	80076b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076a6:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <prvAddNewTaskToReadyList+0xdc>)
 80076a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000c2c 	.word	0x20000c2c
 80076c4:	20000758 	.word	0x20000758
 80076c8:	20000c38 	.word	0x20000c38
 80076cc:	20000c48 	.word	0x20000c48
 80076d0:	20000c34 	.word	0x20000c34
 80076d4:	2000075c 	.word	0x2000075c
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d016      	beq.n	800771c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <vTaskDelay+0x60>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <vTaskDelay+0x2e>
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60bb      	str	r3, [r7, #8]
 8007708:	e7fe      	b.n	8007708 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800770a:	f000 f87f 	bl	800780c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800770e:	2100      	movs	r1, #0
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fcd7 	bl	80080c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007716:	f000 f887 	bl	8007828 <xTaskResumeAll>
 800771a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d107      	bne.n	8007732 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007722:	4b07      	ldr	r3, [pc, #28]	; (8007740 <vTaskDelay+0x64>)
 8007724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20000c54 	.word	0x20000c54
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800774e:	2300      	movs	r3, #0
 8007750:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007752:	463a      	mov	r2, r7
 8007754:	1d39      	adds	r1, r7, #4
 8007756:	f107 0308 	add.w	r3, r7, #8
 800775a:	4618      	mov	r0, r3
 800775c:	f7fe ffa6 	bl	80066ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	9202      	str	r2, [sp, #8]
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	2300      	movs	r3, #0
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	2300      	movs	r3, #0
 8007770:	460a      	mov	r2, r1
 8007772:	4920      	ldr	r1, [pc, #128]	; (80077f4 <vTaskStartScheduler+0xb0>)
 8007774:	4820      	ldr	r0, [pc, #128]	; (80077f8 <vTaskStartScheduler+0xb4>)
 8007776:	f7ff fe13 	bl	80073a0 <xTaskCreateStatic>
 800777a:	4602      	mov	r2, r0
 800777c:	4b1f      	ldr	r3, [pc, #124]	; (80077fc <vTaskStartScheduler+0xb8>)
 800777e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007780:	4b1e      	ldr	r3, [pc, #120]	; (80077fc <vTaskStartScheduler+0xb8>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007788:	2301      	movs	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	e001      	b.n	8007792 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d102      	bne.n	800779e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007798:	f000 fce8 	bl	800816c <xTimerCreateTimerTask>
 800779c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d115      	bne.n	80077d0 <vTaskStartScheduler+0x8c>
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077b6:	4b12      	ldr	r3, [pc, #72]	; (8007800 <vTaskStartScheduler+0xbc>)
 80077b8:	f04f 32ff 	mov.w	r2, #4294967295
 80077bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077be:	4b11      	ldr	r3, [pc, #68]	; (8007804 <vTaskStartScheduler+0xc0>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077c4:	4b10      	ldr	r3, [pc, #64]	; (8007808 <vTaskStartScheduler+0xc4>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077ca:	f001 f8a1 	bl	8008910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077ce:	e00d      	b.n	80077ec <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d6:	d109      	bne.n	80077ec <vTaskStartScheduler+0xa8>
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	e7fe      	b.n	80077ea <vTaskStartScheduler+0xa6>
}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	0800a718 	.word	0x0800a718
 80077f8:	08007e0d 	.word	0x08007e0d
 80077fc:	20000c50 	.word	0x20000c50
 8007800:	20000c4c 	.word	0x20000c4c
 8007804:	20000c38 	.word	0x20000c38
 8007808:	20000c30 	.word	0x20000c30

0800780c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800780c:	b480      	push	{r7}
 800780e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007810:	4b04      	ldr	r3, [pc, #16]	; (8007824 <vTaskSuspendAll+0x18>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3301      	adds	r3, #1
 8007816:	4a03      	ldr	r2, [pc, #12]	; (8007824 <vTaskSuspendAll+0x18>)
 8007818:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800781a:	bf00      	nop
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	20000c54 	.word	0x20000c54

08007828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007832:	2300      	movs	r3, #0
 8007834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007836:	4b41      	ldr	r3, [pc, #260]	; (800793c <xTaskResumeAll+0x114>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d109      	bne.n	8007852 <xTaskResumeAll+0x2a>
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	603b      	str	r3, [r7, #0]
 8007850:	e7fe      	b.n	8007850 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007852:	f001 f8fb 	bl	8008a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007856:	4b39      	ldr	r3, [pc, #228]	; (800793c <xTaskResumeAll+0x114>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3b01      	subs	r3, #1
 800785c:	4a37      	ldr	r2, [pc, #220]	; (800793c <xTaskResumeAll+0x114>)
 800785e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007860:	4b36      	ldr	r3, [pc, #216]	; (800793c <xTaskResumeAll+0x114>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d162      	bne.n	800792e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007868:	4b35      	ldr	r3, [pc, #212]	; (8007940 <xTaskResumeAll+0x118>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d05e      	beq.n	800792e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007870:	e02f      	b.n	80078d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007872:	4b34      	ldr	r3, [pc, #208]	; (8007944 <xTaskResumeAll+0x11c>)
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3318      	adds	r3, #24
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe ffd2 	bl	8006828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3304      	adds	r3, #4
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe ffcd 	bl	8006828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007892:	4b2d      	ldr	r3, [pc, #180]	; (8007948 <xTaskResumeAll+0x120>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d903      	bls.n	80078a2 <xTaskResumeAll+0x7a>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789e:	4a2a      	ldr	r2, [pc, #168]	; (8007948 <xTaskResumeAll+0x120>)
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a6:	4613      	mov	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4a27      	ldr	r2, [pc, #156]	; (800794c <xTaskResumeAll+0x124>)
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3304      	adds	r3, #4
 80078b6:	4619      	mov	r1, r3
 80078b8:	4610      	mov	r0, r2
 80078ba:	f7fe ff58 	bl	800676e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c2:	4b23      	ldr	r3, [pc, #140]	; (8007950 <xTaskResumeAll+0x128>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d302      	bcc.n	80078d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80078cc:	4b21      	ldr	r3, [pc, #132]	; (8007954 <xTaskResumeAll+0x12c>)
 80078ce:	2201      	movs	r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078d2:	4b1c      	ldr	r3, [pc, #112]	; (8007944 <xTaskResumeAll+0x11c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1cb      	bne.n	8007872 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078e0:	f000 fb46 	bl	8007f70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80078e4:	4b1c      	ldr	r3, [pc, #112]	; (8007958 <xTaskResumeAll+0x130>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d010      	beq.n	8007912 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078f0:	f000 f846 	bl	8007980 <xTaskIncrementTick>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80078fa:	4b16      	ldr	r3, [pc, #88]	; (8007954 <xTaskResumeAll+0x12c>)
 80078fc:	2201      	movs	r2, #1
 80078fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3b01      	subs	r3, #1
 8007904:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1f1      	bne.n	80078f0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800790c:	4b12      	ldr	r3, [pc, #72]	; (8007958 <xTaskResumeAll+0x130>)
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007912:	4b10      	ldr	r3, [pc, #64]	; (8007954 <xTaskResumeAll+0x12c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d009      	beq.n	800792e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800791a:	2301      	movs	r3, #1
 800791c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <xTaskResumeAll+0x134>)
 8007920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800792e:	f001 f8bb 	bl	8008aa8 <vPortExitCritical>

	return xAlreadyYielded;
 8007932:	68bb      	ldr	r3, [r7, #8]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20000c54 	.word	0x20000c54
 8007940:	20000c2c 	.word	0x20000c2c
 8007944:	20000bec 	.word	0x20000bec
 8007948:	20000c34 	.word	0x20000c34
 800794c:	2000075c 	.word	0x2000075c
 8007950:	20000758 	.word	0x20000758
 8007954:	20000c40 	.word	0x20000c40
 8007958:	20000c3c 	.word	0x20000c3c
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <xTaskGetTickCount+0x1c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800796c:	687b      	ldr	r3, [r7, #4]
}
 800796e:	4618      	mov	r0, r3
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	20000c30 	.word	0x20000c30

08007980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798a:	4b4e      	ldr	r3, [pc, #312]	; (8007ac4 <xTaskIncrementTick+0x144>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f040 8088 	bne.w	8007aa4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007994:	4b4c      	ldr	r3, [pc, #304]	; (8007ac8 <xTaskIncrementTick+0x148>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800799c:	4a4a      	ldr	r2, [pc, #296]	; (8007ac8 <xTaskIncrementTick+0x148>)
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d11f      	bne.n	80079e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80079a8:	4b48      	ldr	r3, [pc, #288]	; (8007acc <xTaskIncrementTick+0x14c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <xTaskIncrementTick+0x46>
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	e7fe      	b.n	80079c4 <xTaskIncrementTick+0x44>
 80079c6:	4b41      	ldr	r3, [pc, #260]	; (8007acc <xTaskIncrementTick+0x14c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	4b40      	ldr	r3, [pc, #256]	; (8007ad0 <xTaskIncrementTick+0x150>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a3e      	ldr	r2, [pc, #248]	; (8007acc <xTaskIncrementTick+0x14c>)
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	4a3e      	ldr	r2, [pc, #248]	; (8007ad0 <xTaskIncrementTick+0x150>)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	4b3e      	ldr	r3, [pc, #248]	; (8007ad4 <xTaskIncrementTick+0x154>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3301      	adds	r3, #1
 80079e0:	4a3c      	ldr	r2, [pc, #240]	; (8007ad4 <xTaskIncrementTick+0x154>)
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	f000 fac4 	bl	8007f70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079e8:	4b3b      	ldr	r3, [pc, #236]	; (8007ad8 <xTaskIncrementTick+0x158>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d349      	bcc.n	8007a86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079f2:	4b36      	ldr	r3, [pc, #216]	; (8007acc <xTaskIncrementTick+0x14c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d104      	bne.n	8007a06 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fc:	4b36      	ldr	r3, [pc, #216]	; (8007ad8 <xTaskIncrementTick+0x158>)
 80079fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007a02:	601a      	str	r2, [r3, #0]
					break;
 8007a04:	e03f      	b.n	8007a86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a06:	4b31      	ldr	r3, [pc, #196]	; (8007acc <xTaskIncrementTick+0x14c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d203      	bcs.n	8007a26 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a1e:	4a2e      	ldr	r2, [pc, #184]	; (8007ad8 <xTaskIncrementTick+0x158>)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a24:	e02f      	b.n	8007a86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe fefc 	bl	8006828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	3318      	adds	r3, #24
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fe fef3 	bl	8006828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	4b25      	ldr	r3, [pc, #148]	; (8007adc <xTaskIncrementTick+0x15c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d903      	bls.n	8007a56 <xTaskIncrementTick+0xd6>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	4a22      	ldr	r2, [pc, #136]	; (8007adc <xTaskIncrementTick+0x15c>)
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4a1f      	ldr	r2, [pc, #124]	; (8007ae0 <xTaskIncrementTick+0x160>)
 8007a64:	441a      	add	r2, r3
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f7fe fe7e 	bl	800676e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a76:	4b1b      	ldr	r3, [pc, #108]	; (8007ae4 <xTaskIncrementTick+0x164>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d3b8      	bcc.n	80079f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007a80:	2301      	movs	r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a84:	e7b5      	b.n	80079f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a86:	4b17      	ldr	r3, [pc, #92]	; (8007ae4 <xTaskIncrementTick+0x164>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8c:	4914      	ldr	r1, [pc, #80]	; (8007ae0 <xTaskIncrementTick+0x160>)
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	440b      	add	r3, r1
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d907      	bls.n	8007aae <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
 8007aa2:	e004      	b.n	8007aae <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007aa4:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <xTaskIncrementTick+0x168>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	4a0f      	ldr	r2, [pc, #60]	; (8007ae8 <xTaskIncrementTick+0x168>)
 8007aac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007aae:	4b0f      	ldr	r3, [pc, #60]	; (8007aec <xTaskIncrementTick+0x16c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007aba:	697b      	ldr	r3, [r7, #20]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000c54 	.word	0x20000c54
 8007ac8:	20000c30 	.word	0x20000c30
 8007acc:	20000be4 	.word	0x20000be4
 8007ad0:	20000be8 	.word	0x20000be8
 8007ad4:	20000c44 	.word	0x20000c44
 8007ad8:	20000c4c 	.word	0x20000c4c
 8007adc:	20000c34 	.word	0x20000c34
 8007ae0:	2000075c 	.word	0x2000075c
 8007ae4:	20000758 	.word	0x20000758
 8007ae8:	20000c3c 	.word	0x20000c3c
 8007aec:	20000c40 	.word	0x20000c40

08007af0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007af6:	4b27      	ldr	r3, [pc, #156]	; (8007b94 <vTaskSwitchContext+0xa4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007afe:	4b26      	ldr	r3, [pc, #152]	; (8007b98 <vTaskSwitchContext+0xa8>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b04:	e040      	b.n	8007b88 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007b06:	4b24      	ldr	r3, [pc, #144]	; (8007b98 <vTaskSwitchContext+0xa8>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b0c:	4b23      	ldr	r3, [pc, #140]	; (8007b9c <vTaskSwitchContext+0xac>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e00f      	b.n	8007b34 <vTaskSwitchContext+0x44>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d109      	bne.n	8007b2e <vTaskSwitchContext+0x3e>
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	607b      	str	r3, [r7, #4]
 8007b2c:	e7fe      	b.n	8007b2c <vTaskSwitchContext+0x3c>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	491a      	ldr	r1, [pc, #104]	; (8007ba0 <vTaskSwitchContext+0xb0>)
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0e5      	beq.n	8007b14 <vTaskSwitchContext+0x24>
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <vTaskSwitchContext+0xb0>)
 8007b54:	4413      	add	r3, r2
 8007b56:	60bb      	str	r3, [r7, #8]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	605a      	str	r2, [r3, #4]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d104      	bne.n	8007b78 <vTaskSwitchContext+0x88>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	4a09      	ldr	r2, [pc, #36]	; (8007ba4 <vTaskSwitchContext+0xb4>)
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	4a06      	ldr	r2, [pc, #24]	; (8007b9c <vTaskSwitchContext+0xac>)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6013      	str	r3, [r2, #0]
}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	20000c54 	.word	0x20000c54
 8007b98:	20000c40 	.word	0x20000c40
 8007b9c:	20000c34 	.word	0x20000c34
 8007ba0:	2000075c 	.word	0x2000075c
 8007ba4:	20000758 	.word	0x20000758

08007ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <vTaskPlaceOnEventList+0x24>
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e7fe      	b.n	8007bca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bcc:	4b07      	ldr	r3, [pc, #28]	; (8007bec <vTaskPlaceOnEventList+0x44>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3318      	adds	r3, #24
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7fe fdee 	bl	80067b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bda:	2101      	movs	r1, #1
 8007bdc:	6838      	ldr	r0, [r7, #0]
 8007bde:	f000 fa71 	bl	80080c4 <prvAddCurrentTaskToDelayedList>
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000758 	.word	0x20000758

08007bf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <vTaskPlaceOnEventListRestricted+0x26>
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e7fe      	b.n	8007c14 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c16:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <vTaskPlaceOnEventListRestricted+0x50>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3318      	adds	r3, #24
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7fe fda5 	bl	800676e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d002      	beq.n	8007c30 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	68b8      	ldr	r0, [r7, #8]
 8007c34:	f000 fa46 	bl	80080c4 <prvAddCurrentTaskToDelayedList>
	}
 8007c38:	bf00      	nop
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20000758 	.word	0x20000758

08007c44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d109      	bne.n	8007c6e <xTaskRemoveFromEventList+0x2a>
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	e7fe      	b.n	8007c6c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	3318      	adds	r3, #24
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fdd8 	bl	8006828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c78:	4b1d      	ldr	r3, [pc, #116]	; (8007cf0 <xTaskRemoveFromEventList+0xac>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d11d      	bne.n	8007cbc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	3304      	adds	r3, #4
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fdcf 	bl	8006828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8e:	4b19      	ldr	r3, [pc, #100]	; (8007cf4 <xTaskRemoveFromEventList+0xb0>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d903      	bls.n	8007c9e <xTaskRemoveFromEventList+0x5a>
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	4a16      	ldr	r2, [pc, #88]	; (8007cf4 <xTaskRemoveFromEventList+0xb0>)
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4a13      	ldr	r2, [pc, #76]	; (8007cf8 <xTaskRemoveFromEventList+0xb4>)
 8007cac:	441a      	add	r2, r3
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	f7fe fd5a 	bl	800676e <vListInsertEnd>
 8007cba:	e005      	b.n	8007cc8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	3318      	adds	r3, #24
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	480e      	ldr	r0, [pc, #56]	; (8007cfc <xTaskRemoveFromEventList+0xb8>)
 8007cc4:	f7fe fd53 	bl	800676e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <xTaskRemoveFromEventList+0xbc>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d905      	bls.n	8007ce2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cda:	4b0a      	ldr	r3, [pc, #40]	; (8007d04 <xTaskRemoveFromEventList+0xc0>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	e001      	b.n	8007ce6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ce6:	697b      	ldr	r3, [r7, #20]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20000c54 	.word	0x20000c54
 8007cf4:	20000c34 	.word	0x20000c34
 8007cf8:	2000075c 	.word	0x2000075c
 8007cfc:	20000bec 	.word	0x20000bec
 8007d00:	20000758 	.word	0x20000758
 8007d04:	20000c40 	.word	0x20000c40

08007d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d10:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <vTaskInternalSetTimeOutState+0x24>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <vTaskInternalSetTimeOutState+0x28>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	605a      	str	r2, [r3, #4]
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	20000c44 	.word	0x20000c44
 8007d30:	20000c30 	.word	0x20000c30

08007d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d109      	bne.n	8007d58 <xTaskCheckForTimeOut+0x24>
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	e7fe      	b.n	8007d56 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <xTaskCheckForTimeOut+0x3e>
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	e7fe      	b.n	8007d70 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007d72:	f000 fe6b 	bl	8008a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d76:	4b1d      	ldr	r3, [pc, #116]	; (8007dec <xTaskCheckForTimeOut+0xb8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8e:	d102      	bne.n	8007d96 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d90:	2300      	movs	r3, #0
 8007d92:	61fb      	str	r3, [r7, #28]
 8007d94:	e023      	b.n	8007dde <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <xTaskCheckForTimeOut+0xbc>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d007      	beq.n	8007db2 <xTaskCheckForTimeOut+0x7e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d302      	bcc.n	8007db2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dac:	2301      	movs	r3, #1
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	e015      	b.n	8007dde <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d20b      	bcs.n	8007dd4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	1ad2      	subs	r2, r2, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff ff9d 	bl	8007d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61fb      	str	r3, [r7, #28]
 8007dd2:	e004      	b.n	8007dde <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dde:	f000 fe63 	bl	8008aa8 <vPortExitCritical>

	return xReturn;
 8007de2:	69fb      	ldr	r3, [r7, #28]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3720      	adds	r7, #32
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20000c30 	.word	0x20000c30
 8007df0:	20000c44 	.word	0x20000c44

08007df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007df8:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <vTaskMissedYield+0x14>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]
}
 8007dfe:	bf00      	nop
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	20000c40 	.word	0x20000c40

08007e0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e14:	f000 f852 	bl	8007ebc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e18:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <prvIdleTask+0x28>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d9f9      	bls.n	8007e14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <prvIdleTask+0x2c>)
 8007e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e30:	e7f0      	b.n	8007e14 <prvIdleTask+0x8>
 8007e32:	bf00      	nop
 8007e34:	2000075c 	.word	0x2000075c
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e42:	2300      	movs	r3, #0
 8007e44:	607b      	str	r3, [r7, #4]
 8007e46:	e00c      	b.n	8007e62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4a12      	ldr	r2, [pc, #72]	; (8007e9c <prvInitialiseTaskLists+0x60>)
 8007e54:	4413      	add	r3, r2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fc5c 	bl	8006714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	607b      	str	r3, [r7, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b37      	cmp	r3, #55	; 0x37
 8007e66:	d9ef      	bls.n	8007e48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e68:	480d      	ldr	r0, [pc, #52]	; (8007ea0 <prvInitialiseTaskLists+0x64>)
 8007e6a:	f7fe fc53 	bl	8006714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e6e:	480d      	ldr	r0, [pc, #52]	; (8007ea4 <prvInitialiseTaskLists+0x68>)
 8007e70:	f7fe fc50 	bl	8006714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e74:	480c      	ldr	r0, [pc, #48]	; (8007ea8 <prvInitialiseTaskLists+0x6c>)
 8007e76:	f7fe fc4d 	bl	8006714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e7a:	480c      	ldr	r0, [pc, #48]	; (8007eac <prvInitialiseTaskLists+0x70>)
 8007e7c:	f7fe fc4a 	bl	8006714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e80:	480b      	ldr	r0, [pc, #44]	; (8007eb0 <prvInitialiseTaskLists+0x74>)
 8007e82:	f7fe fc47 	bl	8006714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e86:	4b0b      	ldr	r3, [pc, #44]	; (8007eb4 <prvInitialiseTaskLists+0x78>)
 8007e88:	4a05      	ldr	r2, [pc, #20]	; (8007ea0 <prvInitialiseTaskLists+0x64>)
 8007e8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <prvInitialiseTaskLists+0x7c>)
 8007e8e:	4a05      	ldr	r2, [pc, #20]	; (8007ea4 <prvInitialiseTaskLists+0x68>)
 8007e90:	601a      	str	r2, [r3, #0]
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	2000075c 	.word	0x2000075c
 8007ea0:	20000bbc 	.word	0x20000bbc
 8007ea4:	20000bd0 	.word	0x20000bd0
 8007ea8:	20000bec 	.word	0x20000bec
 8007eac:	20000c00 	.word	0x20000c00
 8007eb0:	20000c18 	.word	0x20000c18
 8007eb4:	20000be4 	.word	0x20000be4
 8007eb8:	20000be8 	.word	0x20000be8

08007ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ec2:	e019      	b.n	8007ef8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ec4:	f000 fdc2 	bl	8008a4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec8:	4b0f      	ldr	r3, [pc, #60]	; (8007f08 <prvCheckTasksWaitingTermination+0x4c>)
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe fca7 	bl	8006828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <prvCheckTasksWaitingTermination+0x50>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <prvCheckTasksWaitingTermination+0x50>)
 8007ee2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <prvCheckTasksWaitingTermination+0x54>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <prvCheckTasksWaitingTermination+0x54>)
 8007eec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007eee:	f000 fddb 	bl	8008aa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f80e 	bl	8007f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ef8:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <prvCheckTasksWaitingTermination+0x54>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e1      	bne.n	8007ec4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20000c00 	.word	0x20000c00
 8007f0c:	20000c2c 	.word	0x20000c2c
 8007f10:	20000c14 	.word	0x20000c14

08007f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d108      	bne.n	8007f38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 ff6a 	bl	8008e04 <vPortFree>
				vPortFree( pxTCB );
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 ff67 	bl	8008e04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f36:	e017      	b.n	8007f68 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d103      	bne.n	8007f4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 ff5e 	bl	8008e04 <vPortFree>
	}
 8007f48:	e00e      	b.n	8007f68 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d009      	beq.n	8007f68 <prvDeleteTCB+0x54>
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	e7fe      	b.n	8007f66 <prvDeleteTCB+0x52>
	}
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f76:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <prvResetNextTaskUnblockTime+0x38>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f80:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <prvResetNextTaskUnblockTime+0x3c>)
 8007f82:	f04f 32ff 	mov.w	r2, #4294967295
 8007f86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f88:	e008      	b.n	8007f9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8a:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <prvResetNextTaskUnblockTime+0x38>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	4a04      	ldr	r2, [pc, #16]	; (8007fac <prvResetNextTaskUnblockTime+0x3c>)
 8007f9a:	6013      	str	r3, [r2, #0]
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	20000be4 	.word	0x20000be4
 8007fac:	20000c4c 	.word	0x20000c4c

08007fb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fb6:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <xTaskGetSchedulerState+0x34>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	607b      	str	r3, [r7, #4]
 8007fc2:	e008      	b.n	8007fd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fc4:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <xTaskGetSchedulerState+0x38>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fcc:	2302      	movs	r3, #2
 8007fce:	607b      	str	r3, [r7, #4]
 8007fd0:	e001      	b.n	8007fd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fd6:	687b      	ldr	r3, [r7, #4]
	}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	20000c38 	.word	0x20000c38
 8007fe8:	20000c54 	.word	0x20000c54

08007fec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d054      	beq.n	80080ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008002:	4b2d      	ldr	r3, [pc, #180]	; (80080b8 <xTaskPriorityDisinherit+0xcc>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	429a      	cmp	r2, r3
 800800a:	d009      	beq.n	8008020 <xTaskPriorityDisinherit+0x34>
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	e7fe      	b.n	800801e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008024:	2b00      	cmp	r3, #0
 8008026:	d109      	bne.n	800803c <xTaskPriorityDisinherit+0x50>
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	60bb      	str	r3, [r7, #8]
 800803a:	e7fe      	b.n	800803a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008040:	1e5a      	subs	r2, r3, #1
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804e:	429a      	cmp	r2, r3
 8008050:	d02c      	beq.n	80080ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008056:	2b00      	cmp	r3, #0
 8008058:	d128      	bne.n	80080ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	3304      	adds	r3, #4
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe fbe2 	bl	8006828 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <xTaskPriorityDisinherit+0xd0>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d903      	bls.n	800808c <xTaskPriorityDisinherit+0xa0>
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	4a0c      	ldr	r2, [pc, #48]	; (80080bc <xTaskPriorityDisinherit+0xd0>)
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <xTaskPriorityDisinherit+0xd4>)
 800809a:	441a      	add	r2, r3
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7fe fb63 	bl	800676e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080ac:	697b      	ldr	r3, [r7, #20]
	}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000758 	.word	0x20000758
 80080bc:	20000c34 	.word	0x20000c34
 80080c0:	2000075c 	.word	0x2000075c

080080c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080ce:	4b21      	ldr	r3, [pc, #132]	; (8008154 <prvAddCurrentTaskToDelayedList+0x90>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080d4:	4b20      	ldr	r3, [pc, #128]	; (8008158 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3304      	adds	r3, #4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe fba4 	bl	8006828 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d10a      	bne.n	80080fe <prvAddCurrentTaskToDelayedList+0x3a>
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ee:	4b1a      	ldr	r3, [pc, #104]	; (8008158 <prvAddCurrentTaskToDelayedList+0x94>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3304      	adds	r3, #4
 80080f4:	4619      	mov	r1, r3
 80080f6:	4819      	ldr	r0, [pc, #100]	; (800815c <prvAddCurrentTaskToDelayedList+0x98>)
 80080f8:	f7fe fb39 	bl	800676e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080fc:	e026      	b.n	800814c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4413      	add	r3, r2
 8008104:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008106:	4b14      	ldr	r3, [pc, #80]	; (8008158 <prvAddCurrentTaskToDelayedList+0x94>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	429a      	cmp	r2, r3
 8008114:	d209      	bcs.n	800812a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008116:	4b12      	ldr	r3, [pc, #72]	; (8008160 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <prvAddCurrentTaskToDelayedList+0x94>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3304      	adds	r3, #4
 8008120:	4619      	mov	r1, r3
 8008122:	4610      	mov	r0, r2
 8008124:	f7fe fb47 	bl	80067b6 <vListInsert>
}
 8008128:	e010      	b.n	800814c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800812a:	4b0e      	ldr	r3, [pc, #56]	; (8008164 <prvAddCurrentTaskToDelayedList+0xa0>)
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <prvAddCurrentTaskToDelayedList+0x94>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3304      	adds	r3, #4
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7fe fb3d 	bl	80067b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <prvAddCurrentTaskToDelayedList+0xa4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	429a      	cmp	r2, r3
 8008144:	d202      	bcs.n	800814c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008146:	4a08      	ldr	r2, [pc, #32]	; (8008168 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	6013      	str	r3, [r2, #0]
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20000c30 	.word	0x20000c30
 8008158:	20000758 	.word	0x20000758
 800815c:	20000c18 	.word	0x20000c18
 8008160:	20000be8 	.word	0x20000be8
 8008164:	20000be4 	.word	0x20000be4
 8008168:	20000c4c 	.word	0x20000c4c

0800816c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	; 0x28
 8008170:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008176:	f000 faff 	bl	8008778 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800817a:	4b1c      	ldr	r3, [pc, #112]	; (80081ec <xTimerCreateTimerTask+0x80>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d021      	beq.n	80081c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800818a:	1d3a      	adds	r2, r7, #4
 800818c:	f107 0108 	add.w	r1, r7, #8
 8008190:	f107 030c 	add.w	r3, r7, #12
 8008194:	4618      	mov	r0, r3
 8008196:	f7fe faa3 	bl	80066e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	9202      	str	r2, [sp, #8]
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	2302      	movs	r3, #2
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	2300      	movs	r3, #0
 80081aa:	460a      	mov	r2, r1
 80081ac:	4910      	ldr	r1, [pc, #64]	; (80081f0 <xTimerCreateTimerTask+0x84>)
 80081ae:	4811      	ldr	r0, [pc, #68]	; (80081f4 <xTimerCreateTimerTask+0x88>)
 80081b0:	f7ff f8f6 	bl	80073a0 <xTaskCreateStatic>
 80081b4:	4602      	mov	r2, r0
 80081b6:	4b10      	ldr	r3, [pc, #64]	; (80081f8 <xTimerCreateTimerTask+0x8c>)
 80081b8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081ba:	4b0f      	ldr	r3, [pc, #60]	; (80081f8 <xTimerCreateTimerTask+0x8c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081c2:	2301      	movs	r3, #1
 80081c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d109      	bne.n	80081e0 <xTimerCreateTimerTask+0x74>
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	613b      	str	r3, [r7, #16]
 80081de:	e7fe      	b.n	80081de <xTimerCreateTimerTask+0x72>
	return xReturn;
 80081e0:	697b      	ldr	r3, [r7, #20]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000c88 	.word	0x20000c88
 80081f0:	0800a720 	.word	0x0800a720
 80081f4:	0800832d 	.word	0x0800832d
 80081f8:	20000c8c 	.word	0x20000c8c

080081fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08a      	sub	sp, #40	; 0x28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800820a:	2300      	movs	r3, #0
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d109      	bne.n	8008228 <xTimerGenericCommand+0x2c>
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	623b      	str	r3, [r7, #32]
 8008226:	e7fe      	b.n	8008226 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008228:	4b19      	ldr	r3, [pc, #100]	; (8008290 <xTimerGenericCommand+0x94>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d02a      	beq.n	8008286 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b05      	cmp	r3, #5
 8008240:	dc18      	bgt.n	8008274 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008242:	f7ff feb5 	bl	8007fb0 <xTaskGetSchedulerState>
 8008246:	4603      	mov	r3, r0
 8008248:	2b02      	cmp	r3, #2
 800824a:	d109      	bne.n	8008260 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800824c:	4b10      	ldr	r3, [pc, #64]	; (8008290 <xTimerGenericCommand+0x94>)
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	f107 0110 	add.w	r1, r7, #16
 8008254:	2300      	movs	r3, #0
 8008256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008258:	f7fe fc4e 	bl	8006af8 <xQueueGenericSend>
 800825c:	6278      	str	r0, [r7, #36]	; 0x24
 800825e:	e012      	b.n	8008286 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008260:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <xTimerGenericCommand+0x94>)
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	f107 0110 	add.w	r1, r7, #16
 8008268:	2300      	movs	r3, #0
 800826a:	2200      	movs	r2, #0
 800826c:	f7fe fc44 	bl	8006af8 <xQueueGenericSend>
 8008270:	6278      	str	r0, [r7, #36]	; 0x24
 8008272:	e008      	b.n	8008286 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008274:	4b06      	ldr	r3, [pc, #24]	; (8008290 <xTimerGenericCommand+0x94>)
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	f107 0110 	add.w	r1, r7, #16
 800827c:	2300      	movs	r3, #0
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	f7fe fd34 	bl	8006cec <xQueueGenericSendFromISR>
 8008284:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008288:	4618      	mov	r0, r3
 800828a:	3728      	adds	r7, #40	; 0x28
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20000c88 	.word	0x20000c88

08008294 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af02      	add	r7, sp, #8
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800829e:	4b22      	ldr	r3, [pc, #136]	; (8008328 <prvProcessExpiredTimer+0x94>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fe fabb 	bl	8006828 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d021      	beq.n	8008304 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	699a      	ldr	r2, [r3, #24]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	18d1      	adds	r1, r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	6978      	ldr	r0, [r7, #20]
 80082ce:	f000 f8d1 	bl	8008474 <prvInsertTimerInActiveList>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01e      	beq.n	8008316 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082d8:	2300      	movs	r3, #0
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	2300      	movs	r3, #0
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	2100      	movs	r1, #0
 80082e2:	6978      	ldr	r0, [r7, #20]
 80082e4:	f7ff ff8a 	bl	80081fc <xTimerGenericCommand>
 80082e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d112      	bne.n	8008316 <prvProcessExpiredTimer+0x82>
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	e7fe      	b.n	8008302 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800830a:	f023 0301 	bic.w	r3, r3, #1
 800830e:	b2da      	uxtb	r2, r3
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	6978      	ldr	r0, [r7, #20]
 800831c:	4798      	blx	r3
}
 800831e:	bf00      	nop
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20000c80 	.word	0x20000c80

0800832c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008334:	f107 0308 	add.w	r3, r7, #8
 8008338:	4618      	mov	r0, r3
 800833a:	f000 f857 	bl	80083ec <prvGetNextExpireTime>
 800833e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4619      	mov	r1, r3
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 f803 	bl	8008350 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800834a:	f000 f8d5 	bl	80084f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800834e:	e7f1      	b.n	8008334 <prvTimerTask+0x8>

08008350 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800835a:	f7ff fa57 	bl	800780c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800835e:	f107 0308 	add.w	r3, r7, #8
 8008362:	4618      	mov	r0, r3
 8008364:	f000 f866 	bl	8008434 <prvSampleTimeNow>
 8008368:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d130      	bne.n	80083d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <prvProcessTimerOrBlockTask+0x3c>
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	429a      	cmp	r2, r3
 800837c:	d806      	bhi.n	800838c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800837e:	f7ff fa53 	bl	8007828 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008382:	68f9      	ldr	r1, [r7, #12]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ff85 	bl	8008294 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800838a:	e024      	b.n	80083d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008392:	4b13      	ldr	r3, [pc, #76]	; (80083e0 <prvProcessTimerOrBlockTask+0x90>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <prvProcessTimerOrBlockTask+0x50>
 800839c:	2301      	movs	r3, #1
 800839e:	e000      	b.n	80083a2 <prvProcessTimerOrBlockTask+0x52>
 80083a0:	2300      	movs	r3, #0
 80083a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <prvProcessTimerOrBlockTask+0x94>)
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	4619      	mov	r1, r3
 80083b2:	f7fe ffc1 	bl	8007338 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083b6:	f7ff fa37 	bl	8007828 <xTaskResumeAll>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10a      	bne.n	80083d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083c0:	4b09      	ldr	r3, [pc, #36]	; (80083e8 <prvProcessTimerOrBlockTask+0x98>)
 80083c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
}
 80083d0:	e001      	b.n	80083d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083d2:	f7ff fa29 	bl	8007828 <xTaskResumeAll>
}
 80083d6:	bf00      	nop
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000c84 	.word	0x20000c84
 80083e4:	20000c88 	.word	0x20000c88
 80083e8:	e000ed04 	.word	0xe000ed04

080083ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083f4:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <prvGetNextExpireTime+0x44>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <prvGetNextExpireTime+0x16>
 80083fe:	2201      	movs	r2, #1
 8008400:	e000      	b.n	8008404 <prvGetNextExpireTime+0x18>
 8008402:	2200      	movs	r2, #0
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d105      	bne.n	800841c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008410:	4b07      	ldr	r3, [pc, #28]	; (8008430 <prvGetNextExpireTime+0x44>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	e001      	b.n	8008420 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008420:	68fb      	ldr	r3, [r7, #12]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	20000c80 	.word	0x20000c80

08008434 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800843c:	f7ff fa90 	bl	8007960 <xTaskGetTickCount>
 8008440:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008442:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <prvSampleTimeNow+0x3c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	429a      	cmp	r2, r3
 800844a:	d205      	bcs.n	8008458 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800844c:	f000 f930 	bl	80086b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	e002      	b.n	800845e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800845e:	4a04      	ldr	r2, [pc, #16]	; (8008470 <prvSampleTimeNow+0x3c>)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008464:	68fb      	ldr	r3, [r7, #12]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000c90 	.word	0x20000c90

08008474 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008482:	2300      	movs	r3, #0
 8008484:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	429a      	cmp	r2, r3
 8008498:	d812      	bhi.n	80084c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d302      	bcc.n	80084ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084a8:	2301      	movs	r3, #1
 80084aa:	617b      	str	r3, [r7, #20]
 80084ac:	e01b      	b.n	80084e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084ae:	4b10      	ldr	r3, [pc, #64]	; (80084f0 <prvInsertTimerInActiveList+0x7c>)
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3304      	adds	r3, #4
 80084b6:	4619      	mov	r1, r3
 80084b8:	4610      	mov	r0, r2
 80084ba:	f7fe f97c 	bl	80067b6 <vListInsert>
 80084be:	e012      	b.n	80084e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d206      	bcs.n	80084d6 <prvInsertTimerInActiveList+0x62>
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d302      	bcc.n	80084d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084d0:	2301      	movs	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	e007      	b.n	80084e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084d6:	4b07      	ldr	r3, [pc, #28]	; (80084f4 <prvInsertTimerInActiveList+0x80>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3304      	adds	r3, #4
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f7fe f968 	bl	80067b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084e6:	697b      	ldr	r3, [r7, #20]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20000c84 	.word	0x20000c84
 80084f4:	20000c80 	.word	0x20000c80

080084f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08e      	sub	sp, #56	; 0x38
 80084fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084fe:	e0c6      	b.n	800868e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	da17      	bge.n	8008536 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008506:	1d3b      	adds	r3, r7, #4
 8008508:	3304      	adds	r3, #4
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d109      	bne.n	8008526 <prvProcessReceivedCommands+0x2e>
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	61fb      	str	r3, [r7, #28]
 8008524:	e7fe      	b.n	8008524 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800852c:	6850      	ldr	r0, [r2, #4]
 800852e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008530:	6892      	ldr	r2, [r2, #8]
 8008532:	4611      	mov	r1, r2
 8008534:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	f2c0 80a7 	blt.w	800868c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe f96a 	bl	8006828 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008554:	463b      	mov	r3, r7
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff ff6c 	bl	8008434 <prvSampleTimeNow>
 800855c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b09      	cmp	r3, #9
 8008562:	f200 8094 	bhi.w	800868e <prvProcessReceivedCommands+0x196>
 8008566:	a201      	add	r2, pc, #4	; (adr r2, 800856c <prvProcessReceivedCommands+0x74>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	08008595 	.word	0x08008595
 8008570:	08008595 	.word	0x08008595
 8008574:	08008595 	.word	0x08008595
 8008578:	08008607 	.word	0x08008607
 800857c:	0800861b 	.word	0x0800861b
 8008580:	08008663 	.word	0x08008663
 8008584:	08008595 	.word	0x08008595
 8008588:	08008595 	.word	0x08008595
 800858c:	08008607 	.word	0x08008607
 8008590:	0800861b 	.word	0x0800861b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800859a:	f043 0301 	orr.w	r3, r3, #1
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	18d1      	adds	r1, r2, r3
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085b4:	f7ff ff5e 	bl	8008474 <prvInsertTimerInActiveList>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d067      	beq.n	800868e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d05c      	beq.n	800868e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	441a      	add	r2, r3
 80085dc:	2300      	movs	r3, #0
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2300      	movs	r3, #0
 80085e2:	2100      	movs	r1, #0
 80085e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e6:	f7ff fe09 	bl	80081fc <xTimerGenericCommand>
 80085ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d14d      	bne.n	800868e <prvProcessReceivedCommands+0x196>
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	e7fe      	b.n	8008604 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800860c:	f023 0301 	bic.w	r3, r3, #1
 8008610:	b2da      	uxtb	r2, r3
 8008612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008614:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008618:	e039      	b.n	800868e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008620:	f043 0301 	orr.w	r3, r3, #1
 8008624:	b2da      	uxtb	r2, r3
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d109      	bne.n	800864e <prvProcessReceivedCommands+0x156>
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	617b      	str	r3, [r7, #20]
 800864c:	e7fe      	b.n	800864c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	18d1      	adds	r1, r2, r3
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800865c:	f7ff ff0a 	bl	8008474 <prvInsertTimerInActiveList>
					break;
 8008660:	e015      	b.n	800868e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d103      	bne.n	8008678 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008672:	f000 fbc7 	bl	8008e04 <vPortFree>
 8008676:	e00a      	b.n	800868e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800867e:	f023 0301 	bic.w	r3, r3, #1
 8008682:	b2da      	uxtb	r2, r3
 8008684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800868a:	e000      	b.n	800868e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800868c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800868e:	4b07      	ldr	r3, [pc, #28]	; (80086ac <prvProcessReceivedCommands+0x1b4>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	1d39      	adds	r1, r7, #4
 8008694:	2200      	movs	r2, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fbbc 	bl	8006e14 <xQueueReceive>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f47f af2e 	bne.w	8008500 <prvProcessReceivedCommands+0x8>
	}
}
 80086a4:	bf00      	nop
 80086a6:	3730      	adds	r7, #48	; 0x30
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000c88 	.word	0x20000c88

080086b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086b6:	e047      	b.n	8008748 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086b8:	4b2d      	ldr	r3, [pc, #180]	; (8008770 <prvSwitchTimerLists+0xc0>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c2:	4b2b      	ldr	r3, [pc, #172]	; (8008770 <prvSwitchTimerLists+0xc0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe f8a9 	bl	8006828 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086e4:	f003 0304 	and.w	r3, r3, #4
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d02d      	beq.n	8008748 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	4413      	add	r3, r2
 80086f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d90e      	bls.n	800871c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800870a:	4b19      	ldr	r3, [pc, #100]	; (8008770 <prvSwitchTimerLists+0xc0>)
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3304      	adds	r3, #4
 8008712:	4619      	mov	r1, r3
 8008714:	4610      	mov	r0, r2
 8008716:	f7fe f84e 	bl	80067b6 <vListInsert>
 800871a:	e015      	b.n	8008748 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	2300      	movs	r3, #0
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	2100      	movs	r1, #0
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff fd68 	bl	80081fc <xTimerGenericCommand>
 800872c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d109      	bne.n	8008748 <prvSwitchTimerLists+0x98>
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	603b      	str	r3, [r7, #0]
 8008746:	e7fe      	b.n	8008746 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008748:	4b09      	ldr	r3, [pc, #36]	; (8008770 <prvSwitchTimerLists+0xc0>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1b2      	bne.n	80086b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008752:	4b07      	ldr	r3, [pc, #28]	; (8008770 <prvSwitchTimerLists+0xc0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008758:	4b06      	ldr	r3, [pc, #24]	; (8008774 <prvSwitchTimerLists+0xc4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a04      	ldr	r2, [pc, #16]	; (8008770 <prvSwitchTimerLists+0xc0>)
 800875e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008760:	4a04      	ldr	r2, [pc, #16]	; (8008774 <prvSwitchTimerLists+0xc4>)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	6013      	str	r3, [r2, #0]
}
 8008766:	bf00      	nop
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000c80 	.word	0x20000c80
 8008774:	20000c84 	.word	0x20000c84

08008778 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800877e:	f000 f965 	bl	8008a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <prvCheckForValidListAndQueue+0x60>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d120      	bne.n	80087cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800878a:	4814      	ldr	r0, [pc, #80]	; (80087dc <prvCheckForValidListAndQueue+0x64>)
 800878c:	f7fd ffc2 	bl	8006714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008790:	4813      	ldr	r0, [pc, #76]	; (80087e0 <prvCheckForValidListAndQueue+0x68>)
 8008792:	f7fd ffbf 	bl	8006714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008796:	4b13      	ldr	r3, [pc, #76]	; (80087e4 <prvCheckForValidListAndQueue+0x6c>)
 8008798:	4a10      	ldr	r2, [pc, #64]	; (80087dc <prvCheckForValidListAndQueue+0x64>)
 800879a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800879c:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <prvCheckForValidListAndQueue+0x70>)
 800879e:	4a10      	ldr	r2, [pc, #64]	; (80087e0 <prvCheckForValidListAndQueue+0x68>)
 80087a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087a2:	2300      	movs	r3, #0
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	4b11      	ldr	r3, [pc, #68]	; (80087ec <prvCheckForValidListAndQueue+0x74>)
 80087a8:	4a11      	ldr	r2, [pc, #68]	; (80087f0 <prvCheckForValidListAndQueue+0x78>)
 80087aa:	2110      	movs	r1, #16
 80087ac:	200a      	movs	r0, #10
 80087ae:	f7fe f8cd 	bl	800694c <xQueueGenericCreateStatic>
 80087b2:	4602      	mov	r2, r0
 80087b4:	4b08      	ldr	r3, [pc, #32]	; (80087d8 <prvCheckForValidListAndQueue+0x60>)
 80087b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087b8:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <prvCheckForValidListAndQueue+0x60>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d005      	beq.n	80087cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087c0:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <prvCheckForValidListAndQueue+0x60>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	490b      	ldr	r1, [pc, #44]	; (80087f4 <prvCheckForValidListAndQueue+0x7c>)
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fd8e 	bl	80072e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087cc:	f000 f96c 	bl	8008aa8 <vPortExitCritical>
}
 80087d0:	bf00      	nop
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000c88 	.word	0x20000c88
 80087dc:	20000c58 	.word	0x20000c58
 80087e0:	20000c6c 	.word	0x20000c6c
 80087e4:	20000c80 	.word	0x20000c80
 80087e8:	20000c84 	.word	0x20000c84
 80087ec:	20000d34 	.word	0x20000d34
 80087f0:	20000c94 	.word	0x20000c94
 80087f4:	0800a728 	.word	0x0800a728

080087f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3b04      	subs	r3, #4
 8008808:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3b04      	subs	r3, #4
 8008816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f023 0201 	bic.w	r2, r3, #1
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3b04      	subs	r3, #4
 8008826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008828:	4a0c      	ldr	r2, [pc, #48]	; (800885c <pxPortInitialiseStack+0x64>)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3b14      	subs	r3, #20
 8008832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3b04      	subs	r3, #4
 800883e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f06f 0202 	mvn.w	r2, #2
 8008846:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3b20      	subs	r3, #32
 800884c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800884e:	68fb      	ldr	r3, [r7, #12]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	08008861 	.word	0x08008861

08008860 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008866:	2300      	movs	r3, #0
 8008868:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800886a:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <prvTaskExitError+0x50>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008872:	d009      	beq.n	8008888 <prvTaskExitError+0x28>
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	e7fe      	b.n	8008886 <prvTaskExitError+0x26>
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800889a:	bf00      	nop
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0fc      	beq.n	800889c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088a2:	bf00      	nop
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	20000014 	.word	0x20000014
	...

080088c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088c0:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <pxCurrentTCBConst2>)
 80088c2:	6819      	ldr	r1, [r3, #0]
 80088c4:	6808      	ldr	r0, [r1, #0]
 80088c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ca:	f380 8809 	msr	PSP, r0
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f04f 0000 	mov.w	r0, #0
 80088d6:	f380 8811 	msr	BASEPRI, r0
 80088da:	4770      	bx	lr
 80088dc:	f3af 8000 	nop.w

080088e0 <pxCurrentTCBConst2>:
 80088e0:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop

080088e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088e8:	4808      	ldr	r0, [pc, #32]	; (800890c <prvPortStartFirstTask+0x24>)
 80088ea:	6800      	ldr	r0, [r0, #0]
 80088ec:	6800      	ldr	r0, [r0, #0]
 80088ee:	f380 8808 	msr	MSP, r0
 80088f2:	f04f 0000 	mov.w	r0, #0
 80088f6:	f380 8814 	msr	CONTROL, r0
 80088fa:	b662      	cpsie	i
 80088fc:	b661      	cpsie	f
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	df00      	svc	0
 8008908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800890a:	bf00      	nop
 800890c:	e000ed08 	.word	0xe000ed08

08008910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008916:	4b44      	ldr	r3, [pc, #272]	; (8008a28 <xPortStartScheduler+0x118>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a44      	ldr	r2, [pc, #272]	; (8008a2c <xPortStartScheduler+0x11c>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d109      	bne.n	8008934 <xPortStartScheduler+0x24>
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	e7fe      	b.n	8008932 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008934:	4b3c      	ldr	r3, [pc, #240]	; (8008a28 <xPortStartScheduler+0x118>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a3d      	ldr	r2, [pc, #244]	; (8008a30 <xPortStartScheduler+0x120>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d109      	bne.n	8008952 <xPortStartScheduler+0x42>
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	e7fe      	b.n	8008950 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008952:	4b38      	ldr	r3, [pc, #224]	; (8008a34 <xPortStartScheduler+0x124>)
 8008954:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	22ff      	movs	r2, #255	; 0xff
 8008962:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	b2db      	uxtb	r3, r3
 800896a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008974:	b2da      	uxtb	r2, r3
 8008976:	4b30      	ldr	r3, [pc, #192]	; (8008a38 <xPortStartScheduler+0x128>)
 8008978:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800897a:	4b30      	ldr	r3, [pc, #192]	; (8008a3c <xPortStartScheduler+0x12c>)
 800897c:	2207      	movs	r2, #7
 800897e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008980:	e009      	b.n	8008996 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008982:	4b2e      	ldr	r3, [pc, #184]	; (8008a3c <xPortStartScheduler+0x12c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3b01      	subs	r3, #1
 8008988:	4a2c      	ldr	r2, [pc, #176]	; (8008a3c <xPortStartScheduler+0x12c>)
 800898a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800898c:	78fb      	ldrb	r3, [r7, #3]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	b2db      	uxtb	r3, r3
 8008994:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008996:	78fb      	ldrb	r3, [r7, #3]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899e:	2b80      	cmp	r3, #128	; 0x80
 80089a0:	d0ef      	beq.n	8008982 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089a2:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <xPortStartScheduler+0x12c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f1c3 0307 	rsb	r3, r3, #7
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d009      	beq.n	80089c2 <xPortStartScheduler+0xb2>
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	60bb      	str	r3, [r7, #8]
 80089c0:	e7fe      	b.n	80089c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089c2:	4b1e      	ldr	r3, [pc, #120]	; (8008a3c <xPortStartScheduler+0x12c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	4a1c      	ldr	r2, [pc, #112]	; (8008a3c <xPortStartScheduler+0x12c>)
 80089ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089cc:	4b1b      	ldr	r3, [pc, #108]	; (8008a3c <xPortStartScheduler+0x12c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089d4:	4a19      	ldr	r2, [pc, #100]	; (8008a3c <xPortStartScheduler+0x12c>)
 80089d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089e0:	4b17      	ldr	r3, [pc, #92]	; (8008a40 <xPortStartScheduler+0x130>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a16      	ldr	r2, [pc, #88]	; (8008a40 <xPortStartScheduler+0x130>)
 80089e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089ec:	4b14      	ldr	r3, [pc, #80]	; (8008a40 <xPortStartScheduler+0x130>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a13      	ldr	r2, [pc, #76]	; (8008a40 <xPortStartScheduler+0x130>)
 80089f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089f8:	f000 f8d6 	bl	8008ba8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089fc:	4b11      	ldr	r3, [pc, #68]	; (8008a44 <xPortStartScheduler+0x134>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a02:	f000 f8f5 	bl	8008bf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a06:	4b10      	ldr	r3, [pc, #64]	; (8008a48 <xPortStartScheduler+0x138>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a0f      	ldr	r2, [pc, #60]	; (8008a48 <xPortStartScheduler+0x138>)
 8008a0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a12:	f7ff ff69 	bl	80088e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a16:	f7ff f86b 	bl	8007af0 <vTaskSwitchContext>
	prvTaskExitError();
 8008a1a:	f7ff ff21 	bl	8008860 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	e000ed00 	.word	0xe000ed00
 8008a2c:	410fc271 	.word	0x410fc271
 8008a30:	410fc270 	.word	0x410fc270
 8008a34:	e000e400 	.word	0xe000e400
 8008a38:	20000d84 	.word	0x20000d84
 8008a3c:	20000d88 	.word	0x20000d88
 8008a40:	e000ed20 	.word	0xe000ed20
 8008a44:	20000014 	.word	0x20000014
 8008a48:	e000ef34 	.word	0xe000ef34

08008a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a64:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <vPortEnterCritical+0x54>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	4a0d      	ldr	r2, [pc, #52]	; (8008aa0 <vPortEnterCritical+0x54>)
 8008a6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <vPortEnterCritical+0x54>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d10e      	bne.n	8008a94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a76:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <vPortEnterCritical+0x58>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d009      	beq.n	8008a94 <vPortEnterCritical+0x48>
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	603b      	str	r3, [r7, #0]
 8008a92:	e7fe      	b.n	8008a92 <vPortEnterCritical+0x46>
	}
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20000014 	.word	0x20000014
 8008aa4:	e000ed04 	.word	0xe000ed04

08008aa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008aae:	4b11      	ldr	r3, [pc, #68]	; (8008af4 <vPortExitCritical+0x4c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d109      	bne.n	8008aca <vPortExitCritical+0x22>
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	607b      	str	r3, [r7, #4]
 8008ac8:	e7fe      	b.n	8008ac8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008aca:	4b0a      	ldr	r3, [pc, #40]	; (8008af4 <vPortExitCritical+0x4c>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4a08      	ldr	r2, [pc, #32]	; (8008af4 <vPortExitCritical+0x4c>)
 8008ad2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ad4:	4b07      	ldr	r3, [pc, #28]	; (8008af4 <vPortExitCritical+0x4c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <vPortExitCritical+0x3e>
 8008adc:	2300      	movs	r3, #0
 8008ade:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ae6:	bf00      	nop
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20000014 	.word	0x20000014
	...

08008b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b00:	f3ef 8009 	mrs	r0, PSP
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	4b15      	ldr	r3, [pc, #84]	; (8008b60 <pxCurrentTCBConst>)
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	f01e 0f10 	tst.w	lr, #16
 8008b10:	bf08      	it	eq
 8008b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1a:	6010      	str	r0, [r2, #0]
 8008b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b24:	f380 8811 	msr	BASEPRI, r0
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f7fe ffde 	bl	8007af0 <vTaskSwitchContext>
 8008b34:	f04f 0000 	mov.w	r0, #0
 8008b38:	f380 8811 	msr	BASEPRI, r0
 8008b3c:	bc09      	pop	{r0, r3}
 8008b3e:	6819      	ldr	r1, [r3, #0]
 8008b40:	6808      	ldr	r0, [r1, #0]
 8008b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b46:	f01e 0f10 	tst.w	lr, #16
 8008b4a:	bf08      	it	eq
 8008b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b50:	f380 8809 	msr	PSP, r0
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	f3af 8000 	nop.w

08008b60 <pxCurrentTCBConst>:
 8008b60:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop

08008b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b80:	f7fe fefe 	bl	8007980 <xTaskIncrementTick>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d003      	beq.n	8008b92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b8a:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <SysTick_Handler+0x3c>)
 8008b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b90:	601a      	str	r2, [r3, #0]
 8008b92:	2300      	movs	r3, #0
 8008b94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	e000ed04 	.word	0xe000ed04

08008ba8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bac:	4b0b      	ldr	r3, [pc, #44]	; (8008bdc <vPortSetupTimerInterrupt+0x34>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bb2:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <vPortSetupTimerInterrupt+0x38>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bb8:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <vPortSetupTimerInterrupt+0x3c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a0a      	ldr	r2, [pc, #40]	; (8008be8 <vPortSetupTimerInterrupt+0x40>)
 8008bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc2:	099b      	lsrs	r3, r3, #6
 8008bc4:	4a09      	ldr	r2, [pc, #36]	; (8008bec <vPortSetupTimerInterrupt+0x44>)
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bca:	4b04      	ldr	r3, [pc, #16]	; (8008bdc <vPortSetupTimerInterrupt+0x34>)
 8008bcc:	2207      	movs	r2, #7
 8008bce:	601a      	str	r2, [r3, #0]
}
 8008bd0:	bf00      	nop
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	e000e010 	.word	0xe000e010
 8008be0:	e000e018 	.word	0xe000e018
 8008be4:	20000008 	.word	0x20000008
 8008be8:	10624dd3 	.word	0x10624dd3
 8008bec:	e000e014 	.word	0xe000e014

08008bf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c00 <vPortEnableVFP+0x10>
 8008bf4:	6801      	ldr	r1, [r0, #0]
 8008bf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bfa:	6001      	str	r1, [r0, #0]
 8008bfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bfe:	bf00      	nop
 8008c00:	e000ed88 	.word	0xe000ed88

08008c04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c0a:	f3ef 8305 	mrs	r3, IPSR
 8008c0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b0f      	cmp	r3, #15
 8008c14:	d913      	bls.n	8008c3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c16:	4a16      	ldr	r2, [pc, #88]	; (8008c70 <vPortValidateInterruptPriority+0x6c>)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c20:	4b14      	ldr	r3, [pc, #80]	; (8008c74 <vPortValidateInterruptPriority+0x70>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	7afa      	ldrb	r2, [r7, #11]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d209      	bcs.n	8008c3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	607b      	str	r3, [r7, #4]
 8008c3c:	e7fe      	b.n	8008c3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c3e:	4b0e      	ldr	r3, [pc, #56]	; (8008c78 <vPortValidateInterruptPriority+0x74>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c46:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <vPortValidateInterruptPriority+0x78>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d909      	bls.n	8008c62 <vPortValidateInterruptPriority+0x5e>
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	e7fe      	b.n	8008c60 <vPortValidateInterruptPriority+0x5c>
	}
 8008c62:	bf00      	nop
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	e000e3f0 	.word	0xe000e3f0
 8008c74:	20000d84 	.word	0x20000d84
 8008c78:	e000ed0c 	.word	0xe000ed0c
 8008c7c:	20000d88 	.word	0x20000d88

08008c80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c8c:	f7fe fdbe 	bl	800780c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c90:	4b57      	ldr	r3, [pc, #348]	; (8008df0 <pvPortMalloc+0x170>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c98:	f000 f90c 	bl	8008eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c9c:	4b55      	ldr	r3, [pc, #340]	; (8008df4 <pvPortMalloc+0x174>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f040 808c 	bne.w	8008dc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01c      	beq.n	8008cea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008cb0:	2208      	movs	r2, #8
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d013      	beq.n	8008cea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f023 0307 	bic.w	r3, r3, #7
 8008cc8:	3308      	adds	r3, #8
 8008cca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f003 0307 	and.w	r3, r3, #7
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d009      	beq.n	8008cea <pvPortMalloc+0x6a>
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	e7fe      	b.n	8008ce8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d068      	beq.n	8008dc2 <pvPortMalloc+0x142>
 8008cf0:	4b41      	ldr	r3, [pc, #260]	; (8008df8 <pvPortMalloc+0x178>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d863      	bhi.n	8008dc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cfa:	4b40      	ldr	r3, [pc, #256]	; (8008dfc <pvPortMalloc+0x17c>)
 8008cfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cfe:	4b3f      	ldr	r3, [pc, #252]	; (8008dfc <pvPortMalloc+0x17c>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d04:	e004      	b.n	8008d10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d903      	bls.n	8008d22 <pvPortMalloc+0xa2>
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f1      	bne.n	8008d06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d22:	4b33      	ldr	r3, [pc, #204]	; (8008df0 <pvPortMalloc+0x170>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d04a      	beq.n	8008dc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2208      	movs	r2, #8
 8008d32:	4413      	add	r3, r2
 8008d34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	1ad2      	subs	r2, r2, r3
 8008d46:	2308      	movs	r3, #8
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d91e      	bls.n	8008d8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4413      	add	r3, r2
 8008d54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	f003 0307 	and.w	r3, r3, #7
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d009      	beq.n	8008d74 <pvPortMalloc+0xf4>
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	613b      	str	r3, [r7, #16]
 8008d72:	e7fe      	b.n	8008d72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	1ad2      	subs	r2, r2, r3
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d86:	69b8      	ldr	r0, [r7, #24]
 8008d88:	f000 f8f6 	bl	8008f78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <pvPortMalloc+0x178>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <pvPortMalloc+0x178>)
 8008d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d9a:	4b17      	ldr	r3, [pc, #92]	; (8008df8 <pvPortMalloc+0x178>)
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b18      	ldr	r3, [pc, #96]	; (8008e00 <pvPortMalloc+0x180>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d203      	bcs.n	8008dae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008da6:	4b14      	ldr	r3, [pc, #80]	; (8008df8 <pvPortMalloc+0x178>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a15      	ldr	r2, [pc, #84]	; (8008e00 <pvPortMalloc+0x180>)
 8008dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <pvPortMalloc+0x174>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008dc2:	f7fe fd31 	bl	8007828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d009      	beq.n	8008de4 <pvPortMalloc+0x164>
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	e7fe      	b.n	8008de2 <pvPortMalloc+0x162>
	return pvReturn;
 8008de4:	69fb      	ldr	r3, [r7, #28]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3728      	adds	r7, #40	; 0x28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20004994 	.word	0x20004994
 8008df4:	200049a0 	.word	0x200049a0
 8008df8:	20004998 	.word	0x20004998
 8008dfc:	2000498c 	.word	0x2000498c
 8008e00:	2000499c 	.word	0x2000499c

08008e04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d046      	beq.n	8008ea4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e16:	2308      	movs	r3, #8
 8008e18:	425b      	negs	r3, r3
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	4b20      	ldr	r3, [pc, #128]	; (8008eac <vPortFree+0xa8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d109      	bne.n	8008e46 <vPortFree+0x42>
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	e7fe      	b.n	8008e44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <vPortFree+0x5e>
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	60bb      	str	r3, [r7, #8]
 8008e60:	e7fe      	b.n	8008e60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	4b11      	ldr	r3, [pc, #68]	; (8008eac <vPortFree+0xa8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d019      	beq.n	8008ea4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d115      	bne.n	8008ea4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4b0b      	ldr	r3, [pc, #44]	; (8008eac <vPortFree+0xa8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	43db      	mvns	r3, r3
 8008e82:	401a      	ands	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e88:	f7fe fcc0 	bl	800780c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <vPortFree+0xac>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4413      	add	r3, r2
 8008e96:	4a06      	ldr	r2, [pc, #24]	; (8008eb0 <vPortFree+0xac>)
 8008e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e9a:	6938      	ldr	r0, [r7, #16]
 8008e9c:	f000 f86c 	bl	8008f78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ea0:	f7fe fcc2 	bl	8007828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ea4:	bf00      	nop
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	200049a0 	.word	0x200049a0
 8008eb0:	20004998 	.word	0x20004998

08008eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ec0:	4b27      	ldr	r3, [pc, #156]	; (8008f60 <prvHeapInit+0xac>)
 8008ec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00c      	beq.n	8008ee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3307      	adds	r3, #7
 8008ed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f023 0307 	bic.w	r3, r3, #7
 8008eda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	4a1f      	ldr	r2, [pc, #124]	; (8008f60 <prvHeapInit+0xac>)
 8008ee4:	4413      	add	r3, r2
 8008ee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008eec:	4a1d      	ldr	r2, [pc, #116]	; (8008f64 <prvHeapInit+0xb0>)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ef2:	4b1c      	ldr	r3, [pc, #112]	; (8008f64 <prvHeapInit+0xb0>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	4413      	add	r3, r2
 8008efe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f00:	2208      	movs	r2, #8
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	1a9b      	subs	r3, r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f023 0307 	bic.w	r3, r3, #7
 8008f0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4a15      	ldr	r2, [pc, #84]	; (8008f68 <prvHeapInit+0xb4>)
 8008f14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f16:	4b14      	ldr	r3, [pc, #80]	; (8008f68 <prvHeapInit+0xb4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f1e:	4b12      	ldr	r3, [pc, #72]	; (8008f68 <prvHeapInit+0xb4>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	1ad2      	subs	r2, r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f34:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <prvHeapInit+0xb4>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	4a0a      	ldr	r2, [pc, #40]	; (8008f6c <prvHeapInit+0xb8>)
 8008f42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	4a09      	ldr	r2, [pc, #36]	; (8008f70 <prvHeapInit+0xbc>)
 8008f4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f4c:	4b09      	ldr	r3, [pc, #36]	; (8008f74 <prvHeapInit+0xc0>)
 8008f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f52:	601a      	str	r2, [r3, #0]
}
 8008f54:	bf00      	nop
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	20000d8c 	.word	0x20000d8c
 8008f64:	2000498c 	.word	0x2000498c
 8008f68:	20004994 	.word	0x20004994
 8008f6c:	2000499c 	.word	0x2000499c
 8008f70:	20004998 	.word	0x20004998
 8008f74:	200049a0 	.word	0x200049a0

08008f78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f80:	4b28      	ldr	r3, [pc, #160]	; (8009024 <prvInsertBlockIntoFreeList+0xac>)
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	e002      	b.n	8008f8c <prvInsertBlockIntoFreeList+0x14>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d8f7      	bhi.n	8008f86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d108      	bne.n	8008fba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	441a      	add	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	441a      	add	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d118      	bne.n	8009000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	4b15      	ldr	r3, [pc, #84]	; (8009028 <prvInsertBlockIntoFreeList+0xb0>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d00d      	beq.n	8008ff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	441a      	add	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	e008      	b.n	8009008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ff6:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <prvInsertBlockIntoFreeList+0xb0>)
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	e003      	b.n	8009008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	429a      	cmp	r2, r3
 800900e:	d002      	beq.n	8009016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	2000498c 	.word	0x2000498c
 8009028:	20004994 	.word	0x20004994
 800902c:	00000000 	.word	0x00000000

08009030 <atan>:
 8009030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	ec55 4b10 	vmov	r4, r5, d0
 8009038:	4bc3      	ldr	r3, [pc, #780]	; (8009348 <atan+0x318>)
 800903a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800903e:	429e      	cmp	r6, r3
 8009040:	46ab      	mov	fp, r5
 8009042:	dd18      	ble.n	8009076 <atan+0x46>
 8009044:	4bc1      	ldr	r3, [pc, #772]	; (800934c <atan+0x31c>)
 8009046:	429e      	cmp	r6, r3
 8009048:	dc01      	bgt.n	800904e <atan+0x1e>
 800904a:	d109      	bne.n	8009060 <atan+0x30>
 800904c:	b144      	cbz	r4, 8009060 <atan+0x30>
 800904e:	4622      	mov	r2, r4
 8009050:	462b      	mov	r3, r5
 8009052:	4620      	mov	r0, r4
 8009054:	4629      	mov	r1, r5
 8009056:	f7f7 f8c1 	bl	80001dc <__adddf3>
 800905a:	4604      	mov	r4, r0
 800905c:	460d      	mov	r5, r1
 800905e:	e006      	b.n	800906e <atan+0x3e>
 8009060:	f1bb 0f00 	cmp.w	fp, #0
 8009064:	f340 8131 	ble.w	80092ca <atan+0x29a>
 8009068:	a59b      	add	r5, pc, #620	; (adr r5, 80092d8 <atan+0x2a8>)
 800906a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800906e:	ec45 4b10 	vmov	d0, r4, r5
 8009072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009076:	4bb6      	ldr	r3, [pc, #728]	; (8009350 <atan+0x320>)
 8009078:	429e      	cmp	r6, r3
 800907a:	dc14      	bgt.n	80090a6 <atan+0x76>
 800907c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009080:	429e      	cmp	r6, r3
 8009082:	dc0d      	bgt.n	80090a0 <atan+0x70>
 8009084:	a396      	add	r3, pc, #600	; (adr r3, 80092e0 <atan+0x2b0>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	ee10 0a10 	vmov	r0, s0
 800908e:	4629      	mov	r1, r5
 8009090:	f7f7 f8a4 	bl	80001dc <__adddf3>
 8009094:	2200      	movs	r2, #0
 8009096:	4baf      	ldr	r3, [pc, #700]	; (8009354 <atan+0x324>)
 8009098:	f7f7 fce6 	bl	8000a68 <__aeabi_dcmpgt>
 800909c:	2800      	cmp	r0, #0
 800909e:	d1e6      	bne.n	800906e <atan+0x3e>
 80090a0:	f04f 3aff 	mov.w	sl, #4294967295
 80090a4:	e02b      	b.n	80090fe <atan+0xce>
 80090a6:	f000 f9a7 	bl	80093f8 <fabs>
 80090aa:	4bab      	ldr	r3, [pc, #684]	; (8009358 <atan+0x328>)
 80090ac:	429e      	cmp	r6, r3
 80090ae:	ec55 4b10 	vmov	r4, r5, d0
 80090b2:	f300 80bf 	bgt.w	8009234 <atan+0x204>
 80090b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80090ba:	429e      	cmp	r6, r3
 80090bc:	f300 80a0 	bgt.w	8009200 <atan+0x1d0>
 80090c0:	ee10 2a10 	vmov	r2, s0
 80090c4:	ee10 0a10 	vmov	r0, s0
 80090c8:	462b      	mov	r3, r5
 80090ca:	4629      	mov	r1, r5
 80090cc:	f7f7 f886 	bl	80001dc <__adddf3>
 80090d0:	2200      	movs	r2, #0
 80090d2:	4ba0      	ldr	r3, [pc, #640]	; (8009354 <atan+0x324>)
 80090d4:	f7f7 f880 	bl	80001d8 <__aeabi_dsub>
 80090d8:	2200      	movs	r2, #0
 80090da:	4606      	mov	r6, r0
 80090dc:	460f      	mov	r7, r1
 80090de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090e2:	4620      	mov	r0, r4
 80090e4:	4629      	mov	r1, r5
 80090e6:	f7f7 f879 	bl	80001dc <__adddf3>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4630      	mov	r0, r6
 80090f0:	4639      	mov	r1, r7
 80090f2:	f7f7 fb53 	bl	800079c <__aeabi_ddiv>
 80090f6:	f04f 0a00 	mov.w	sl, #0
 80090fa:	4604      	mov	r4, r0
 80090fc:	460d      	mov	r5, r1
 80090fe:	4622      	mov	r2, r4
 8009100:	462b      	mov	r3, r5
 8009102:	4620      	mov	r0, r4
 8009104:	4629      	mov	r1, r5
 8009106:	f7f7 fa1f 	bl	8000548 <__aeabi_dmul>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	4680      	mov	r8, r0
 8009110:	4689      	mov	r9, r1
 8009112:	f7f7 fa19 	bl	8000548 <__aeabi_dmul>
 8009116:	a374      	add	r3, pc, #464	; (adr r3, 80092e8 <atan+0x2b8>)
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	4606      	mov	r6, r0
 800911e:	460f      	mov	r7, r1
 8009120:	f7f7 fa12 	bl	8000548 <__aeabi_dmul>
 8009124:	a372      	add	r3, pc, #456	; (adr r3, 80092f0 <atan+0x2c0>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 f857 	bl	80001dc <__adddf3>
 800912e:	4632      	mov	r2, r6
 8009130:	463b      	mov	r3, r7
 8009132:	f7f7 fa09 	bl	8000548 <__aeabi_dmul>
 8009136:	a370      	add	r3, pc, #448	; (adr r3, 80092f8 <atan+0x2c8>)
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 f84e 	bl	80001dc <__adddf3>
 8009140:	4632      	mov	r2, r6
 8009142:	463b      	mov	r3, r7
 8009144:	f7f7 fa00 	bl	8000548 <__aeabi_dmul>
 8009148:	a36d      	add	r3, pc, #436	; (adr r3, 8009300 <atan+0x2d0>)
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	f7f7 f845 	bl	80001dc <__adddf3>
 8009152:	4632      	mov	r2, r6
 8009154:	463b      	mov	r3, r7
 8009156:	f7f7 f9f7 	bl	8000548 <__aeabi_dmul>
 800915a:	a36b      	add	r3, pc, #428	; (adr r3, 8009308 <atan+0x2d8>)
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	f7f7 f83c 	bl	80001dc <__adddf3>
 8009164:	4632      	mov	r2, r6
 8009166:	463b      	mov	r3, r7
 8009168:	f7f7 f9ee 	bl	8000548 <__aeabi_dmul>
 800916c:	a368      	add	r3, pc, #416	; (adr r3, 8009310 <atan+0x2e0>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 f833 	bl	80001dc <__adddf3>
 8009176:	4642      	mov	r2, r8
 8009178:	464b      	mov	r3, r9
 800917a:	f7f7 f9e5 	bl	8000548 <__aeabi_dmul>
 800917e:	a366      	add	r3, pc, #408	; (adr r3, 8009318 <atan+0x2e8>)
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	4680      	mov	r8, r0
 8009186:	4689      	mov	r9, r1
 8009188:	4630      	mov	r0, r6
 800918a:	4639      	mov	r1, r7
 800918c:	f7f7 f9dc 	bl	8000548 <__aeabi_dmul>
 8009190:	a363      	add	r3, pc, #396	; (adr r3, 8009320 <atan+0x2f0>)
 8009192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009196:	f7f7 f81f 	bl	80001d8 <__aeabi_dsub>
 800919a:	4632      	mov	r2, r6
 800919c:	463b      	mov	r3, r7
 800919e:	f7f7 f9d3 	bl	8000548 <__aeabi_dmul>
 80091a2:	a361      	add	r3, pc, #388	; (adr r3, 8009328 <atan+0x2f8>)
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f7f7 f816 	bl	80001d8 <__aeabi_dsub>
 80091ac:	4632      	mov	r2, r6
 80091ae:	463b      	mov	r3, r7
 80091b0:	f7f7 f9ca 	bl	8000548 <__aeabi_dmul>
 80091b4:	a35e      	add	r3, pc, #376	; (adr r3, 8009330 <atan+0x300>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f80d 	bl	80001d8 <__aeabi_dsub>
 80091be:	4632      	mov	r2, r6
 80091c0:	463b      	mov	r3, r7
 80091c2:	f7f7 f9c1 	bl	8000548 <__aeabi_dmul>
 80091c6:	a35c      	add	r3, pc, #368	; (adr r3, 8009338 <atan+0x308>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f7f7 f804 	bl	80001d8 <__aeabi_dsub>
 80091d0:	4632      	mov	r2, r6
 80091d2:	463b      	mov	r3, r7
 80091d4:	f7f7 f9b8 	bl	8000548 <__aeabi_dmul>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4640      	mov	r0, r8
 80091de:	4649      	mov	r1, r9
 80091e0:	f7f6 fffc 	bl	80001dc <__adddf3>
 80091e4:	4622      	mov	r2, r4
 80091e6:	462b      	mov	r3, r5
 80091e8:	f7f7 f9ae 	bl	8000548 <__aeabi_dmul>
 80091ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	d14b      	bne.n	800928e <atan+0x25e>
 80091f6:	4620      	mov	r0, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7f6 ffed 	bl	80001d8 <__aeabi_dsub>
 80091fe:	e72c      	b.n	800905a <atan+0x2a>
 8009200:	ee10 0a10 	vmov	r0, s0
 8009204:	2200      	movs	r2, #0
 8009206:	4b53      	ldr	r3, [pc, #332]	; (8009354 <atan+0x324>)
 8009208:	4629      	mov	r1, r5
 800920a:	f7f6 ffe5 	bl	80001d8 <__aeabi_dsub>
 800920e:	2200      	movs	r2, #0
 8009210:	4606      	mov	r6, r0
 8009212:	460f      	mov	r7, r1
 8009214:	4b4f      	ldr	r3, [pc, #316]	; (8009354 <atan+0x324>)
 8009216:	4620      	mov	r0, r4
 8009218:	4629      	mov	r1, r5
 800921a:	f7f6 ffdf 	bl	80001dc <__adddf3>
 800921e:	4602      	mov	r2, r0
 8009220:	460b      	mov	r3, r1
 8009222:	4630      	mov	r0, r6
 8009224:	4639      	mov	r1, r7
 8009226:	f7f7 fab9 	bl	800079c <__aeabi_ddiv>
 800922a:	f04f 0a01 	mov.w	sl, #1
 800922e:	4604      	mov	r4, r0
 8009230:	460d      	mov	r5, r1
 8009232:	e764      	b.n	80090fe <atan+0xce>
 8009234:	4b49      	ldr	r3, [pc, #292]	; (800935c <atan+0x32c>)
 8009236:	429e      	cmp	r6, r3
 8009238:	dc1d      	bgt.n	8009276 <atan+0x246>
 800923a:	ee10 0a10 	vmov	r0, s0
 800923e:	2200      	movs	r2, #0
 8009240:	4b47      	ldr	r3, [pc, #284]	; (8009360 <atan+0x330>)
 8009242:	4629      	mov	r1, r5
 8009244:	f7f6 ffc8 	bl	80001d8 <__aeabi_dsub>
 8009248:	2200      	movs	r2, #0
 800924a:	4606      	mov	r6, r0
 800924c:	460f      	mov	r7, r1
 800924e:	4b44      	ldr	r3, [pc, #272]	; (8009360 <atan+0x330>)
 8009250:	4620      	mov	r0, r4
 8009252:	4629      	mov	r1, r5
 8009254:	f7f7 f978 	bl	8000548 <__aeabi_dmul>
 8009258:	2200      	movs	r2, #0
 800925a:	4b3e      	ldr	r3, [pc, #248]	; (8009354 <atan+0x324>)
 800925c:	f7f6 ffbe 	bl	80001dc <__adddf3>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4630      	mov	r0, r6
 8009266:	4639      	mov	r1, r7
 8009268:	f7f7 fa98 	bl	800079c <__aeabi_ddiv>
 800926c:	f04f 0a02 	mov.w	sl, #2
 8009270:	4604      	mov	r4, r0
 8009272:	460d      	mov	r5, r1
 8009274:	e743      	b.n	80090fe <atan+0xce>
 8009276:	462b      	mov	r3, r5
 8009278:	ee10 2a10 	vmov	r2, s0
 800927c:	2000      	movs	r0, #0
 800927e:	4939      	ldr	r1, [pc, #228]	; (8009364 <atan+0x334>)
 8009280:	f7f7 fa8c 	bl	800079c <__aeabi_ddiv>
 8009284:	f04f 0a03 	mov.w	sl, #3
 8009288:	4604      	mov	r4, r0
 800928a:	460d      	mov	r5, r1
 800928c:	e737      	b.n	80090fe <atan+0xce>
 800928e:	4b36      	ldr	r3, [pc, #216]	; (8009368 <atan+0x338>)
 8009290:	4e36      	ldr	r6, [pc, #216]	; (800936c <atan+0x33c>)
 8009292:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009296:	4456      	add	r6, sl
 8009298:	449a      	add	sl, r3
 800929a:	e9da 2300 	ldrd	r2, r3, [sl]
 800929e:	f7f6 ff9b 	bl	80001d8 <__aeabi_dsub>
 80092a2:	4622      	mov	r2, r4
 80092a4:	462b      	mov	r3, r5
 80092a6:	f7f6 ff97 	bl	80001d8 <__aeabi_dsub>
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 80092b2:	f7f6 ff91 	bl	80001d8 <__aeabi_dsub>
 80092b6:	f1bb 0f00 	cmp.w	fp, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	460d      	mov	r5, r1
 80092be:	f6bf aed6 	bge.w	800906e <atan+0x3e>
 80092c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092c6:	461d      	mov	r5, r3
 80092c8:	e6d1      	b.n	800906e <atan+0x3e>
 80092ca:	a51d      	add	r5, pc, #116	; (adr r5, 8009340 <atan+0x310>)
 80092cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80092d0:	e6cd      	b.n	800906e <atan+0x3e>
 80092d2:	bf00      	nop
 80092d4:	f3af 8000 	nop.w
 80092d8:	54442d18 	.word	0x54442d18
 80092dc:	3ff921fb 	.word	0x3ff921fb
 80092e0:	8800759c 	.word	0x8800759c
 80092e4:	7e37e43c 	.word	0x7e37e43c
 80092e8:	e322da11 	.word	0xe322da11
 80092ec:	3f90ad3a 	.word	0x3f90ad3a
 80092f0:	24760deb 	.word	0x24760deb
 80092f4:	3fa97b4b 	.word	0x3fa97b4b
 80092f8:	a0d03d51 	.word	0xa0d03d51
 80092fc:	3fb10d66 	.word	0x3fb10d66
 8009300:	c54c206e 	.word	0xc54c206e
 8009304:	3fb745cd 	.word	0x3fb745cd
 8009308:	920083ff 	.word	0x920083ff
 800930c:	3fc24924 	.word	0x3fc24924
 8009310:	5555550d 	.word	0x5555550d
 8009314:	3fd55555 	.word	0x3fd55555
 8009318:	2c6a6c2f 	.word	0x2c6a6c2f
 800931c:	bfa2b444 	.word	0xbfa2b444
 8009320:	52defd9a 	.word	0x52defd9a
 8009324:	3fadde2d 	.word	0x3fadde2d
 8009328:	af749a6d 	.word	0xaf749a6d
 800932c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009330:	fe231671 	.word	0xfe231671
 8009334:	3fbc71c6 	.word	0x3fbc71c6
 8009338:	9998ebc4 	.word	0x9998ebc4
 800933c:	3fc99999 	.word	0x3fc99999
 8009340:	54442d18 	.word	0x54442d18
 8009344:	bff921fb 	.word	0xbff921fb
 8009348:	440fffff 	.word	0x440fffff
 800934c:	7ff00000 	.word	0x7ff00000
 8009350:	3fdbffff 	.word	0x3fdbffff
 8009354:	3ff00000 	.word	0x3ff00000
 8009358:	3ff2ffff 	.word	0x3ff2ffff
 800935c:	40037fff 	.word	0x40037fff
 8009360:	3ff80000 	.word	0x3ff80000
 8009364:	bff00000 	.word	0xbff00000
 8009368:	0800a810 	.word	0x0800a810
 800936c:	0800a7f0 	.word	0x0800a7f0

08009370 <cos>:
 8009370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009372:	ec51 0b10 	vmov	r0, r1, d0
 8009376:	4a1e      	ldr	r2, [pc, #120]	; (80093f0 <cos+0x80>)
 8009378:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800937c:	4293      	cmp	r3, r2
 800937e:	dc06      	bgt.n	800938e <cos+0x1e>
 8009380:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80093e8 <cos+0x78>
 8009384:	f000 fb8c 	bl	8009aa0 <__kernel_cos>
 8009388:	ec51 0b10 	vmov	r0, r1, d0
 800938c:	e007      	b.n	800939e <cos+0x2e>
 800938e:	4a19      	ldr	r2, [pc, #100]	; (80093f4 <cos+0x84>)
 8009390:	4293      	cmp	r3, r2
 8009392:	dd09      	ble.n	80093a8 <cos+0x38>
 8009394:	ee10 2a10 	vmov	r2, s0
 8009398:	460b      	mov	r3, r1
 800939a:	f7f6 ff1d 	bl	80001d8 <__aeabi_dsub>
 800939e:	ec41 0b10 	vmov	d0, r0, r1
 80093a2:	b005      	add	sp, #20
 80093a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80093a8:	4668      	mov	r0, sp
 80093aa:	f000 f8d5 	bl	8009558 <__ieee754_rem_pio2>
 80093ae:	f000 0003 	and.w	r0, r0, #3
 80093b2:	2801      	cmp	r0, #1
 80093b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093b8:	ed9d 0b00 	vldr	d0, [sp]
 80093bc:	d007      	beq.n	80093ce <cos+0x5e>
 80093be:	2802      	cmp	r0, #2
 80093c0:	d00e      	beq.n	80093e0 <cos+0x70>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d0de      	beq.n	8009384 <cos+0x14>
 80093c6:	2001      	movs	r0, #1
 80093c8:	f000 ff72 	bl	800a2b0 <__kernel_sin>
 80093cc:	e7dc      	b.n	8009388 <cos+0x18>
 80093ce:	f000 ff6f 	bl	800a2b0 <__kernel_sin>
 80093d2:	ec53 2b10 	vmov	r2, r3, d0
 80093d6:	ee10 0a10 	vmov	r0, s0
 80093da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80093de:	e7de      	b.n	800939e <cos+0x2e>
 80093e0:	f000 fb5e 	bl	8009aa0 <__kernel_cos>
 80093e4:	e7f5      	b.n	80093d2 <cos+0x62>
 80093e6:	bf00      	nop
	...
 80093f0:	3fe921fb 	.word	0x3fe921fb
 80093f4:	7fefffff 	.word	0x7fefffff

080093f8 <fabs>:
 80093f8:	ec51 0b10 	vmov	r0, r1, d0
 80093fc:	ee10 2a10 	vmov	r2, s0
 8009400:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009404:	ec43 2b10 	vmov	d0, r2, r3
 8009408:	4770      	bx	lr
 800940a:	0000      	movs	r0, r0
 800940c:	0000      	movs	r0, r0
	...

08009410 <sin>:
 8009410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009412:	ec51 0b10 	vmov	r0, r1, d0
 8009416:	4a20      	ldr	r2, [pc, #128]	; (8009498 <sin+0x88>)
 8009418:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800941c:	4293      	cmp	r3, r2
 800941e:	dc07      	bgt.n	8009430 <sin+0x20>
 8009420:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009490 <sin+0x80>
 8009424:	2000      	movs	r0, #0
 8009426:	f000 ff43 	bl	800a2b0 <__kernel_sin>
 800942a:	ec51 0b10 	vmov	r0, r1, d0
 800942e:	e007      	b.n	8009440 <sin+0x30>
 8009430:	4a1a      	ldr	r2, [pc, #104]	; (800949c <sin+0x8c>)
 8009432:	4293      	cmp	r3, r2
 8009434:	dd09      	ble.n	800944a <sin+0x3a>
 8009436:	ee10 2a10 	vmov	r2, s0
 800943a:	460b      	mov	r3, r1
 800943c:	f7f6 fecc 	bl	80001d8 <__aeabi_dsub>
 8009440:	ec41 0b10 	vmov	d0, r0, r1
 8009444:	b005      	add	sp, #20
 8009446:	f85d fb04 	ldr.w	pc, [sp], #4
 800944a:	4668      	mov	r0, sp
 800944c:	f000 f884 	bl	8009558 <__ieee754_rem_pio2>
 8009450:	f000 0003 	and.w	r0, r0, #3
 8009454:	2801      	cmp	r0, #1
 8009456:	ed9d 1b02 	vldr	d1, [sp, #8]
 800945a:	ed9d 0b00 	vldr	d0, [sp]
 800945e:	d004      	beq.n	800946a <sin+0x5a>
 8009460:	2802      	cmp	r0, #2
 8009462:	d005      	beq.n	8009470 <sin+0x60>
 8009464:	b970      	cbnz	r0, 8009484 <sin+0x74>
 8009466:	2001      	movs	r0, #1
 8009468:	e7dd      	b.n	8009426 <sin+0x16>
 800946a:	f000 fb19 	bl	8009aa0 <__kernel_cos>
 800946e:	e7dc      	b.n	800942a <sin+0x1a>
 8009470:	2001      	movs	r0, #1
 8009472:	f000 ff1d 	bl	800a2b0 <__kernel_sin>
 8009476:	ec53 2b10 	vmov	r2, r3, d0
 800947a:	ee10 0a10 	vmov	r0, s0
 800947e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009482:	e7dd      	b.n	8009440 <sin+0x30>
 8009484:	f000 fb0c 	bl	8009aa0 <__kernel_cos>
 8009488:	e7f5      	b.n	8009476 <sin+0x66>
 800948a:	bf00      	nop
 800948c:	f3af 8000 	nop.w
	...
 8009498:	3fe921fb 	.word	0x3fe921fb
 800949c:	7fefffff 	.word	0x7fefffff

080094a0 <sqrt>:
 80094a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094a4:	ed2d 8b02 	vpush	{d8}
 80094a8:	b08b      	sub	sp, #44	; 0x2c
 80094aa:	ec55 4b10 	vmov	r4, r5, d0
 80094ae:	f000 fa45 	bl	800993c <__ieee754_sqrt>
 80094b2:	4b26      	ldr	r3, [pc, #152]	; (800954c <sqrt+0xac>)
 80094b4:	eeb0 8a40 	vmov.f32	s16, s0
 80094b8:	eef0 8a60 	vmov.f32	s17, s1
 80094bc:	f993 6000 	ldrsb.w	r6, [r3]
 80094c0:	1c73      	adds	r3, r6, #1
 80094c2:	d02a      	beq.n	800951a <sqrt+0x7a>
 80094c4:	4622      	mov	r2, r4
 80094c6:	462b      	mov	r3, r5
 80094c8:	4620      	mov	r0, r4
 80094ca:	4629      	mov	r1, r5
 80094cc:	f7f7 fad6 	bl	8000a7c <__aeabi_dcmpun>
 80094d0:	4607      	mov	r7, r0
 80094d2:	bb10      	cbnz	r0, 800951a <sqrt+0x7a>
 80094d4:	f04f 0800 	mov.w	r8, #0
 80094d8:	f04f 0900 	mov.w	r9, #0
 80094dc:	4642      	mov	r2, r8
 80094de:	464b      	mov	r3, r9
 80094e0:	4620      	mov	r0, r4
 80094e2:	4629      	mov	r1, r5
 80094e4:	f7f7 faa2 	bl	8000a2c <__aeabi_dcmplt>
 80094e8:	b1b8      	cbz	r0, 800951a <sqrt+0x7a>
 80094ea:	2301      	movs	r3, #1
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	4b18      	ldr	r3, [pc, #96]	; (8009550 <sqrt+0xb0>)
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	9708      	str	r7, [sp, #32]
 80094f4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80094f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80094fc:	b9b6      	cbnz	r6, 800952c <sqrt+0x8c>
 80094fe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009502:	4668      	mov	r0, sp
 8009504:	f001 f814 	bl	800a530 <matherr>
 8009508:	b1d0      	cbz	r0, 8009540 <sqrt+0xa0>
 800950a:	9b08      	ldr	r3, [sp, #32]
 800950c:	b11b      	cbz	r3, 8009516 <sqrt+0x76>
 800950e:	f001 f899 	bl	800a644 <__errno>
 8009512:	9b08      	ldr	r3, [sp, #32]
 8009514:	6003      	str	r3, [r0, #0]
 8009516:	ed9d 8b06 	vldr	d8, [sp, #24]
 800951a:	eeb0 0a48 	vmov.f32	s0, s16
 800951e:	eef0 0a68 	vmov.f32	s1, s17
 8009522:	b00b      	add	sp, #44	; 0x2c
 8009524:	ecbd 8b02 	vpop	{d8}
 8009528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800952c:	4642      	mov	r2, r8
 800952e:	464b      	mov	r3, r9
 8009530:	4640      	mov	r0, r8
 8009532:	4649      	mov	r1, r9
 8009534:	f7f7 f932 	bl	800079c <__aeabi_ddiv>
 8009538:	2e02      	cmp	r6, #2
 800953a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800953e:	d1e0      	bne.n	8009502 <sqrt+0x62>
 8009540:	f001 f880 	bl	800a644 <__errno>
 8009544:	2321      	movs	r3, #33	; 0x21
 8009546:	6003      	str	r3, [r0, #0]
 8009548:	e7df      	b.n	800950a <sqrt+0x6a>
 800954a:	bf00      	nop
 800954c:	20000018 	.word	0x20000018
 8009550:	0800a830 	.word	0x0800a830
 8009554:	00000000 	.word	0x00000000

08009558 <__ieee754_rem_pio2>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	ec57 6b10 	vmov	r6, r7, d0
 8009560:	4bc3      	ldr	r3, [pc, #780]	; (8009870 <__ieee754_rem_pio2+0x318>)
 8009562:	b08d      	sub	sp, #52	; 0x34
 8009564:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009568:	4598      	cmp	r8, r3
 800956a:	4604      	mov	r4, r0
 800956c:	9704      	str	r7, [sp, #16]
 800956e:	dc07      	bgt.n	8009580 <__ieee754_rem_pio2+0x28>
 8009570:	2200      	movs	r2, #0
 8009572:	2300      	movs	r3, #0
 8009574:	ed84 0b00 	vstr	d0, [r4]
 8009578:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800957c:	2500      	movs	r5, #0
 800957e:	e027      	b.n	80095d0 <__ieee754_rem_pio2+0x78>
 8009580:	4bbc      	ldr	r3, [pc, #752]	; (8009874 <__ieee754_rem_pio2+0x31c>)
 8009582:	4598      	cmp	r8, r3
 8009584:	dc75      	bgt.n	8009672 <__ieee754_rem_pio2+0x11a>
 8009586:	9b04      	ldr	r3, [sp, #16]
 8009588:	4dbb      	ldr	r5, [pc, #748]	; (8009878 <__ieee754_rem_pio2+0x320>)
 800958a:	2b00      	cmp	r3, #0
 800958c:	ee10 0a10 	vmov	r0, s0
 8009590:	a3a9      	add	r3, pc, #676	; (adr r3, 8009838 <__ieee754_rem_pio2+0x2e0>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	4639      	mov	r1, r7
 8009598:	dd36      	ble.n	8009608 <__ieee754_rem_pio2+0xb0>
 800959a:	f7f6 fe1d 	bl	80001d8 <__aeabi_dsub>
 800959e:	45a8      	cmp	r8, r5
 80095a0:	4606      	mov	r6, r0
 80095a2:	460f      	mov	r7, r1
 80095a4:	d018      	beq.n	80095d8 <__ieee754_rem_pio2+0x80>
 80095a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009840 <__ieee754_rem_pio2+0x2e8>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f6 fe14 	bl	80001d8 <__aeabi_dsub>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	e9c4 2300 	strd	r2, r3, [r4]
 80095b8:	4630      	mov	r0, r6
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f6 fe0c 	bl	80001d8 <__aeabi_dsub>
 80095c0:	a39f      	add	r3, pc, #636	; (adr r3, 8009840 <__ieee754_rem_pio2+0x2e8>)
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	f7f6 fe07 	bl	80001d8 <__aeabi_dsub>
 80095ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80095ce:	2501      	movs	r5, #1
 80095d0:	4628      	mov	r0, r5
 80095d2:	b00d      	add	sp, #52	; 0x34
 80095d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d8:	a39b      	add	r3, pc, #620	; (adr r3, 8009848 <__ieee754_rem_pio2+0x2f0>)
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	f7f6 fdfb 	bl	80001d8 <__aeabi_dsub>
 80095e2:	a39b      	add	r3, pc, #620	; (adr r3, 8009850 <__ieee754_rem_pio2+0x2f8>)
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	4606      	mov	r6, r0
 80095ea:	460f      	mov	r7, r1
 80095ec:	f7f6 fdf4 	bl	80001d8 <__aeabi_dsub>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	e9c4 2300 	strd	r2, r3, [r4]
 80095f8:	4630      	mov	r0, r6
 80095fa:	4639      	mov	r1, r7
 80095fc:	f7f6 fdec 	bl	80001d8 <__aeabi_dsub>
 8009600:	a393      	add	r3, pc, #588	; (adr r3, 8009850 <__ieee754_rem_pio2+0x2f8>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	e7de      	b.n	80095c6 <__ieee754_rem_pio2+0x6e>
 8009608:	f7f6 fde8 	bl	80001dc <__adddf3>
 800960c:	45a8      	cmp	r8, r5
 800960e:	4606      	mov	r6, r0
 8009610:	460f      	mov	r7, r1
 8009612:	d016      	beq.n	8009642 <__ieee754_rem_pio2+0xea>
 8009614:	a38a      	add	r3, pc, #552	; (adr r3, 8009840 <__ieee754_rem_pio2+0x2e8>)
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f7f6 fddf 	bl	80001dc <__adddf3>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	e9c4 2300 	strd	r2, r3, [r4]
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	f7f6 fdd5 	bl	80001d8 <__aeabi_dsub>
 800962e:	a384      	add	r3, pc, #528	; (adr r3, 8009840 <__ieee754_rem_pio2+0x2e8>)
 8009630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009634:	f7f6 fdd2 	bl	80001dc <__adddf3>
 8009638:	f04f 35ff 	mov.w	r5, #4294967295
 800963c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009640:	e7c6      	b.n	80095d0 <__ieee754_rem_pio2+0x78>
 8009642:	a381      	add	r3, pc, #516	; (adr r3, 8009848 <__ieee754_rem_pio2+0x2f0>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f7f6 fdc8 	bl	80001dc <__adddf3>
 800964c:	a380      	add	r3, pc, #512	; (adr r3, 8009850 <__ieee754_rem_pio2+0x2f8>)
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	4606      	mov	r6, r0
 8009654:	460f      	mov	r7, r1
 8009656:	f7f6 fdc1 	bl	80001dc <__adddf3>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	e9c4 2300 	strd	r2, r3, [r4]
 8009662:	4630      	mov	r0, r6
 8009664:	4639      	mov	r1, r7
 8009666:	f7f6 fdb7 	bl	80001d8 <__aeabi_dsub>
 800966a:	a379      	add	r3, pc, #484	; (adr r3, 8009850 <__ieee754_rem_pio2+0x2f8>)
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	e7e0      	b.n	8009634 <__ieee754_rem_pio2+0xdc>
 8009672:	4b82      	ldr	r3, [pc, #520]	; (800987c <__ieee754_rem_pio2+0x324>)
 8009674:	4598      	cmp	r8, r3
 8009676:	f300 80d0 	bgt.w	800981a <__ieee754_rem_pio2+0x2c2>
 800967a:	f7ff febd 	bl	80093f8 <fabs>
 800967e:	ec57 6b10 	vmov	r6, r7, d0
 8009682:	ee10 0a10 	vmov	r0, s0
 8009686:	a374      	add	r3, pc, #464	; (adr r3, 8009858 <__ieee754_rem_pio2+0x300>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 ff5b 	bl	8000548 <__aeabi_dmul>
 8009692:	2200      	movs	r2, #0
 8009694:	4b7a      	ldr	r3, [pc, #488]	; (8009880 <__ieee754_rem_pio2+0x328>)
 8009696:	f7f6 fda1 	bl	80001dc <__adddf3>
 800969a:	f7f7 fa05 	bl	8000aa8 <__aeabi_d2iz>
 800969e:	4605      	mov	r5, r0
 80096a0:	f7f6 fee8 	bl	8000474 <__aeabi_i2d>
 80096a4:	a364      	add	r3, pc, #400	; (adr r3, 8009838 <__ieee754_rem_pio2+0x2e0>)
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ae:	f7f6 ff4b 	bl	8000548 <__aeabi_dmul>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4630      	mov	r0, r6
 80096b8:	4639      	mov	r1, r7
 80096ba:	f7f6 fd8d 	bl	80001d8 <__aeabi_dsub>
 80096be:	a360      	add	r3, pc, #384	; (adr r3, 8009840 <__ieee754_rem_pio2+0x2e8>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	4682      	mov	sl, r0
 80096c6:	468b      	mov	fp, r1
 80096c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096cc:	f7f6 ff3c 	bl	8000548 <__aeabi_dmul>
 80096d0:	2d1f      	cmp	r5, #31
 80096d2:	4606      	mov	r6, r0
 80096d4:	460f      	mov	r7, r1
 80096d6:	dc0c      	bgt.n	80096f2 <__ieee754_rem_pio2+0x19a>
 80096d8:	1e6a      	subs	r2, r5, #1
 80096da:	4b6a      	ldr	r3, [pc, #424]	; (8009884 <__ieee754_rem_pio2+0x32c>)
 80096dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e0:	4543      	cmp	r3, r8
 80096e2:	d006      	beq.n	80096f2 <__ieee754_rem_pio2+0x19a>
 80096e4:	4632      	mov	r2, r6
 80096e6:	463b      	mov	r3, r7
 80096e8:	4650      	mov	r0, sl
 80096ea:	4659      	mov	r1, fp
 80096ec:	f7f6 fd74 	bl	80001d8 <__aeabi_dsub>
 80096f0:	e00e      	b.n	8009710 <__ieee754_rem_pio2+0x1b8>
 80096f2:	4632      	mov	r2, r6
 80096f4:	463b      	mov	r3, r7
 80096f6:	4650      	mov	r0, sl
 80096f8:	4659      	mov	r1, fp
 80096fa:	f7f6 fd6d 	bl	80001d8 <__aeabi_dsub>
 80096fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009702:	9305      	str	r3, [sp, #20]
 8009704:	9a05      	ldr	r2, [sp, #20]
 8009706:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	2b10      	cmp	r3, #16
 800970e:	dc02      	bgt.n	8009716 <__ieee754_rem_pio2+0x1be>
 8009710:	e9c4 0100 	strd	r0, r1, [r4]
 8009714:	e039      	b.n	800978a <__ieee754_rem_pio2+0x232>
 8009716:	a34c      	add	r3, pc, #304	; (adr r3, 8009848 <__ieee754_rem_pio2+0x2f0>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009720:	f7f6 ff12 	bl	8000548 <__aeabi_dmul>
 8009724:	4606      	mov	r6, r0
 8009726:	460f      	mov	r7, r1
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4650      	mov	r0, sl
 800972e:	4659      	mov	r1, fp
 8009730:	f7f6 fd52 	bl	80001d8 <__aeabi_dsub>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4680      	mov	r8, r0
 800973a:	4689      	mov	r9, r1
 800973c:	4650      	mov	r0, sl
 800973e:	4659      	mov	r1, fp
 8009740:	f7f6 fd4a 	bl	80001d8 <__aeabi_dsub>
 8009744:	4632      	mov	r2, r6
 8009746:	463b      	mov	r3, r7
 8009748:	f7f6 fd46 	bl	80001d8 <__aeabi_dsub>
 800974c:	a340      	add	r3, pc, #256	; (adr r3, 8009850 <__ieee754_rem_pio2+0x2f8>)
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	4606      	mov	r6, r0
 8009754:	460f      	mov	r7, r1
 8009756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800975a:	f7f6 fef5 	bl	8000548 <__aeabi_dmul>
 800975e:	4632      	mov	r2, r6
 8009760:	463b      	mov	r3, r7
 8009762:	f7f6 fd39 	bl	80001d8 <__aeabi_dsub>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	4606      	mov	r6, r0
 800976c:	460f      	mov	r7, r1
 800976e:	4640      	mov	r0, r8
 8009770:	4649      	mov	r1, r9
 8009772:	f7f6 fd31 	bl	80001d8 <__aeabi_dsub>
 8009776:	9a05      	ldr	r2, [sp, #20]
 8009778:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	2b31      	cmp	r3, #49	; 0x31
 8009780:	dc20      	bgt.n	80097c4 <__ieee754_rem_pio2+0x26c>
 8009782:	e9c4 0100 	strd	r0, r1, [r4]
 8009786:	46c2      	mov	sl, r8
 8009788:	46cb      	mov	fp, r9
 800978a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800978e:	4650      	mov	r0, sl
 8009790:	4642      	mov	r2, r8
 8009792:	464b      	mov	r3, r9
 8009794:	4659      	mov	r1, fp
 8009796:	f7f6 fd1f 	bl	80001d8 <__aeabi_dsub>
 800979a:	463b      	mov	r3, r7
 800979c:	4632      	mov	r2, r6
 800979e:	f7f6 fd1b 	bl	80001d8 <__aeabi_dsub>
 80097a2:	9b04      	ldr	r3, [sp, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097aa:	f6bf af11 	bge.w	80095d0 <__ieee754_rem_pio2+0x78>
 80097ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80097b2:	6063      	str	r3, [r4, #4]
 80097b4:	f8c4 8000 	str.w	r8, [r4]
 80097b8:	60a0      	str	r0, [r4, #8]
 80097ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097be:	60e3      	str	r3, [r4, #12]
 80097c0:	426d      	negs	r5, r5
 80097c2:	e705      	b.n	80095d0 <__ieee754_rem_pio2+0x78>
 80097c4:	a326      	add	r3, pc, #152	; (adr r3, 8009860 <__ieee754_rem_pio2+0x308>)
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097ce:	f7f6 febb 	bl	8000548 <__aeabi_dmul>
 80097d2:	4606      	mov	r6, r0
 80097d4:	460f      	mov	r7, r1
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4640      	mov	r0, r8
 80097dc:	4649      	mov	r1, r9
 80097de:	f7f6 fcfb 	bl	80001d8 <__aeabi_dsub>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4682      	mov	sl, r0
 80097e8:	468b      	mov	fp, r1
 80097ea:	4640      	mov	r0, r8
 80097ec:	4649      	mov	r1, r9
 80097ee:	f7f6 fcf3 	bl	80001d8 <__aeabi_dsub>
 80097f2:	4632      	mov	r2, r6
 80097f4:	463b      	mov	r3, r7
 80097f6:	f7f6 fcef 	bl	80001d8 <__aeabi_dsub>
 80097fa:	a31b      	add	r3, pc, #108	; (adr r3, 8009868 <__ieee754_rem_pio2+0x310>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	4606      	mov	r6, r0
 8009802:	460f      	mov	r7, r1
 8009804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009808:	f7f6 fe9e 	bl	8000548 <__aeabi_dmul>
 800980c:	4632      	mov	r2, r6
 800980e:	463b      	mov	r3, r7
 8009810:	f7f6 fce2 	bl	80001d8 <__aeabi_dsub>
 8009814:	4606      	mov	r6, r0
 8009816:	460f      	mov	r7, r1
 8009818:	e764      	b.n	80096e4 <__ieee754_rem_pio2+0x18c>
 800981a:	4b1b      	ldr	r3, [pc, #108]	; (8009888 <__ieee754_rem_pio2+0x330>)
 800981c:	4598      	cmp	r8, r3
 800981e:	dd35      	ble.n	800988c <__ieee754_rem_pio2+0x334>
 8009820:	ee10 2a10 	vmov	r2, s0
 8009824:	463b      	mov	r3, r7
 8009826:	4630      	mov	r0, r6
 8009828:	4639      	mov	r1, r7
 800982a:	f7f6 fcd5 	bl	80001d8 <__aeabi_dsub>
 800982e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009832:	e9c4 0100 	strd	r0, r1, [r4]
 8009836:	e6a1      	b.n	800957c <__ieee754_rem_pio2+0x24>
 8009838:	54400000 	.word	0x54400000
 800983c:	3ff921fb 	.word	0x3ff921fb
 8009840:	1a626331 	.word	0x1a626331
 8009844:	3dd0b461 	.word	0x3dd0b461
 8009848:	1a600000 	.word	0x1a600000
 800984c:	3dd0b461 	.word	0x3dd0b461
 8009850:	2e037073 	.word	0x2e037073
 8009854:	3ba3198a 	.word	0x3ba3198a
 8009858:	6dc9c883 	.word	0x6dc9c883
 800985c:	3fe45f30 	.word	0x3fe45f30
 8009860:	2e000000 	.word	0x2e000000
 8009864:	3ba3198a 	.word	0x3ba3198a
 8009868:	252049c1 	.word	0x252049c1
 800986c:	397b839a 	.word	0x397b839a
 8009870:	3fe921fb 	.word	0x3fe921fb
 8009874:	4002d97b 	.word	0x4002d97b
 8009878:	3ff921fb 	.word	0x3ff921fb
 800987c:	413921fb 	.word	0x413921fb
 8009880:	3fe00000 	.word	0x3fe00000
 8009884:	0800a838 	.word	0x0800a838
 8009888:	7fefffff 	.word	0x7fefffff
 800988c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009890:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009894:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009898:	4630      	mov	r0, r6
 800989a:	460f      	mov	r7, r1
 800989c:	f7f7 f904 	bl	8000aa8 <__aeabi_d2iz>
 80098a0:	f7f6 fde8 	bl	8000474 <__aeabi_i2d>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4630      	mov	r0, r6
 80098aa:	4639      	mov	r1, r7
 80098ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098b0:	f7f6 fc92 	bl	80001d8 <__aeabi_dsub>
 80098b4:	2200      	movs	r2, #0
 80098b6:	4b1f      	ldr	r3, [pc, #124]	; (8009934 <__ieee754_rem_pio2+0x3dc>)
 80098b8:	f7f6 fe46 	bl	8000548 <__aeabi_dmul>
 80098bc:	460f      	mov	r7, r1
 80098be:	4606      	mov	r6, r0
 80098c0:	f7f7 f8f2 	bl	8000aa8 <__aeabi_d2iz>
 80098c4:	f7f6 fdd6 	bl	8000474 <__aeabi_i2d>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4630      	mov	r0, r6
 80098ce:	4639      	mov	r1, r7
 80098d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098d4:	f7f6 fc80 	bl	80001d8 <__aeabi_dsub>
 80098d8:	2200      	movs	r2, #0
 80098da:	4b16      	ldr	r3, [pc, #88]	; (8009934 <__ieee754_rem_pio2+0x3dc>)
 80098dc:	f7f6 fe34 	bl	8000548 <__aeabi_dmul>
 80098e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80098e4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80098e8:	f04f 0803 	mov.w	r8, #3
 80098ec:	2600      	movs	r6, #0
 80098ee:	2700      	movs	r7, #0
 80098f0:	4632      	mov	r2, r6
 80098f2:	463b      	mov	r3, r7
 80098f4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80098f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80098fc:	f7f7 f88c 	bl	8000a18 <__aeabi_dcmpeq>
 8009900:	b9b0      	cbnz	r0, 8009930 <__ieee754_rem_pio2+0x3d8>
 8009902:	4b0d      	ldr	r3, [pc, #52]	; (8009938 <__ieee754_rem_pio2+0x3e0>)
 8009904:	9301      	str	r3, [sp, #4]
 8009906:	2302      	movs	r3, #2
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	462a      	mov	r2, r5
 800990c:	4643      	mov	r3, r8
 800990e:	4621      	mov	r1, r4
 8009910:	a806      	add	r0, sp, #24
 8009912:	f000 f98d 	bl	8009c30 <__kernel_rem_pio2>
 8009916:	9b04      	ldr	r3, [sp, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	4605      	mov	r5, r0
 800991c:	f6bf ae58 	bge.w	80095d0 <__ieee754_rem_pio2+0x78>
 8009920:	6863      	ldr	r3, [r4, #4]
 8009922:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009926:	6063      	str	r3, [r4, #4]
 8009928:	68e3      	ldr	r3, [r4, #12]
 800992a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800992e:	e746      	b.n	80097be <__ieee754_rem_pio2+0x266>
 8009930:	46d0      	mov	r8, sl
 8009932:	e7dd      	b.n	80098f0 <__ieee754_rem_pio2+0x398>
 8009934:	41700000 	.word	0x41700000
 8009938:	0800a8b8 	.word	0x0800a8b8

0800993c <__ieee754_sqrt>:
 800993c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	4955      	ldr	r1, [pc, #340]	; (8009a98 <__ieee754_sqrt+0x15c>)
 8009942:	ec55 4b10 	vmov	r4, r5, d0
 8009946:	43a9      	bics	r1, r5
 8009948:	462b      	mov	r3, r5
 800994a:	462a      	mov	r2, r5
 800994c:	d112      	bne.n	8009974 <__ieee754_sqrt+0x38>
 800994e:	ee10 2a10 	vmov	r2, s0
 8009952:	ee10 0a10 	vmov	r0, s0
 8009956:	4629      	mov	r1, r5
 8009958:	f7f6 fdf6 	bl	8000548 <__aeabi_dmul>
 800995c:	4602      	mov	r2, r0
 800995e:	460b      	mov	r3, r1
 8009960:	4620      	mov	r0, r4
 8009962:	4629      	mov	r1, r5
 8009964:	f7f6 fc3a 	bl	80001dc <__adddf3>
 8009968:	4604      	mov	r4, r0
 800996a:	460d      	mov	r5, r1
 800996c:	ec45 4b10 	vmov	d0, r4, r5
 8009970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009974:	2d00      	cmp	r5, #0
 8009976:	ee10 0a10 	vmov	r0, s0
 800997a:	4621      	mov	r1, r4
 800997c:	dc0f      	bgt.n	800999e <__ieee754_sqrt+0x62>
 800997e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009982:	4330      	orrs	r0, r6
 8009984:	d0f2      	beq.n	800996c <__ieee754_sqrt+0x30>
 8009986:	b155      	cbz	r5, 800999e <__ieee754_sqrt+0x62>
 8009988:	ee10 2a10 	vmov	r2, s0
 800998c:	4620      	mov	r0, r4
 800998e:	4629      	mov	r1, r5
 8009990:	f7f6 fc22 	bl	80001d8 <__aeabi_dsub>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	f7f6 ff00 	bl	800079c <__aeabi_ddiv>
 800999c:	e7e4      	b.n	8009968 <__ieee754_sqrt+0x2c>
 800999e:	151b      	asrs	r3, r3, #20
 80099a0:	d073      	beq.n	8009a8a <__ieee754_sqrt+0x14e>
 80099a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099a6:	07dd      	lsls	r5, r3, #31
 80099a8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80099ac:	bf48      	it	mi
 80099ae:	0fc8      	lsrmi	r0, r1, #31
 80099b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80099b4:	bf44      	itt	mi
 80099b6:	0049      	lslmi	r1, r1, #1
 80099b8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80099bc:	2500      	movs	r5, #0
 80099be:	1058      	asrs	r0, r3, #1
 80099c0:	0fcb      	lsrs	r3, r1, #31
 80099c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80099c6:	0049      	lsls	r1, r1, #1
 80099c8:	2316      	movs	r3, #22
 80099ca:	462c      	mov	r4, r5
 80099cc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80099d0:	19a7      	adds	r7, r4, r6
 80099d2:	4297      	cmp	r7, r2
 80099d4:	bfde      	ittt	le
 80099d6:	19bc      	addle	r4, r7, r6
 80099d8:	1bd2      	suble	r2, r2, r7
 80099da:	19ad      	addle	r5, r5, r6
 80099dc:	0fcf      	lsrs	r7, r1, #31
 80099de:	3b01      	subs	r3, #1
 80099e0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80099e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80099e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80099ec:	d1f0      	bne.n	80099d0 <__ieee754_sqrt+0x94>
 80099ee:	f04f 0c20 	mov.w	ip, #32
 80099f2:	469e      	mov	lr, r3
 80099f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80099f8:	42a2      	cmp	r2, r4
 80099fa:	eb06 070e 	add.w	r7, r6, lr
 80099fe:	dc02      	bgt.n	8009a06 <__ieee754_sqrt+0xca>
 8009a00:	d112      	bne.n	8009a28 <__ieee754_sqrt+0xec>
 8009a02:	428f      	cmp	r7, r1
 8009a04:	d810      	bhi.n	8009a28 <__ieee754_sqrt+0xec>
 8009a06:	2f00      	cmp	r7, #0
 8009a08:	eb07 0e06 	add.w	lr, r7, r6
 8009a0c:	da42      	bge.n	8009a94 <__ieee754_sqrt+0x158>
 8009a0e:	f1be 0f00 	cmp.w	lr, #0
 8009a12:	db3f      	blt.n	8009a94 <__ieee754_sqrt+0x158>
 8009a14:	f104 0801 	add.w	r8, r4, #1
 8009a18:	1b12      	subs	r2, r2, r4
 8009a1a:	428f      	cmp	r7, r1
 8009a1c:	bf88      	it	hi
 8009a1e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009a22:	1bc9      	subs	r1, r1, r7
 8009a24:	4433      	add	r3, r6
 8009a26:	4644      	mov	r4, r8
 8009a28:	0052      	lsls	r2, r2, #1
 8009a2a:	f1bc 0c01 	subs.w	ip, ip, #1
 8009a2e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009a32:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a36:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a3a:	d1dd      	bne.n	80099f8 <__ieee754_sqrt+0xbc>
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	d006      	beq.n	8009a4e <__ieee754_sqrt+0x112>
 8009a40:	1c5c      	adds	r4, r3, #1
 8009a42:	bf13      	iteet	ne
 8009a44:	3301      	addne	r3, #1
 8009a46:	3501      	addeq	r5, #1
 8009a48:	4663      	moveq	r3, ip
 8009a4a:	f023 0301 	bicne.w	r3, r3, #1
 8009a4e:	106a      	asrs	r2, r5, #1
 8009a50:	085b      	lsrs	r3, r3, #1
 8009a52:	07e9      	lsls	r1, r5, #31
 8009a54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009a58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009a5c:	bf48      	it	mi
 8009a5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009a62:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009a66:	461c      	mov	r4, r3
 8009a68:	e780      	b.n	800996c <__ieee754_sqrt+0x30>
 8009a6a:	0aca      	lsrs	r2, r1, #11
 8009a6c:	3815      	subs	r0, #21
 8009a6e:	0549      	lsls	r1, r1, #21
 8009a70:	2a00      	cmp	r2, #0
 8009a72:	d0fa      	beq.n	8009a6a <__ieee754_sqrt+0x12e>
 8009a74:	02d6      	lsls	r6, r2, #11
 8009a76:	d50a      	bpl.n	8009a8e <__ieee754_sqrt+0x152>
 8009a78:	f1c3 0420 	rsb	r4, r3, #32
 8009a7c:	fa21 f404 	lsr.w	r4, r1, r4
 8009a80:	1e5d      	subs	r5, r3, #1
 8009a82:	4099      	lsls	r1, r3
 8009a84:	4322      	orrs	r2, r4
 8009a86:	1b43      	subs	r3, r0, r5
 8009a88:	e78b      	b.n	80099a2 <__ieee754_sqrt+0x66>
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	e7f0      	b.n	8009a70 <__ieee754_sqrt+0x134>
 8009a8e:	0052      	lsls	r2, r2, #1
 8009a90:	3301      	adds	r3, #1
 8009a92:	e7ef      	b.n	8009a74 <__ieee754_sqrt+0x138>
 8009a94:	46a0      	mov	r8, r4
 8009a96:	e7bf      	b.n	8009a18 <__ieee754_sqrt+0xdc>
 8009a98:	7ff00000 	.word	0x7ff00000
 8009a9c:	00000000 	.word	0x00000000

08009aa0 <__kernel_cos>:
 8009aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	ec59 8b10 	vmov	r8, r9, d0
 8009aa8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009aac:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009ab0:	ed2d 8b02 	vpush	{d8}
 8009ab4:	eeb0 8a41 	vmov.f32	s16, s2
 8009ab8:	eef0 8a61 	vmov.f32	s17, s3
 8009abc:	da07      	bge.n	8009ace <__kernel_cos+0x2e>
 8009abe:	ee10 0a10 	vmov	r0, s0
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	f7f6 fff0 	bl	8000aa8 <__aeabi_d2iz>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	f000 8089 	beq.w	8009be0 <__kernel_cos+0x140>
 8009ace:	4642      	mov	r2, r8
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	4649      	mov	r1, r9
 8009ad6:	f7f6 fd37 	bl	8000548 <__aeabi_dmul>
 8009ada:	2200      	movs	r2, #0
 8009adc:	4b4e      	ldr	r3, [pc, #312]	; (8009c18 <__kernel_cos+0x178>)
 8009ade:	4604      	mov	r4, r0
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	f7f6 fd31 	bl	8000548 <__aeabi_dmul>
 8009ae6:	a340      	add	r3, pc, #256	; (adr r3, 8009be8 <__kernel_cos+0x148>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	4682      	mov	sl, r0
 8009aee:	468b      	mov	fp, r1
 8009af0:	4620      	mov	r0, r4
 8009af2:	4629      	mov	r1, r5
 8009af4:	f7f6 fd28 	bl	8000548 <__aeabi_dmul>
 8009af8:	a33d      	add	r3, pc, #244	; (adr r3, 8009bf0 <__kernel_cos+0x150>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	f7f6 fb6d 	bl	80001dc <__adddf3>
 8009b02:	4622      	mov	r2, r4
 8009b04:	462b      	mov	r3, r5
 8009b06:	f7f6 fd1f 	bl	8000548 <__aeabi_dmul>
 8009b0a:	a33b      	add	r3, pc, #236	; (adr r3, 8009bf8 <__kernel_cos+0x158>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	f7f6 fb62 	bl	80001d8 <__aeabi_dsub>
 8009b14:	4622      	mov	r2, r4
 8009b16:	462b      	mov	r3, r5
 8009b18:	f7f6 fd16 	bl	8000548 <__aeabi_dmul>
 8009b1c:	a338      	add	r3, pc, #224	; (adr r3, 8009c00 <__kernel_cos+0x160>)
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f7f6 fb5b 	bl	80001dc <__adddf3>
 8009b26:	4622      	mov	r2, r4
 8009b28:	462b      	mov	r3, r5
 8009b2a:	f7f6 fd0d 	bl	8000548 <__aeabi_dmul>
 8009b2e:	a336      	add	r3, pc, #216	; (adr r3, 8009c08 <__kernel_cos+0x168>)
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	f7f6 fb50 	bl	80001d8 <__aeabi_dsub>
 8009b38:	4622      	mov	r2, r4
 8009b3a:	462b      	mov	r3, r5
 8009b3c:	f7f6 fd04 	bl	8000548 <__aeabi_dmul>
 8009b40:	a333      	add	r3, pc, #204	; (adr r3, 8009c10 <__kernel_cos+0x170>)
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	f7f6 fb49 	bl	80001dc <__adddf3>
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	462b      	mov	r3, r5
 8009b4e:	f7f6 fcfb 	bl	8000548 <__aeabi_dmul>
 8009b52:	4622      	mov	r2, r4
 8009b54:	462b      	mov	r3, r5
 8009b56:	f7f6 fcf7 	bl	8000548 <__aeabi_dmul>
 8009b5a:	ec53 2b18 	vmov	r2, r3, d8
 8009b5e:	4604      	mov	r4, r0
 8009b60:	460d      	mov	r5, r1
 8009b62:	4640      	mov	r0, r8
 8009b64:	4649      	mov	r1, r9
 8009b66:	f7f6 fcef 	bl	8000548 <__aeabi_dmul>
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	4629      	mov	r1, r5
 8009b70:	4620      	mov	r0, r4
 8009b72:	f7f6 fb31 	bl	80001d8 <__aeabi_dsub>
 8009b76:	4b29      	ldr	r3, [pc, #164]	; (8009c1c <__kernel_cos+0x17c>)
 8009b78:	429e      	cmp	r6, r3
 8009b7a:	4680      	mov	r8, r0
 8009b7c:	4689      	mov	r9, r1
 8009b7e:	dc11      	bgt.n	8009ba4 <__kernel_cos+0x104>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4650      	mov	r0, sl
 8009b86:	4659      	mov	r1, fp
 8009b88:	f7f6 fb26 	bl	80001d8 <__aeabi_dsub>
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4924      	ldr	r1, [pc, #144]	; (8009c20 <__kernel_cos+0x180>)
 8009b90:	4602      	mov	r2, r0
 8009b92:	2000      	movs	r0, #0
 8009b94:	f7f6 fb20 	bl	80001d8 <__aeabi_dsub>
 8009b98:	ecbd 8b02 	vpop	{d8}
 8009b9c:	ec41 0b10 	vmov	d0, r0, r1
 8009ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba4:	4b1f      	ldr	r3, [pc, #124]	; (8009c24 <__kernel_cos+0x184>)
 8009ba6:	491e      	ldr	r1, [pc, #120]	; (8009c20 <__kernel_cos+0x180>)
 8009ba8:	429e      	cmp	r6, r3
 8009baa:	bfcc      	ite	gt
 8009bac:	4d1e      	ldrgt	r5, [pc, #120]	; (8009c28 <__kernel_cos+0x188>)
 8009bae:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009bb2:	2400      	movs	r4, #0
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	462b      	mov	r3, r5
 8009bb8:	2000      	movs	r0, #0
 8009bba:	f7f6 fb0d 	bl	80001d8 <__aeabi_dsub>
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	460f      	mov	r7, r1
 8009bc4:	462b      	mov	r3, r5
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	4659      	mov	r1, fp
 8009bca:	f7f6 fb05 	bl	80001d8 <__aeabi_dsub>
 8009bce:	4642      	mov	r2, r8
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	f7f6 fb01 	bl	80001d8 <__aeabi_dsub>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	460b      	mov	r3, r1
 8009bda:	4630      	mov	r0, r6
 8009bdc:	4639      	mov	r1, r7
 8009bde:	e7d9      	b.n	8009b94 <__kernel_cos+0xf4>
 8009be0:	2000      	movs	r0, #0
 8009be2:	490f      	ldr	r1, [pc, #60]	; (8009c20 <__kernel_cos+0x180>)
 8009be4:	e7d8      	b.n	8009b98 <__kernel_cos+0xf8>
 8009be6:	bf00      	nop
 8009be8:	be8838d4 	.word	0xbe8838d4
 8009bec:	bda8fae9 	.word	0xbda8fae9
 8009bf0:	bdb4b1c4 	.word	0xbdb4b1c4
 8009bf4:	3e21ee9e 	.word	0x3e21ee9e
 8009bf8:	809c52ad 	.word	0x809c52ad
 8009bfc:	3e927e4f 	.word	0x3e927e4f
 8009c00:	19cb1590 	.word	0x19cb1590
 8009c04:	3efa01a0 	.word	0x3efa01a0
 8009c08:	16c15177 	.word	0x16c15177
 8009c0c:	3f56c16c 	.word	0x3f56c16c
 8009c10:	5555554c 	.word	0x5555554c
 8009c14:	3fa55555 	.word	0x3fa55555
 8009c18:	3fe00000 	.word	0x3fe00000
 8009c1c:	3fd33332 	.word	0x3fd33332
 8009c20:	3ff00000 	.word	0x3ff00000
 8009c24:	3fe90000 	.word	0x3fe90000
 8009c28:	3fd20000 	.word	0x3fd20000
 8009c2c:	00000000 	.word	0x00000000

08009c30 <__kernel_rem_pio2>:
 8009c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	ed2d 8b02 	vpush	{d8}
 8009c38:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009c3c:	1ed4      	subs	r4, r2, #3
 8009c3e:	9308      	str	r3, [sp, #32]
 8009c40:	9101      	str	r1, [sp, #4]
 8009c42:	4bc5      	ldr	r3, [pc, #788]	; (8009f58 <__kernel_rem_pio2+0x328>)
 8009c44:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009c46:	9009      	str	r0, [sp, #36]	; 0x24
 8009c48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	9b08      	ldr	r3, [sp, #32]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	9307      	str	r3, [sp, #28]
 8009c54:	2318      	movs	r3, #24
 8009c56:	fb94 f4f3 	sdiv	r4, r4, r3
 8009c5a:	f06f 0317 	mvn.w	r3, #23
 8009c5e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009c62:	fb04 3303 	mla	r3, r4, r3, r3
 8009c66:	eb03 0a02 	add.w	sl, r3, r2
 8009c6a:	9b04      	ldr	r3, [sp, #16]
 8009c6c:	9a07      	ldr	r2, [sp, #28]
 8009c6e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009f48 <__kernel_rem_pio2+0x318>
 8009c72:	eb03 0802 	add.w	r8, r3, r2
 8009c76:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009c78:	1aa7      	subs	r7, r4, r2
 8009c7a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009c7e:	ae22      	add	r6, sp, #136	; 0x88
 8009c80:	2500      	movs	r5, #0
 8009c82:	4545      	cmp	r5, r8
 8009c84:	dd13      	ble.n	8009cae <__kernel_rem_pio2+0x7e>
 8009c86:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009f48 <__kernel_rem_pio2+0x318>
 8009c8a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009c8e:	2600      	movs	r6, #0
 8009c90:	9b04      	ldr	r3, [sp, #16]
 8009c92:	429e      	cmp	r6, r3
 8009c94:	dc32      	bgt.n	8009cfc <__kernel_rem_pio2+0xcc>
 8009c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c98:	9302      	str	r3, [sp, #8]
 8009c9a:	9b08      	ldr	r3, [sp, #32]
 8009c9c:	199d      	adds	r5, r3, r6
 8009c9e:	ab22      	add	r3, sp, #136	; 0x88
 8009ca0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009ca4:	9306      	str	r3, [sp, #24]
 8009ca6:	ec59 8b18 	vmov	r8, r9, d8
 8009caa:	2700      	movs	r7, #0
 8009cac:	e01f      	b.n	8009cee <__kernel_rem_pio2+0xbe>
 8009cae:	42ef      	cmn	r7, r5
 8009cb0:	d407      	bmi.n	8009cc2 <__kernel_rem_pio2+0x92>
 8009cb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009cb6:	f7f6 fbdd 	bl	8000474 <__aeabi_i2d>
 8009cba:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009cbe:	3501      	adds	r5, #1
 8009cc0:	e7df      	b.n	8009c82 <__kernel_rem_pio2+0x52>
 8009cc2:	ec51 0b18 	vmov	r0, r1, d8
 8009cc6:	e7f8      	b.n	8009cba <__kernel_rem_pio2+0x8a>
 8009cc8:	9906      	ldr	r1, [sp, #24]
 8009cca:	9d02      	ldr	r5, [sp, #8]
 8009ccc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009cd0:	9106      	str	r1, [sp, #24]
 8009cd2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009cd6:	9502      	str	r5, [sp, #8]
 8009cd8:	f7f6 fc36 	bl	8000548 <__aeabi_dmul>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	f7f6 fa7a 	bl	80001dc <__adddf3>
 8009ce8:	3701      	adds	r7, #1
 8009cea:	4680      	mov	r8, r0
 8009cec:	4689      	mov	r9, r1
 8009cee:	9b07      	ldr	r3, [sp, #28]
 8009cf0:	429f      	cmp	r7, r3
 8009cf2:	dde9      	ble.n	8009cc8 <__kernel_rem_pio2+0x98>
 8009cf4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009cf8:	3601      	adds	r6, #1
 8009cfa:	e7c9      	b.n	8009c90 <__kernel_rem_pio2+0x60>
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	aa0e      	add	r2, sp, #56	; 0x38
 8009d00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d04:	930c      	str	r3, [sp, #48]	; 0x30
 8009d06:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009d08:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009d0c:	9c04      	ldr	r4, [sp, #16]
 8009d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d10:	ab9a      	add	r3, sp, #616	; 0x268
 8009d12:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8009d16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d1e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8009d22:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8009d26:	ab9a      	add	r3, sp, #616	; 0x268
 8009d28:	445b      	add	r3, fp
 8009d2a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8009d2e:	2500      	movs	r5, #0
 8009d30:	1b63      	subs	r3, r4, r5
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	dc78      	bgt.n	8009e28 <__kernel_rem_pio2+0x1f8>
 8009d36:	4650      	mov	r0, sl
 8009d38:	ec49 8b10 	vmov	d0, r8, r9
 8009d3c:	f000 fbfc 	bl	800a538 <scalbn>
 8009d40:	ec57 6b10 	vmov	r6, r7, d0
 8009d44:	2200      	movs	r2, #0
 8009d46:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009d4a:	ee10 0a10 	vmov	r0, s0
 8009d4e:	4639      	mov	r1, r7
 8009d50:	f7f6 fbfa 	bl	8000548 <__aeabi_dmul>
 8009d54:	ec41 0b10 	vmov	d0, r0, r1
 8009d58:	f000 fb66 	bl	800a428 <floor>
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	ec51 0b10 	vmov	r0, r1, d0
 8009d62:	4b7e      	ldr	r3, [pc, #504]	; (8009f5c <__kernel_rem_pio2+0x32c>)
 8009d64:	f7f6 fbf0 	bl	8000548 <__aeabi_dmul>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	4639      	mov	r1, r7
 8009d70:	f7f6 fa32 	bl	80001d8 <__aeabi_dsub>
 8009d74:	460f      	mov	r7, r1
 8009d76:	4606      	mov	r6, r0
 8009d78:	f7f6 fe96 	bl	8000aa8 <__aeabi_d2iz>
 8009d7c:	9006      	str	r0, [sp, #24]
 8009d7e:	f7f6 fb79 	bl	8000474 <__aeabi_i2d>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 fa25 	bl	80001d8 <__aeabi_dsub>
 8009d8e:	f1ba 0f00 	cmp.w	sl, #0
 8009d92:	4606      	mov	r6, r0
 8009d94:	460f      	mov	r7, r1
 8009d96:	dd6c      	ble.n	8009e72 <__kernel_rem_pio2+0x242>
 8009d98:	1e62      	subs	r2, r4, #1
 8009d9a:	ab0e      	add	r3, sp, #56	; 0x38
 8009d9c:	f1ca 0118 	rsb	r1, sl, #24
 8009da0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009da4:	9d06      	ldr	r5, [sp, #24]
 8009da6:	fa40 f301 	asr.w	r3, r0, r1
 8009daa:	441d      	add	r5, r3
 8009dac:	408b      	lsls	r3, r1
 8009dae:	1ac0      	subs	r0, r0, r3
 8009db0:	ab0e      	add	r3, sp, #56	; 0x38
 8009db2:	9506      	str	r5, [sp, #24]
 8009db4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009db8:	f1ca 0317 	rsb	r3, sl, #23
 8009dbc:	fa40 f303 	asr.w	r3, r0, r3
 8009dc0:	9302      	str	r3, [sp, #8]
 8009dc2:	9b02      	ldr	r3, [sp, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	dd62      	ble.n	8009e8e <__kernel_rem_pio2+0x25e>
 8009dc8:	9b06      	ldr	r3, [sp, #24]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	3301      	adds	r3, #1
 8009dce:	9306      	str	r3, [sp, #24]
 8009dd0:	4615      	mov	r5, r2
 8009dd2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009dd6:	4294      	cmp	r4, r2
 8009dd8:	f300 8095 	bgt.w	8009f06 <__kernel_rem_pio2+0x2d6>
 8009ddc:	f1ba 0f00 	cmp.w	sl, #0
 8009de0:	dd07      	ble.n	8009df2 <__kernel_rem_pio2+0x1c2>
 8009de2:	f1ba 0f01 	cmp.w	sl, #1
 8009de6:	f000 80a2 	beq.w	8009f2e <__kernel_rem_pio2+0x2fe>
 8009dea:	f1ba 0f02 	cmp.w	sl, #2
 8009dee:	f000 80c1 	beq.w	8009f74 <__kernel_rem_pio2+0x344>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d14a      	bne.n	8009e8e <__kernel_rem_pio2+0x25e>
 8009df8:	4632      	mov	r2, r6
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	4958      	ldr	r1, [pc, #352]	; (8009f60 <__kernel_rem_pio2+0x330>)
 8009e00:	f7f6 f9ea 	bl	80001d8 <__aeabi_dsub>
 8009e04:	4606      	mov	r6, r0
 8009e06:	460f      	mov	r7, r1
 8009e08:	2d00      	cmp	r5, #0
 8009e0a:	d040      	beq.n	8009e8e <__kernel_rem_pio2+0x25e>
 8009e0c:	4650      	mov	r0, sl
 8009e0e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009f50 <__kernel_rem_pio2+0x320>
 8009e12:	f000 fb91 	bl	800a538 <scalbn>
 8009e16:	4630      	mov	r0, r6
 8009e18:	4639      	mov	r1, r7
 8009e1a:	ec53 2b10 	vmov	r2, r3, d0
 8009e1e:	f7f6 f9db 	bl	80001d8 <__aeabi_dsub>
 8009e22:	4606      	mov	r6, r0
 8009e24:	460f      	mov	r7, r1
 8009e26:	e032      	b.n	8009e8e <__kernel_rem_pio2+0x25e>
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4b4e      	ldr	r3, [pc, #312]	; (8009f64 <__kernel_rem_pio2+0x334>)
 8009e2c:	4640      	mov	r0, r8
 8009e2e:	4649      	mov	r1, r9
 8009e30:	f7f6 fb8a 	bl	8000548 <__aeabi_dmul>
 8009e34:	f7f6 fe38 	bl	8000aa8 <__aeabi_d2iz>
 8009e38:	f7f6 fb1c 	bl	8000474 <__aeabi_i2d>
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4b4a      	ldr	r3, [pc, #296]	; (8009f68 <__kernel_rem_pio2+0x338>)
 8009e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e44:	f7f6 fb80 	bl	8000548 <__aeabi_dmul>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	4649      	mov	r1, r9
 8009e50:	f7f6 f9c2 	bl	80001d8 <__aeabi_dsub>
 8009e54:	f7f6 fe28 	bl	8000aa8 <__aeabi_d2iz>
 8009e58:	ab0e      	add	r3, sp, #56	; 0x38
 8009e5a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009e5e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e66:	f7f6 f9b9 	bl	80001dc <__adddf3>
 8009e6a:	3501      	adds	r5, #1
 8009e6c:	4680      	mov	r8, r0
 8009e6e:	4689      	mov	r9, r1
 8009e70:	e75e      	b.n	8009d30 <__kernel_rem_pio2+0x100>
 8009e72:	d105      	bne.n	8009e80 <__kernel_rem_pio2+0x250>
 8009e74:	1e63      	subs	r3, r4, #1
 8009e76:	aa0e      	add	r2, sp, #56	; 0x38
 8009e78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009e7c:	15c3      	asrs	r3, r0, #23
 8009e7e:	e79f      	b.n	8009dc0 <__kernel_rem_pio2+0x190>
 8009e80:	2200      	movs	r2, #0
 8009e82:	4b3a      	ldr	r3, [pc, #232]	; (8009f6c <__kernel_rem_pio2+0x33c>)
 8009e84:	f7f6 fde6 	bl	8000a54 <__aeabi_dcmpge>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d139      	bne.n	8009f00 <__kernel_rem_pio2+0x2d0>
 8009e8c:	9002      	str	r0, [sp, #8]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2300      	movs	r3, #0
 8009e92:	4630      	mov	r0, r6
 8009e94:	4639      	mov	r1, r7
 8009e96:	f7f6 fdbf 	bl	8000a18 <__aeabi_dcmpeq>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	f000 80c7 	beq.w	800a02e <__kernel_rem_pio2+0x3fe>
 8009ea0:	1e65      	subs	r5, r4, #1
 8009ea2:	462b      	mov	r3, r5
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	9904      	ldr	r1, [sp, #16]
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	da6a      	bge.n	8009f82 <__kernel_rem_pio2+0x352>
 8009eac:	2a00      	cmp	r2, #0
 8009eae:	f000 8088 	beq.w	8009fc2 <__kernel_rem_pio2+0x392>
 8009eb2:	ab0e      	add	r3, sp, #56	; 0x38
 8009eb4:	f1aa 0a18 	sub.w	sl, sl, #24
 8009eb8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 80b4 	beq.w	800a02a <__kernel_rem_pio2+0x3fa>
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009f50 <__kernel_rem_pio2+0x320>
 8009ec8:	f000 fb36 	bl	800a538 <scalbn>
 8009ecc:	00ec      	lsls	r4, r5, #3
 8009ece:	ab72      	add	r3, sp, #456	; 0x1c8
 8009ed0:	191e      	adds	r6, r3, r4
 8009ed2:	ec59 8b10 	vmov	r8, r9, d0
 8009ed6:	f106 0a08 	add.w	sl, r6, #8
 8009eda:	462f      	mov	r7, r5
 8009edc:	2f00      	cmp	r7, #0
 8009ede:	f280 80df 	bge.w	800a0a0 <__kernel_rem_pio2+0x470>
 8009ee2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009f48 <__kernel_rem_pio2+0x318>
 8009ee6:	f04f 0a00 	mov.w	sl, #0
 8009eea:	eba5 030a 	sub.w	r3, r5, sl
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f2c0 810a 	blt.w	800a108 <__kernel_rem_pio2+0x4d8>
 8009ef4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009f70 <__kernel_rem_pio2+0x340>
 8009ef8:	ec59 8b18 	vmov	r8, r9, d8
 8009efc:	2700      	movs	r7, #0
 8009efe:	e0f5      	b.n	800a0ec <__kernel_rem_pio2+0x4bc>
 8009f00:	2302      	movs	r3, #2
 8009f02:	9302      	str	r3, [sp, #8]
 8009f04:	e760      	b.n	8009dc8 <__kernel_rem_pio2+0x198>
 8009f06:	ab0e      	add	r3, sp, #56	; 0x38
 8009f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0c:	b94d      	cbnz	r5, 8009f22 <__kernel_rem_pio2+0x2f2>
 8009f0e:	b12b      	cbz	r3, 8009f1c <__kernel_rem_pio2+0x2ec>
 8009f10:	a80e      	add	r0, sp, #56	; 0x38
 8009f12:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009f16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	3201      	adds	r2, #1
 8009f1e:	461d      	mov	r5, r3
 8009f20:	e759      	b.n	8009dd6 <__kernel_rem_pio2+0x1a6>
 8009f22:	a80e      	add	r0, sp, #56	; 0x38
 8009f24:	1acb      	subs	r3, r1, r3
 8009f26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009f2a:	462b      	mov	r3, r5
 8009f2c:	e7f6      	b.n	8009f1c <__kernel_rem_pio2+0x2ec>
 8009f2e:	1e62      	subs	r2, r4, #1
 8009f30:	ab0e      	add	r3, sp, #56	; 0x38
 8009f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f36:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009f3a:	a90e      	add	r1, sp, #56	; 0x38
 8009f3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009f40:	e757      	b.n	8009df2 <__kernel_rem_pio2+0x1c2>
 8009f42:	bf00      	nop
 8009f44:	f3af 8000 	nop.w
	...
 8009f54:	3ff00000 	.word	0x3ff00000
 8009f58:	0800aa00 	.word	0x0800aa00
 8009f5c:	40200000 	.word	0x40200000
 8009f60:	3ff00000 	.word	0x3ff00000
 8009f64:	3e700000 	.word	0x3e700000
 8009f68:	41700000 	.word	0x41700000
 8009f6c:	3fe00000 	.word	0x3fe00000
 8009f70:	0800a9c0 	.word	0x0800a9c0
 8009f74:	1e62      	subs	r2, r4, #1
 8009f76:	ab0e      	add	r3, sp, #56	; 0x38
 8009f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f7c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009f80:	e7db      	b.n	8009f3a <__kernel_rem_pio2+0x30a>
 8009f82:	a90e      	add	r1, sp, #56	; 0x38
 8009f84:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	e78b      	b.n	8009ea6 <__kernel_rem_pio2+0x276>
 8009f8e:	3301      	adds	r3, #1
 8009f90:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009f94:	2900      	cmp	r1, #0
 8009f96:	d0fa      	beq.n	8009f8e <__kernel_rem_pio2+0x35e>
 8009f98:	9a08      	ldr	r2, [sp, #32]
 8009f9a:	4422      	add	r2, r4
 8009f9c:	00d2      	lsls	r2, r2, #3
 8009f9e:	a922      	add	r1, sp, #136	; 0x88
 8009fa0:	18e3      	adds	r3, r4, r3
 8009fa2:	9206      	str	r2, [sp, #24]
 8009fa4:	440a      	add	r2, r1
 8009fa6:	9302      	str	r3, [sp, #8]
 8009fa8:	f10b 0108 	add.w	r1, fp, #8
 8009fac:	f102 0308 	add.w	r3, r2, #8
 8009fb0:	1c66      	adds	r6, r4, #1
 8009fb2:	910a      	str	r1, [sp, #40]	; 0x28
 8009fb4:	2500      	movs	r5, #0
 8009fb6:	930d      	str	r3, [sp, #52]	; 0x34
 8009fb8:	9b02      	ldr	r3, [sp, #8]
 8009fba:	42b3      	cmp	r3, r6
 8009fbc:	da04      	bge.n	8009fc8 <__kernel_rem_pio2+0x398>
 8009fbe:	461c      	mov	r4, r3
 8009fc0:	e6a6      	b.n	8009d10 <__kernel_rem_pio2+0xe0>
 8009fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e7e3      	b.n	8009f90 <__kernel_rem_pio2+0x360>
 8009fc8:	9b06      	ldr	r3, [sp, #24]
 8009fca:	18ef      	adds	r7, r5, r3
 8009fcc:	ab22      	add	r3, sp, #136	; 0x88
 8009fce:	441f      	add	r7, r3
 8009fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fd2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009fd6:	f7f6 fa4d 	bl	8000474 <__aeabi_i2d>
 8009fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fdc:	461c      	mov	r4, r3
 8009fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fe0:	e9c7 0100 	strd	r0, r1, [r7]
 8009fe4:	eb03 0b05 	add.w	fp, r3, r5
 8009fe8:	2700      	movs	r7, #0
 8009fea:	f04f 0800 	mov.w	r8, #0
 8009fee:	f04f 0900 	mov.w	r9, #0
 8009ff2:	9b07      	ldr	r3, [sp, #28]
 8009ff4:	429f      	cmp	r7, r3
 8009ff6:	dd08      	ble.n	800a00a <__kernel_rem_pio2+0x3da>
 8009ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ffa:	aa72      	add	r2, sp, #456	; 0x1c8
 8009ffc:	18eb      	adds	r3, r5, r3
 8009ffe:	4413      	add	r3, r2
 800a000:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a004:	3601      	adds	r6, #1
 800a006:	3508      	adds	r5, #8
 800a008:	e7d6      	b.n	8009fb8 <__kernel_rem_pio2+0x388>
 800a00a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a00e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a012:	f7f6 fa99 	bl	8000548 <__aeabi_dmul>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	4640      	mov	r0, r8
 800a01c:	4649      	mov	r1, r9
 800a01e:	f7f6 f8dd 	bl	80001dc <__adddf3>
 800a022:	3701      	adds	r7, #1
 800a024:	4680      	mov	r8, r0
 800a026:	4689      	mov	r9, r1
 800a028:	e7e3      	b.n	8009ff2 <__kernel_rem_pio2+0x3c2>
 800a02a:	3d01      	subs	r5, #1
 800a02c:	e741      	b.n	8009eb2 <__kernel_rem_pio2+0x282>
 800a02e:	f1ca 0000 	rsb	r0, sl, #0
 800a032:	ec47 6b10 	vmov	d0, r6, r7
 800a036:	f000 fa7f 	bl	800a538 <scalbn>
 800a03a:	ec57 6b10 	vmov	r6, r7, d0
 800a03e:	2200      	movs	r2, #0
 800a040:	4b99      	ldr	r3, [pc, #612]	; (800a2a8 <__kernel_rem_pio2+0x678>)
 800a042:	ee10 0a10 	vmov	r0, s0
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 fd04 	bl	8000a54 <__aeabi_dcmpge>
 800a04c:	b1f8      	cbz	r0, 800a08e <__kernel_rem_pio2+0x45e>
 800a04e:	2200      	movs	r2, #0
 800a050:	4b96      	ldr	r3, [pc, #600]	; (800a2ac <__kernel_rem_pio2+0x67c>)
 800a052:	4630      	mov	r0, r6
 800a054:	4639      	mov	r1, r7
 800a056:	f7f6 fa77 	bl	8000548 <__aeabi_dmul>
 800a05a:	f7f6 fd25 	bl	8000aa8 <__aeabi_d2iz>
 800a05e:	4680      	mov	r8, r0
 800a060:	f7f6 fa08 	bl	8000474 <__aeabi_i2d>
 800a064:	2200      	movs	r2, #0
 800a066:	4b90      	ldr	r3, [pc, #576]	; (800a2a8 <__kernel_rem_pio2+0x678>)
 800a068:	f7f6 fa6e 	bl	8000548 <__aeabi_dmul>
 800a06c:	460b      	mov	r3, r1
 800a06e:	4602      	mov	r2, r0
 800a070:	4639      	mov	r1, r7
 800a072:	4630      	mov	r0, r6
 800a074:	f7f6 f8b0 	bl	80001d8 <__aeabi_dsub>
 800a078:	f7f6 fd16 	bl	8000aa8 <__aeabi_d2iz>
 800a07c:	1c65      	adds	r5, r4, #1
 800a07e:	ab0e      	add	r3, sp, #56	; 0x38
 800a080:	f10a 0a18 	add.w	sl, sl, #24
 800a084:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a088:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a08c:	e719      	b.n	8009ec2 <__kernel_rem_pio2+0x292>
 800a08e:	4630      	mov	r0, r6
 800a090:	4639      	mov	r1, r7
 800a092:	f7f6 fd09 	bl	8000aa8 <__aeabi_d2iz>
 800a096:	ab0e      	add	r3, sp, #56	; 0x38
 800a098:	4625      	mov	r5, r4
 800a09a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a09e:	e710      	b.n	8009ec2 <__kernel_rem_pio2+0x292>
 800a0a0:	ab0e      	add	r3, sp, #56	; 0x38
 800a0a2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a0a6:	f7f6 f9e5 	bl	8000474 <__aeabi_i2d>
 800a0aa:	4642      	mov	r2, r8
 800a0ac:	464b      	mov	r3, r9
 800a0ae:	f7f6 fa4b 	bl	8000548 <__aeabi_dmul>
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a0b8:	4b7c      	ldr	r3, [pc, #496]	; (800a2ac <__kernel_rem_pio2+0x67c>)
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	4649      	mov	r1, r9
 800a0be:	f7f6 fa43 	bl	8000548 <__aeabi_dmul>
 800a0c2:	3f01      	subs	r7, #1
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	4689      	mov	r9, r1
 800a0c8:	e708      	b.n	8009edc <__kernel_rem_pio2+0x2ac>
 800a0ca:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a0d6:	f7f6 fa37 	bl	8000548 <__aeabi_dmul>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4640      	mov	r0, r8
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	f7f6 f87b 	bl	80001dc <__adddf3>
 800a0e6:	3701      	adds	r7, #1
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	4689      	mov	r9, r1
 800a0ec:	9b04      	ldr	r3, [sp, #16]
 800a0ee:	429f      	cmp	r7, r3
 800a0f0:	dc01      	bgt.n	800a0f6 <__kernel_rem_pio2+0x4c6>
 800a0f2:	45ba      	cmp	sl, r7
 800a0f4:	dae9      	bge.n	800a0ca <__kernel_rem_pio2+0x49a>
 800a0f6:	ab4a      	add	r3, sp, #296	; 0x128
 800a0f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0fc:	e9c3 8900 	strd	r8, r9, [r3]
 800a100:	f10a 0a01 	add.w	sl, sl, #1
 800a104:	3e08      	subs	r6, #8
 800a106:	e6f0      	b.n	8009eea <__kernel_rem_pio2+0x2ba>
 800a108:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d85b      	bhi.n	800a1c6 <__kernel_rem_pio2+0x596>
 800a10e:	e8df f003 	tbb	[pc, r3]
 800a112:	264a      	.short	0x264a
 800a114:	0226      	.short	0x0226
 800a116:	ab9a      	add	r3, sp, #616	; 0x268
 800a118:	441c      	add	r4, r3
 800a11a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a11e:	46a2      	mov	sl, r4
 800a120:	46ab      	mov	fp, r5
 800a122:	f1bb 0f00 	cmp.w	fp, #0
 800a126:	dc6c      	bgt.n	800a202 <__kernel_rem_pio2+0x5d2>
 800a128:	46a2      	mov	sl, r4
 800a12a:	46ab      	mov	fp, r5
 800a12c:	f1bb 0f01 	cmp.w	fp, #1
 800a130:	f300 8086 	bgt.w	800a240 <__kernel_rem_pio2+0x610>
 800a134:	2000      	movs	r0, #0
 800a136:	2100      	movs	r1, #0
 800a138:	2d01      	cmp	r5, #1
 800a13a:	f300 80a0 	bgt.w	800a27e <__kernel_rem_pio2+0x64e>
 800a13e:	9b02      	ldr	r3, [sp, #8]
 800a140:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a144:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f040 809e 	bne.w	800a28a <__kernel_rem_pio2+0x65a>
 800a14e:	9b01      	ldr	r3, [sp, #4]
 800a150:	e9c3 7800 	strd	r7, r8, [r3]
 800a154:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a158:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a15c:	e033      	b.n	800a1c6 <__kernel_rem_pio2+0x596>
 800a15e:	3408      	adds	r4, #8
 800a160:	ab4a      	add	r3, sp, #296	; 0x128
 800a162:	441c      	add	r4, r3
 800a164:	462e      	mov	r6, r5
 800a166:	2000      	movs	r0, #0
 800a168:	2100      	movs	r1, #0
 800a16a:	2e00      	cmp	r6, #0
 800a16c:	da3a      	bge.n	800a1e4 <__kernel_rem_pio2+0x5b4>
 800a16e:	9b02      	ldr	r3, [sp, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d03d      	beq.n	800a1f0 <__kernel_rem_pio2+0x5c0>
 800a174:	4602      	mov	r2, r0
 800a176:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a17a:	9c01      	ldr	r4, [sp, #4]
 800a17c:	e9c4 2300 	strd	r2, r3, [r4]
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a188:	f7f6 f826 	bl	80001d8 <__aeabi_dsub>
 800a18c:	ae4c      	add	r6, sp, #304	; 0x130
 800a18e:	2401      	movs	r4, #1
 800a190:	42a5      	cmp	r5, r4
 800a192:	da30      	bge.n	800a1f6 <__kernel_rem_pio2+0x5c6>
 800a194:	9b02      	ldr	r3, [sp, #8]
 800a196:	b113      	cbz	r3, 800a19e <__kernel_rem_pio2+0x56e>
 800a198:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a19c:	4619      	mov	r1, r3
 800a19e:	9b01      	ldr	r3, [sp, #4]
 800a1a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a1a4:	e00f      	b.n	800a1c6 <__kernel_rem_pio2+0x596>
 800a1a6:	ab9a      	add	r3, sp, #616	; 0x268
 800a1a8:	441c      	add	r4, r3
 800a1aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	2d00      	cmp	r5, #0
 800a1b4:	da10      	bge.n	800a1d8 <__kernel_rem_pio2+0x5a8>
 800a1b6:	9b02      	ldr	r3, [sp, #8]
 800a1b8:	b113      	cbz	r3, 800a1c0 <__kernel_rem_pio2+0x590>
 800a1ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1be:	4619      	mov	r1, r3
 800a1c0:	9b01      	ldr	r3, [sp, #4]
 800a1c2:	e9c3 0100 	strd	r0, r1, [r3]
 800a1c6:	9b06      	ldr	r3, [sp, #24]
 800a1c8:	f003 0007 	and.w	r0, r3, #7
 800a1cc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a1d0:	ecbd 8b02 	vpop	{d8}
 800a1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a1dc:	f7f5 fffe 	bl	80001dc <__adddf3>
 800a1e0:	3d01      	subs	r5, #1
 800a1e2:	e7e6      	b.n	800a1b2 <__kernel_rem_pio2+0x582>
 800a1e4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a1e8:	f7f5 fff8 	bl	80001dc <__adddf3>
 800a1ec:	3e01      	subs	r6, #1
 800a1ee:	e7bc      	b.n	800a16a <__kernel_rem_pio2+0x53a>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	e7c1      	b.n	800a17a <__kernel_rem_pio2+0x54a>
 800a1f6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a1fa:	f7f5 ffef 	bl	80001dc <__adddf3>
 800a1fe:	3401      	adds	r4, #1
 800a200:	e7c6      	b.n	800a190 <__kernel_rem_pio2+0x560>
 800a202:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a206:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a20a:	4640      	mov	r0, r8
 800a20c:	ec53 2b17 	vmov	r2, r3, d7
 800a210:	4649      	mov	r1, r9
 800a212:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a216:	f7f5 ffe1 	bl	80001dc <__adddf3>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	4606      	mov	r6, r0
 800a220:	460f      	mov	r7, r1
 800a222:	4640      	mov	r0, r8
 800a224:	4649      	mov	r1, r9
 800a226:	f7f5 ffd7 	bl	80001d8 <__aeabi_dsub>
 800a22a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a22e:	f7f5 ffd5 	bl	80001dc <__adddf3>
 800a232:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a236:	e9ca 0100 	strd	r0, r1, [sl]
 800a23a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a23e:	e770      	b.n	800a122 <__kernel_rem_pio2+0x4f2>
 800a240:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a244:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a248:	4630      	mov	r0, r6
 800a24a:	ec53 2b17 	vmov	r2, r3, d7
 800a24e:	4639      	mov	r1, r7
 800a250:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a254:	f7f5 ffc2 	bl	80001dc <__adddf3>
 800a258:	4602      	mov	r2, r0
 800a25a:	460b      	mov	r3, r1
 800a25c:	4680      	mov	r8, r0
 800a25e:	4689      	mov	r9, r1
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f7f5 ffb8 	bl	80001d8 <__aeabi_dsub>
 800a268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a26c:	f7f5 ffb6 	bl	80001dc <__adddf3>
 800a270:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a274:	e9ca 0100 	strd	r0, r1, [sl]
 800a278:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a27c:	e756      	b.n	800a12c <__kernel_rem_pio2+0x4fc>
 800a27e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a282:	f7f5 ffab 	bl	80001dc <__adddf3>
 800a286:	3d01      	subs	r5, #1
 800a288:	e756      	b.n	800a138 <__kernel_rem_pio2+0x508>
 800a28a:	9b01      	ldr	r3, [sp, #4]
 800a28c:	9a01      	ldr	r2, [sp, #4]
 800a28e:	601f      	str	r7, [r3, #0]
 800a290:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a294:	605c      	str	r4, [r3, #4]
 800a296:	609d      	str	r5, [r3, #8]
 800a298:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a29c:	60d3      	str	r3, [r2, #12]
 800a29e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2a2:	6110      	str	r0, [r2, #16]
 800a2a4:	6153      	str	r3, [r2, #20]
 800a2a6:	e78e      	b.n	800a1c6 <__kernel_rem_pio2+0x596>
 800a2a8:	41700000 	.word	0x41700000
 800a2ac:	3e700000 	.word	0x3e700000

0800a2b0 <__kernel_sin>:
 800a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	ec55 4b10 	vmov	r4, r5, d0
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a2be:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a2c2:	ed8d 1b00 	vstr	d1, [sp]
 800a2c6:	9002      	str	r0, [sp, #8]
 800a2c8:	da06      	bge.n	800a2d8 <__kernel_sin+0x28>
 800a2ca:	ee10 0a10 	vmov	r0, s0
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	f7f6 fbea 	bl	8000aa8 <__aeabi_d2iz>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d051      	beq.n	800a37c <__kernel_sin+0xcc>
 800a2d8:	4622      	mov	r2, r4
 800a2da:	462b      	mov	r3, r5
 800a2dc:	4620      	mov	r0, r4
 800a2de:	4629      	mov	r1, r5
 800a2e0:	f7f6 f932 	bl	8000548 <__aeabi_dmul>
 800a2e4:	4682      	mov	sl, r0
 800a2e6:	468b      	mov	fp, r1
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	f7f6 f92a 	bl	8000548 <__aeabi_dmul>
 800a2f4:	a341      	add	r3, pc, #260	; (adr r3, 800a3fc <__kernel_sin+0x14c>)
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	4689      	mov	r9, r1
 800a2fe:	4650      	mov	r0, sl
 800a300:	4659      	mov	r1, fp
 800a302:	f7f6 f921 	bl	8000548 <__aeabi_dmul>
 800a306:	a33f      	add	r3, pc, #252	; (adr r3, 800a404 <__kernel_sin+0x154>)
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	f7f5 ff64 	bl	80001d8 <__aeabi_dsub>
 800a310:	4652      	mov	r2, sl
 800a312:	465b      	mov	r3, fp
 800a314:	f7f6 f918 	bl	8000548 <__aeabi_dmul>
 800a318:	a33c      	add	r3, pc, #240	; (adr r3, 800a40c <__kernel_sin+0x15c>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f5 ff5d 	bl	80001dc <__adddf3>
 800a322:	4652      	mov	r2, sl
 800a324:	465b      	mov	r3, fp
 800a326:	f7f6 f90f 	bl	8000548 <__aeabi_dmul>
 800a32a:	a33a      	add	r3, pc, #232	; (adr r3, 800a414 <__kernel_sin+0x164>)
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	f7f5 ff52 	bl	80001d8 <__aeabi_dsub>
 800a334:	4652      	mov	r2, sl
 800a336:	465b      	mov	r3, fp
 800a338:	f7f6 f906 	bl	8000548 <__aeabi_dmul>
 800a33c:	a337      	add	r3, pc, #220	; (adr r3, 800a41c <__kernel_sin+0x16c>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	f7f5 ff4b 	bl	80001dc <__adddf3>
 800a346:	9b02      	ldr	r3, [sp, #8]
 800a348:	4606      	mov	r6, r0
 800a34a:	460f      	mov	r7, r1
 800a34c:	b9db      	cbnz	r3, 800a386 <__kernel_sin+0xd6>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4650      	mov	r0, sl
 800a354:	4659      	mov	r1, fp
 800a356:	f7f6 f8f7 	bl	8000548 <__aeabi_dmul>
 800a35a:	a325      	add	r3, pc, #148	; (adr r3, 800a3f0 <__kernel_sin+0x140>)
 800a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a360:	f7f5 ff3a 	bl	80001d8 <__aeabi_dsub>
 800a364:	4642      	mov	r2, r8
 800a366:	464b      	mov	r3, r9
 800a368:	f7f6 f8ee 	bl	8000548 <__aeabi_dmul>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4620      	mov	r0, r4
 800a372:	4629      	mov	r1, r5
 800a374:	f7f5 ff32 	bl	80001dc <__adddf3>
 800a378:	4604      	mov	r4, r0
 800a37a:	460d      	mov	r5, r1
 800a37c:	ec45 4b10 	vmov	d0, r4, r5
 800a380:	b005      	add	sp, #20
 800a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a386:	2200      	movs	r2, #0
 800a388:	4b1b      	ldr	r3, [pc, #108]	; (800a3f8 <__kernel_sin+0x148>)
 800a38a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a38e:	f7f6 f8db 	bl	8000548 <__aeabi_dmul>
 800a392:	4632      	mov	r2, r6
 800a394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a398:	463b      	mov	r3, r7
 800a39a:	4640      	mov	r0, r8
 800a39c:	4649      	mov	r1, r9
 800a39e:	f7f6 f8d3 	bl	8000548 <__aeabi_dmul>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3aa:	f7f5 ff15 	bl	80001d8 <__aeabi_dsub>
 800a3ae:	4652      	mov	r2, sl
 800a3b0:	465b      	mov	r3, fp
 800a3b2:	f7f6 f8c9 	bl	8000548 <__aeabi_dmul>
 800a3b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3ba:	f7f5 ff0d 	bl	80001d8 <__aeabi_dsub>
 800a3be:	a30c      	add	r3, pc, #48	; (adr r3, 800a3f0 <__kernel_sin+0x140>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	460f      	mov	r7, r1
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	f7f6 f8bc 	bl	8000548 <__aeabi_dmul>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	f7f5 ff00 	bl	80001dc <__adddf3>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f7f5 fef8 	bl	80001d8 <__aeabi_dsub>
 800a3e8:	e7c6      	b.n	800a378 <__kernel_sin+0xc8>
 800a3ea:	bf00      	nop
 800a3ec:	f3af 8000 	nop.w
 800a3f0:	55555549 	.word	0x55555549
 800a3f4:	3fc55555 	.word	0x3fc55555
 800a3f8:	3fe00000 	.word	0x3fe00000
 800a3fc:	5acfd57c 	.word	0x5acfd57c
 800a400:	3de5d93a 	.word	0x3de5d93a
 800a404:	8a2b9ceb 	.word	0x8a2b9ceb
 800a408:	3e5ae5e6 	.word	0x3e5ae5e6
 800a40c:	57b1fe7d 	.word	0x57b1fe7d
 800a410:	3ec71de3 	.word	0x3ec71de3
 800a414:	19c161d5 	.word	0x19c161d5
 800a418:	3f2a01a0 	.word	0x3f2a01a0
 800a41c:	1110f8a6 	.word	0x1110f8a6
 800a420:	3f811111 	.word	0x3f811111
 800a424:	00000000 	.word	0x00000000

0800a428 <floor>:
 800a428:	ec51 0b10 	vmov	r0, r1, d0
 800a42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a430:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a434:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a438:	2e13      	cmp	r6, #19
 800a43a:	460c      	mov	r4, r1
 800a43c:	ee10 5a10 	vmov	r5, s0
 800a440:	4680      	mov	r8, r0
 800a442:	dc34      	bgt.n	800a4ae <floor+0x86>
 800a444:	2e00      	cmp	r6, #0
 800a446:	da16      	bge.n	800a476 <floor+0x4e>
 800a448:	a335      	add	r3, pc, #212	; (adr r3, 800a520 <floor+0xf8>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f7f5 fec5 	bl	80001dc <__adddf3>
 800a452:	2200      	movs	r2, #0
 800a454:	2300      	movs	r3, #0
 800a456:	f7f6 fb07 	bl	8000a68 <__aeabi_dcmpgt>
 800a45a:	b148      	cbz	r0, 800a470 <floor+0x48>
 800a45c:	2c00      	cmp	r4, #0
 800a45e:	da59      	bge.n	800a514 <floor+0xec>
 800a460:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a464:	4a30      	ldr	r2, [pc, #192]	; (800a528 <floor+0x100>)
 800a466:	432b      	orrs	r3, r5
 800a468:	2500      	movs	r5, #0
 800a46a:	42ab      	cmp	r3, r5
 800a46c:	bf18      	it	ne
 800a46e:	4614      	movne	r4, r2
 800a470:	4621      	mov	r1, r4
 800a472:	4628      	mov	r0, r5
 800a474:	e025      	b.n	800a4c2 <floor+0x9a>
 800a476:	4f2d      	ldr	r7, [pc, #180]	; (800a52c <floor+0x104>)
 800a478:	4137      	asrs	r7, r6
 800a47a:	ea01 0307 	and.w	r3, r1, r7
 800a47e:	4303      	orrs	r3, r0
 800a480:	d01f      	beq.n	800a4c2 <floor+0x9a>
 800a482:	a327      	add	r3, pc, #156	; (adr r3, 800a520 <floor+0xf8>)
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	f7f5 fea8 	bl	80001dc <__adddf3>
 800a48c:	2200      	movs	r2, #0
 800a48e:	2300      	movs	r3, #0
 800a490:	f7f6 faea 	bl	8000a68 <__aeabi_dcmpgt>
 800a494:	2800      	cmp	r0, #0
 800a496:	d0eb      	beq.n	800a470 <floor+0x48>
 800a498:	2c00      	cmp	r4, #0
 800a49a:	bfbe      	ittt	lt
 800a49c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a4a0:	fa43 f606 	asrlt.w	r6, r3, r6
 800a4a4:	19a4      	addlt	r4, r4, r6
 800a4a6:	ea24 0407 	bic.w	r4, r4, r7
 800a4aa:	2500      	movs	r5, #0
 800a4ac:	e7e0      	b.n	800a470 <floor+0x48>
 800a4ae:	2e33      	cmp	r6, #51	; 0x33
 800a4b0:	dd0b      	ble.n	800a4ca <floor+0xa2>
 800a4b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a4b6:	d104      	bne.n	800a4c2 <floor+0x9a>
 800a4b8:	ee10 2a10 	vmov	r2, s0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	f7f5 fe8d 	bl	80001dc <__adddf3>
 800a4c2:	ec41 0b10 	vmov	d0, r0, r1
 800a4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d2:	fa23 f707 	lsr.w	r7, r3, r7
 800a4d6:	4207      	tst	r7, r0
 800a4d8:	d0f3      	beq.n	800a4c2 <floor+0x9a>
 800a4da:	a311      	add	r3, pc, #68	; (adr r3, 800a520 <floor+0xf8>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f7f5 fe7c 	bl	80001dc <__adddf3>
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f7f6 fabe 	bl	8000a68 <__aeabi_dcmpgt>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d0bf      	beq.n	800a470 <floor+0x48>
 800a4f0:	2c00      	cmp	r4, #0
 800a4f2:	da02      	bge.n	800a4fa <floor+0xd2>
 800a4f4:	2e14      	cmp	r6, #20
 800a4f6:	d103      	bne.n	800a500 <floor+0xd8>
 800a4f8:	3401      	adds	r4, #1
 800a4fa:	ea25 0507 	bic.w	r5, r5, r7
 800a4fe:	e7b7      	b.n	800a470 <floor+0x48>
 800a500:	2301      	movs	r3, #1
 800a502:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a506:	fa03 f606 	lsl.w	r6, r3, r6
 800a50a:	4435      	add	r5, r6
 800a50c:	4545      	cmp	r5, r8
 800a50e:	bf38      	it	cc
 800a510:	18e4      	addcc	r4, r4, r3
 800a512:	e7f2      	b.n	800a4fa <floor+0xd2>
 800a514:	2500      	movs	r5, #0
 800a516:	462c      	mov	r4, r5
 800a518:	e7aa      	b.n	800a470 <floor+0x48>
 800a51a:	bf00      	nop
 800a51c:	f3af 8000 	nop.w
 800a520:	8800759c 	.word	0x8800759c
 800a524:	7e37e43c 	.word	0x7e37e43c
 800a528:	bff00000 	.word	0xbff00000
 800a52c:	000fffff 	.word	0x000fffff

0800a530 <matherr>:
 800a530:	2000      	movs	r0, #0
 800a532:	4770      	bx	lr
 800a534:	0000      	movs	r0, r0
	...

0800a538 <scalbn>:
 800a538:	b570      	push	{r4, r5, r6, lr}
 800a53a:	ec55 4b10 	vmov	r4, r5, d0
 800a53e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a542:	4606      	mov	r6, r0
 800a544:	462b      	mov	r3, r5
 800a546:	b9aa      	cbnz	r2, 800a574 <scalbn+0x3c>
 800a548:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a54c:	4323      	orrs	r3, r4
 800a54e:	d03b      	beq.n	800a5c8 <scalbn+0x90>
 800a550:	4b31      	ldr	r3, [pc, #196]	; (800a618 <scalbn+0xe0>)
 800a552:	4629      	mov	r1, r5
 800a554:	2200      	movs	r2, #0
 800a556:	ee10 0a10 	vmov	r0, s0
 800a55a:	f7f5 fff5 	bl	8000548 <__aeabi_dmul>
 800a55e:	4b2f      	ldr	r3, [pc, #188]	; (800a61c <scalbn+0xe4>)
 800a560:	429e      	cmp	r6, r3
 800a562:	4604      	mov	r4, r0
 800a564:	460d      	mov	r5, r1
 800a566:	da12      	bge.n	800a58e <scalbn+0x56>
 800a568:	a327      	add	r3, pc, #156	; (adr r3, 800a608 <scalbn+0xd0>)
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	f7f5 ffeb 	bl	8000548 <__aeabi_dmul>
 800a572:	e009      	b.n	800a588 <scalbn+0x50>
 800a574:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a578:	428a      	cmp	r2, r1
 800a57a:	d10c      	bne.n	800a596 <scalbn+0x5e>
 800a57c:	ee10 2a10 	vmov	r2, s0
 800a580:	4620      	mov	r0, r4
 800a582:	4629      	mov	r1, r5
 800a584:	f7f5 fe2a 	bl	80001dc <__adddf3>
 800a588:	4604      	mov	r4, r0
 800a58a:	460d      	mov	r5, r1
 800a58c:	e01c      	b.n	800a5c8 <scalbn+0x90>
 800a58e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a592:	460b      	mov	r3, r1
 800a594:	3a36      	subs	r2, #54	; 0x36
 800a596:	4432      	add	r2, r6
 800a598:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a59c:	428a      	cmp	r2, r1
 800a59e:	dd0b      	ble.n	800a5b8 <scalbn+0x80>
 800a5a0:	ec45 4b11 	vmov	d1, r4, r5
 800a5a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a610 <scalbn+0xd8>
 800a5a8:	f000 f83c 	bl	800a624 <copysign>
 800a5ac:	a318      	add	r3, pc, #96	; (adr r3, 800a610 <scalbn+0xd8>)
 800a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b2:	ec51 0b10 	vmov	r0, r1, d0
 800a5b6:	e7da      	b.n	800a56e <scalbn+0x36>
 800a5b8:	2a00      	cmp	r2, #0
 800a5ba:	dd08      	ble.n	800a5ce <scalbn+0x96>
 800a5bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a5c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a5c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a5c8:	ec45 4b10 	vmov	d0, r4, r5
 800a5cc:	bd70      	pop	{r4, r5, r6, pc}
 800a5ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a5d2:	da0d      	bge.n	800a5f0 <scalbn+0xb8>
 800a5d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a5d8:	429e      	cmp	r6, r3
 800a5da:	ec45 4b11 	vmov	d1, r4, r5
 800a5de:	dce1      	bgt.n	800a5a4 <scalbn+0x6c>
 800a5e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a608 <scalbn+0xd0>
 800a5e4:	f000 f81e 	bl	800a624 <copysign>
 800a5e8:	a307      	add	r3, pc, #28	; (adr r3, 800a608 <scalbn+0xd0>)
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	e7e0      	b.n	800a5b2 <scalbn+0x7a>
 800a5f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a5f4:	3236      	adds	r2, #54	; 0x36
 800a5f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a5fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a5fe:	4620      	mov	r0, r4
 800a600:	4629      	mov	r1, r5
 800a602:	2200      	movs	r2, #0
 800a604:	4b06      	ldr	r3, [pc, #24]	; (800a620 <scalbn+0xe8>)
 800a606:	e7b2      	b.n	800a56e <scalbn+0x36>
 800a608:	c2f8f359 	.word	0xc2f8f359
 800a60c:	01a56e1f 	.word	0x01a56e1f
 800a610:	8800759c 	.word	0x8800759c
 800a614:	7e37e43c 	.word	0x7e37e43c
 800a618:	43500000 	.word	0x43500000
 800a61c:	ffff3cb0 	.word	0xffff3cb0
 800a620:	3c900000 	.word	0x3c900000

0800a624 <copysign>:
 800a624:	ec51 0b10 	vmov	r0, r1, d0
 800a628:	ee11 0a90 	vmov	r0, s3
 800a62c:	ee10 2a10 	vmov	r2, s0
 800a630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a634:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a638:	ea41 0300 	orr.w	r3, r1, r0
 800a63c:	ec43 2b10 	vmov	d0, r2, r3
 800a640:	4770      	bx	lr
	...

0800a644 <__errno>:
 800a644:	4b01      	ldr	r3, [pc, #4]	; (800a64c <__errno+0x8>)
 800a646:	6818      	ldr	r0, [r3, #0]
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	2000001c 	.word	0x2000001c

0800a650 <__libc_init_array>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	4e0d      	ldr	r6, [pc, #52]	; (800a688 <__libc_init_array+0x38>)
 800a654:	4c0d      	ldr	r4, [pc, #52]	; (800a68c <__libc_init_array+0x3c>)
 800a656:	1ba4      	subs	r4, r4, r6
 800a658:	10a4      	asrs	r4, r4, #2
 800a65a:	2500      	movs	r5, #0
 800a65c:	42a5      	cmp	r5, r4
 800a65e:	d109      	bne.n	800a674 <__libc_init_array+0x24>
 800a660:	4e0b      	ldr	r6, [pc, #44]	; (800a690 <__libc_init_array+0x40>)
 800a662:	4c0c      	ldr	r4, [pc, #48]	; (800a694 <__libc_init_array+0x44>)
 800a664:	f000 f82c 	bl	800a6c0 <_init>
 800a668:	1ba4      	subs	r4, r4, r6
 800a66a:	10a4      	asrs	r4, r4, #2
 800a66c:	2500      	movs	r5, #0
 800a66e:	42a5      	cmp	r5, r4
 800a670:	d105      	bne.n	800a67e <__libc_init_array+0x2e>
 800a672:	bd70      	pop	{r4, r5, r6, pc}
 800a674:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a678:	4798      	blx	r3
 800a67a:	3501      	adds	r5, #1
 800a67c:	e7ee      	b.n	800a65c <__libc_init_array+0xc>
 800a67e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a682:	4798      	blx	r3
 800a684:	3501      	adds	r5, #1
 800a686:	e7f2      	b.n	800a66e <__libc_init_array+0x1e>
 800a688:	0800aa18 	.word	0x0800aa18
 800a68c:	0800aa18 	.word	0x0800aa18
 800a690:	0800aa18 	.word	0x0800aa18
 800a694:	0800aa1c 	.word	0x0800aa1c

0800a698 <memcpy>:
 800a698:	b510      	push	{r4, lr}
 800a69a:	1e43      	subs	r3, r0, #1
 800a69c:	440a      	add	r2, r1
 800a69e:	4291      	cmp	r1, r2
 800a6a0:	d100      	bne.n	800a6a4 <memcpy+0xc>
 800a6a2:	bd10      	pop	{r4, pc}
 800a6a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6ac:	e7f7      	b.n	800a69e <memcpy+0x6>

0800a6ae <memset>:
 800a6ae:	4402      	add	r2, r0
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d100      	bne.n	800a6b8 <memset+0xa>
 800a6b6:	4770      	bx	lr
 800a6b8:	f803 1b01 	strb.w	r1, [r3], #1
 800a6bc:	e7f9      	b.n	800a6b2 <memset+0x4>
	...

0800a6c0 <_init>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr

0800a6cc <_fini>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr
